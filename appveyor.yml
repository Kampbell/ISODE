version: ISODE++-0.1.0 {branch}-{build}

cache:
  - C:\Poco\1.6.1
  - C:\ProgramData\chocolatey
  - C:\OpenSSL-Win32
  - C:\OpenSSL-Win64
  
hosts:
  localhost: 127.0.0.1
  db.server.com: 127.0.0.2
  
services:
# mysql : server: localhost, port: 3306
# mysql : user  : root, password: Password12!
#  - mysql

# mongodb config  : C:\mongodb\mongod.cfg
# mongodb database: C:\mongodb\data\db
#  - mongodb

platform:
  - Win32
#  - x64
  
configuration:
  - debug
  - release

environment:
  POCO: C:\Poco\1.6.1
  bundling: bundled

  matrix:

    - builder: msbuild
      vsver: 120
      linkmode: shared

#    - builder: msbuild
#      vsver: 120
#      linkmode: static_md

#    - builder: msbuild
#      vsver: 120
#      linkmode: static_mt

#    - builder: msbuild
#      vsver: 140
#      linkmode: shared

#    - builder: msbuild
#      vsver: 140
#      linkmode: static_md

#    - builder: msbuild
#      vsver: 140
#      linkmode: static_mt


matrix:
  fast_finish: true

install:
  - set PATH=C:\ProgramData\chocolatey\bin;%PATH%
  - systeminfo
  - c:\cygwin\bin\uname -a
  - c:\cygwin\bin\cat /proc/cpuinfo
  - c:\cygwin\bin\cat /proc/meminfo
  - ps: |
        if ($env:builder -eq "cmake")
        {
          if (Test-Path "$env:ChocolateyInstall\bin\jom.exe") {
              echo "using jom from cache"
          } else {
              choco install jom
          }
          if (Test-Path "$env:ChocolateyInstall\bin\cmake.exe") {
            echo "using cmake from cache"
          } else {
            choco install cmake
          }
        }
  - ps: |
        if (Test-Path "C:\Poco\1.6.1") {
           echo "using C:\Poco\1.6.1 from cache"
        } else {
           echo "downloading VS2013.Poco.1.6.1.x86.msi"
           mkdir msi | out-null
           appveyor DownloadFile https://github.com/pocoproject/distro/releases/download/Poco-1.6.1/VS2013.Poco.1.6.1.x86.msi -Filename msi\VS2013.Poco.1.6.1.x86.msi
           echo "installing VS2013.Poco.1.6.1.x86.msi into C:\Poco\1.6.1"
           & cmd /c start /wait  msiexec /a msi\VS2013.Poco.1.6.1.x86.msi /quiet /qn /norestart  TARGETDIR=C:\ /log install.log
        }
  - set ISODE=%CD%
  - set

# -------------------------------------------------------------------------------------------
#  chocolatey brokes jom, here's workaround
#  see https://github.com/jcfr/qt-easy-build/commit/6366f4275562bdaf4f686838600f46894579c41e)
# -------------------------------------------------------------------------------------------
  - ps: |
      if ($env:builder -eq "cmake")
      {
        $env:PATH = $env:ChocolateyInstall + "\bin" + ";" + $env:PATH
        $env:PATH = $env:ChocolateyInstall + "\lib\jom\content" + ";" + $env:PATH
      }
# -------------------------------------------------------------------------------------------


# -------------------------------------------------------------------------------------------
# OpenSSL-Win32 & OpenSSL-Win64
# Download & use OpenSSL from  Shining Light Productions for CMake
# until CMake use implicitly the embedded openssl from the Poco repo. See issue #1093
# -------------------------------------------------------------------------------------------
  - ps: |
       if ($env:builder -eq "cmake")
       {
         if ($env:platform -eq "Win32")
         {
           if (Test-Path "C:\OpenSSL-Win32") {
             echo "using C:\OpenSSL-Win32 from cache"
           } else {
             echo "downloading OpenSSL-Win32"
             Start-FileDownload 'http://slproweb.com/download/Win32OpenSSL-1_0_2e.exe'
             echo "installing C:\OpenSSL-Win32"
             Start-Process "Win32OpenSSL-1_0_2e.exe" -Args "/silent /verysilent /sp- /suppressmsgboxes" -Wait
           }
         }
         if ($env:platform -eq "x64")
         {
           if (Test-Path "C:\OpenSSL-Win64") {
             echo "using C:\OpenSSL-Win64 from cache"
           } else {
             echo "downloading OpenSSL-Win64"
             Start-FileDownload 'http://slproweb.com/download/Win64OpenSSL-1_0_2e.exe'
             echo "installing C:\OpenSSL-Win64"
             Start-Process "Win64OpenSSL-1_0_2e.exe" -Args "/silent /verysilent /sp- /suppressmsgboxes" -Wait
           }
         }
       }
   
before_build:
  - ps: |
        if ($env:vsver -eq "110")
        {
          $vspath= convert-path $env:VS110COMNTOOLS\..\..\VC\bin; $yyyy='2010'
          if($env:platform -eq 'Win32') { $vctool='';}
          if($env:platform -eq 'x64')   { $vctool='x86_amd64';$vspath+='\'+$vctool }
        }
        if ($env:vsver -eq "120")
        {
          $vspath= convert-path $env:VS120COMNTOOLS\..\..\VC\bin;$yyyy='2013'
          if($env:platform -eq 'Win32') { $vctool='';}
          if($env:platform -eq 'x64')   { $vctool='x86_amd64';$vspath+='\'+$vctool }
          
        }
        if ($env:vsver -eq "140")
        {
          $vspath= convert-path $env:VS140COMNTOOLS\..\..\VC\bin; $yyyy='2015'
          if($env:platform -eq 'Win32') { $vctool='';}
          if($env:platform -eq 'x64')   { $vctool='x86_amd64';$vspath+='\'+$vctool }
        }
        pushd $vspath;
        $tool= if($vctool -eq '') {'32'} else {$vctool}
        cmd /c "vcvars$tool.bat&set" |
        foreach {
          if ($_ -match "=") {
            $v = $_.split("="); set-item -force -path "ENV:\$($v[0])"  -value "$($v[1])"
          }
        }
        popd
        write-host "`nVisual Studio $yyyy CLI variables set." -ForegroundColor Yellow
  

after_build:
  - ps: |
      $line='-------------------------------------------------------------------------------------';
      $find='c:\cygwin\bin\find.exe';
      $arg1="$env:ISODE -type f -name '*.cpp' -exec c:\cygwin\bin\grep -n -H ";
      $arg2=" {} ;"
      
      $word='FIXME'
      Write-Host -ForegroundColor Yellow $word;
      Write-Host -ForegroundColor Yellow $line;
      Start-Process -nnw -Wait -FilePath $find -Args "$arg1 $word $arg2" -RSO cout -RSE cerr; 
      gc cout; gc cerr;
      Write-Host -ForegroundColor Yellow $line;
      Write-Host;Write-Host;

      $word='TODO'
      Write-Host -ForegroundColor Yellow $word;
      Write-Host -ForegroundColor Yellow $line;
      Start-Process -nnw -Wait -FilePath $find -Args "$arg1 $word $arg2" -RSO cout -RSE cerr; 
      gc cout; gc cerr;
      Write-Host -ForegroundColor Yellow $line;
      Write-Host;Write-Host;

      $word='HACK'
      Write-Host -ForegroundColor Yellow $word;
      Write-Host -ForegroundColor Yellow $line;
      Start-Process -nnw -Wait -FilePath $find -Args "$arg1 $word $arg2" -RSO cout -RSE cerr; 
      gc cout; gc cerr;
      Write-Host -ForegroundColor Yellow $line;
      Write-Host;Write-Host;


build_script:
  - ps: |
      if ($env:builder -eq "msbuild")
      {
        $logger='C:\Program Files\AppVeyor\BuildAgent\Appveyor.MSBuildLogger.dll';
        $verbosity='minimal';
    
        msbuild cpp\VS2013\iso\itu\osi\als-w32-vs120.sln /t:build /l:$logger /m /nologo /v:$verbosity /p:Configuration=$env:Configuration /p:Platform=$env:platform 
      }

before_test:
  - ps: |
      $line='-------------------------------------------------------------------------------------';
      
after_test:

test_script:
  - ps: |
      $runs=0;$fails=0;$failedTests='';$status=0;$tab="`t";
      $line='-------------------------------------------------------------------------------------';
      if ($env:configuration -eq "release")
      {
        if ($env:builder -eq "msbuild" -and $env:linkmode -eq "shared")
        {
          $suffix = '';
          if ($env:platform -eq "Win32")
          {
            $env:PATH = "$env:POCO\bin;" + $env:PATH;$suffix = '';
          }
          if ($env:platform -eq "x64")
          {
            $env:PATH = "$env:POCO\bin64;" + $env:PATH;$suffix = 64;
          }

          Write-Host -ForegroundColor Yellow '>>> current directory is '  $(get-location).Path;

          $components = @('base', 'nsap', 'tsap');
          Write-Host components;
          Write-Host -ForegroundColor Yellow $line;
          $components;
          Write-Host -ForegroundColor Yellow $line;
 
          $excluded   = "";
          
          Write-Host excluded;
          Write-Host -ForegroundColor Yellow $line;
          $excluded
          Write-Host -ForegroundColor Yellow $line;
          
          foreach ($component in $components) { 
            if ($excluded -notcontains $component) {
              $path = $env:ISODE + "\cpp\VS2013\iso\itu\osi\bin\" + $component + "-testsuite.exe";

              if (Test-Path -Path $path) {
                $runs += 1;
                Add-AppveyorTest -Framework 'CppUnit' -Name $component -Outcome  'Running'

                Write-Host -ForegroundColor Yellow $line; 
                Write-Host -ForegroundColor Yellow '|' $env:APPVEYOR_BUILD_VERSION $env:vs$vsver $env:Platform $env:Configuration $env:linkmode '|' $tab $tab $component; 
                Write-Host -ForegroundColor Yellow $line; 

                $started = Get-Date
                $process = Start-Process -PassThru -nnw -Wait -FilePath "$path" -Args "-all" -RSO cout -RSE cerr;
                $ended   = Get-Date
                $millisec = ($ended - $started).totalmilliseconds
                 
                gc cout; gc cerr;

                if ($process.ExitCode -gt 0) {
                  $fails += 1;$failedTests += $component + ', ';
                  Add-AppveyorTest -Framework 'CppUnit' -Name $component -Outcome  'Failed' -Duration $millisec
                } else {
                  Add-AppveyorTest -Framework 'CppUnit' -Name $component -Outcome  'Passed' -Duration $millisec
                }
              } else {
                 Add-AppveyorTest -Framework 'CppUnit' -Name $component -Outcome   'NotFound'
              }
            } else {
              Add-AppveyorTest -Framework 'CppUnit' -Name $component -Outcome  'Skipped'
            }
          }
        }  
        if ($env:builder -eq "cmake" -and $env:platform -eq "Win32")
        {
          pushd cmake-build;
          Write-Host -ForegroundColor Yellow $line;
          ctest -N
          Write-Host -ForegroundColor Yellow $line;

          Write-Host -ForegroundColor Yellow 'ctest -VV -E Data*'
          ctest -VV -E Data*
          popd
        }
        Write-Host $runs' runs, ' $fails' fails'
        if ($fails -gt 0)
        {
            Write-Host 'Failed: ' $failedTests
            $host.SetShouldExit($fails);
        } else 
        {
            $host.SetShouldExit(0);
        }
      }

on_success:        
  - echo success

on_failure:
  - echo failure

on_finish:
  - echo finish
  
notifications:
  - provider: Email
    on_build_success: false
    on_build_failure: false
    on_build_status_changed: false
   
  - provider: Slack
    auth_token:
      secure: xoOlP1UHshqjvh/INwMcNtBQ++x3p3IuT1NRKd65xnQJ2sP4Fwomb/ROcrDswhACYjlYy0k/YOPresTh+My0LA==
    channel: #isode
    on_build_success: false
    on_build_failure: true
    on_build_status_changed: true
    
    
# token: xoxp-14294014434-20219180518-20690715108-31f90cff7b 	
