function pq_flags(f) {
    s = "";

    s = (s "Q");
    if (bit_and(f, 1))
	s = (s "+");
    else
	s = (s "-");

    s = (s "P");
    if (bit_and(f, 2))
	s = (s "+");
    else
	s = (s "-");

    s = (s "D");
    if (bit_and(f, 4))
	s = (s "+");
    else
	s = (s "-");

    return s;
}

function pj_rank(r) {
    if (r == 0)
	return "active";

    if ((r / 10) % 10 == 1)
	s = (r "th");
    else
	s = (r th[r % 10]);

    return s;
}

function pj_owner(o) {
    if (s = index (o, "@"))
	return substr (o, 1, s - 1);
    return o;
}

BEGIN {
	th[0] = "th";
	th[1] = "st";
	th[2] = "nd";
	th[3] = "rd";
	th[4] = "th";
	th[5] = "th";
	th[6] = "th";
	th[7] = "th";
	th[8] = "th";
	th[9] = "th";

	didone = 0;
	for (i in printQName) {
	    if (didone)
		printf "\n";
	    else {
		printf "%-8s %-6s  %-4s  %s\n",
		       "Name",
			     "Status",
				  "Jobs",
				       "Remarks";
		didone = 1;
	    }

	    printf "%-8s %-6s  %4d  %s\n",
		    printQName,
			 pq_flags(printQStatus),
			     printQEntries,
				  printQDisplay;

	    x = split (i, instance, ".") + 1;
	    didentries = 0;
	    for (j in printJRank, i) {
		if (split (j, instance, ".") != x)
		    break;
		if (didentries == 0) {
		    printf "%-6s %-10s %-3s  %-37s %s\n",
                            "Rank",
				 "Owner",
				      "Job",
                                          "Files",
                                                "Total Size";
		    didentries = 1;
		}

		printf "%-6s %-10s %-3s  %-37s %d bytes\n",
			pj_rank(printJRank),
			    pj_owner(printJOwner),
				 substr(printJName, 4, 3),
				     printJDescription,
					   printJSize;
	    }
	}
	if (!didone && DIAGNOSTIC)
	    printf "print: %s\n", DIAGNOSTIC;
      }
