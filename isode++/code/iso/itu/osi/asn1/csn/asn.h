/*************************************************************/
/* Copyright (C) 2015 OSS Nokalva, Inc.  All rights reserved.*/
/*************************************************************/

/* THIS FILE IS PROPRIETARY MATERIAL OF OSS NOKALVA, INC.
 * AND MAY BE USED ONLY BY DIRECT LICENSEES OF OSS NOKALVA, INC.
 * THIS FILE MAY NOT BE DISTRIBUTED. */

/* This file was generated by a TRIAL version of the OSS ASN.1 Tools.
 * Applications built using this file can be executed only on the machine
 * on which you run the OSS ASN.1 compiler. */

/* Generated for: Kampbell (Trial), License: 70040Z. */
/* Abstract syntax: UpperBounds */
/* Created: Sat Jan 03 14:51:23 2015 */
/* ASN.1/C++ compiler version: 6.0 */
/* Code generated for runtime version 6.0 or later */
/* Compiler operating system: Windows */
/* Compiler machine type: Intel x86 */
/* Target operating system: Windows */
/* Target machine type: Intel x86 */
/* C++ compiler options required: -Zp8 (Microsoft) */
/* ASN.1 compiler options and file names specified:
 * -output Z:/git/ISO.ITU.OSI/cpp/src/iso/itu/osi/asn1/csn\ASN -modlistingfile
 * Z:/git/ISO.ITU.OSI/cpp/src/iso/itu/osi/asn1/csn\ASN.lst -gendirectives
 * Z:/git/ISO.ITU.OSI/cpp/src/iso/itu/osi/asn1/csn\ASN.gen -warningmessages
 * -informatorymessages -2008 -per -ber -der -root -messageFormat msvc
 * -namespace ASN -allow universaltags
 * Z:/git/ISO.ITU.OSI/cpp/src/iso/itu/osi/asn1/asn/ACSE-1.asn
 * Z:/git/ISO.ITU.OSI/cpp/src/iso/itu/osi/asn1/asn/ISO8823-PRESENTATION.asn
 * Z:/git/ISO.ITU.OSI/cpp/src/iso/itu/osi/asn1/asn/Reliable-Transfer-APDU.asn
 * Z:/git/ISO.ITU.OSI/cpp/src/iso/itu/osi/asn1/asn/Remote-Operations-Abstract-Syntaxes.asn
 * Z:/git/ISO.ITU.OSI/cpp/src/iso/itu/osi/asn1/asn/Remote-Operations-Generic-ROS-PDUs.asn
 * Z:/git/ISO.ITU.OSI/cpp/src/iso/itu/osi/asn1/asn/Remote-Operations-Information-Objects.asn
 * Z:/git/ISO.ITU.OSI/cpp/src/iso/itu/osi/asn1/asn/Remote-Operations-Information-Objects-extensions.asn
 * Z:/git/ISO.ITU.OSI/cpp/src/iso/itu/osi/asn1/asn/Remote-Operations-Realizations.asn
 * Z:/git/ISO.ITU.OSI/cpp/src/iso/itu/osi/asn1/asn/Remote-Operations-Useful-Definitions.asn
 * Z:/git/ISO.ITU.OSI/cpp/src/iso/itu/osi/asn1/asn/SelectedAttributeTypes.asn
 * Z:/git/ISO.ITU.OSI/cpp/src/iso/itu/osi/asn1/asn/UsefulDefinitions.asn
 * Z:/git/ISO.ITU.OSI/cpp/src/iso/itu/osi/asn1/asn/InformationFramework.asn
 * Z:/git/ISO.ITU.OSI/cpp/src/iso/itu/osi/asn1/asn/UpperBounds.asn
 */

#ifndef OSS_UpperBounds
#define OSS_UpperBounds

//#include "oss.h"
//#include "asn1.h"

namespace ASN {

/* Representation types */

enum SequenceMatchType {
    sequenceExact = 0,
    sequenceDeletion = 1,
    sequenceRestrictedDeletion = 2,
    sequencePermutation = 3,
    sequencePermutationAndDeletion = 4,
    sequenceProviderDefined = 5
};

enum WordMatchTypes {
    wordExact = 0,
    wordTruncated = 1,
    wordPhonetic = 2,
    wordProviderDefined = 3
};

enum CharacterMatchTypes {
    characterExact = 0,
    characterCaseIgnore = 1,
    characterMapped = 2
};

enum _enum1 {
    association_service = 0,
    transfer_service = 1
};

enum ABRT_diagnostic {
    ABRT_diagnostic_no_reason_given = 1,
    protocol_error = 2,
    ABRT_diagnostic_authentication_mechanism_name_not_recognized = 3,
    ABRT_diagnostic_authentication_mechanism_name_required = 4,
    ABRT_diagnostic_authentication_failure = 5,
    ABRT_diagnostic_authentication_required = 6
};

enum _enum2 {
    intNamedDays_sunday = 1,
    intNamedDays_monday = 2,
    intNamedDays_tuesday = 3,
    intNamedDays_wednesday = 4,
    intNamedDays_thursday = 5,
    intNamedDays_friday = 6,
    intNamedDays_saturday = 7
};

enum ObjectClassKind {
    ObjectClassKind_abstract = 0,
    structural = 1,
    auxiliary = 2
};

enum AttributeUsage {
    userApplications = 0,
    directoryOperation = 1,
    distributedOperation = 2,
    dSAOperation = 3
};


const OSS_UINT32 handles_invalid_encodings = 0;

const OSS_UINT32 authentication = 0;
const OSS_UINT32 application_context_negotiation = 1;

const OSS_UINT32 AARQ_apdu_protocol_version_version1 = 0;

const OSS_INT32 accepted = 0;
const OSS_INT32 rejected_permanent = 1;
const OSS_INT32 rejected_transient = 2;

const OSS_INT32 acse_service_user_null = 0;
const OSS_INT32 acse_service_user_no_reason_given = 1;
const OSS_INT32 application_context_name_not_supported = 2;
const OSS_INT32 calling_AP_title_not_recognized = 3;
const OSS_INT32 calling_AP_invocation_identifier_not_recognized = 4;
const OSS_INT32 calling_AE_qualifier_not_recognized = 5;
const OSS_INT32 calling_AE_invocation_identifier_not_recognized = 6;
const OSS_INT32 called_AP_title_not_recognized = 7;
const OSS_INT32 called_AP_invocation_identifier_not_recognized = 8;
const OSS_INT32 called_AE_qualifier_not_recognized = 9;
const OSS_INT32 called_AE_invocation_identifier_not_recognized = 10;
const OSS_INT32 acse_service_user_authentication_mechanism_name_not_recognized = 11;
const OSS_INT32 acse_service_user_authentication_mechanism_name_required = 12;
const OSS_INT32 acse_service_user_authentication_failure = 13;
const OSS_INT32 acse_service_user_authentication_required = 14;

const OSS_INT32 acse_service_provider_null = 0;
const OSS_INT32 acse_service_provider_no_reason_given = 1;
const OSS_INT32 no_common_acse_version = 2;

const OSS_UINT32 AARE_apdu_protocol_version_version1 = 0;

const OSS_INT32 Release_request_reason_normal = 0;
const OSS_INT32 urgent = 1;
const OSS_INT32 Release_request_reason_user_defined = 30;

const OSS_INT32 Release_response_reason_normal = 0;
const OSS_INT32 not_finished = 1;
const OSS_INT32 Release_response_reason_user_defined = 30;

const OSS_INT32 ABRT_source_acse_service_user = 0;
const OSS_INT32 ABRT_source_acse_service_provider = 1;

const OSS_INT32 x410_1984_mode = 0;
const OSS_INT32 normal_mode = 1;

const OSS_UINT32 version_1 = 0;

const OSS_UINT32 context_management = 0;
const OSS_UINT32 restoration = 1;

const OSS_UINT32 half_duplex = 0;
const OSS_UINT32 duplex = 1;
const OSS_UINT32 expedited_data = 2;
const OSS_UINT32 minor_synchronize = 3;
const OSS_UINT32 major_synchronize = 4;
const OSS_UINT32 resynchronize = 5;
const OSS_UINT32 activity_management = 6;
const OSS_UINT32 negotiated_release = 7;
const OSS_UINT32 capability_data = 8;
const OSS_UINT32 exceptions = 9;
const OSS_UINT32 typed_data = 10;
const OSS_UINT32 symmetric_synchronize = 11;
const OSS_UINT32 data_separation = 12;

const OSS_UINT32 nominated_context = 0;
const OSS_UINT32 short_encoding = 1;
const OSS_UINT32 packed_encoding_rules = 2;

const OSS_INT32 monologue = 0;
const OSS_INT32 twa = 1;

const OSS_INT32 rtsBusy = 0;
const OSS_INT32 cannotRecover = 1;
const OSS_INT32 validationFailure = 2;
const OSS_INT32 unacceptableDialogueMode = 3;

const OSS_INT32 Result_acceptance = 0;
const OSS_INT32 Result_user_rejection = 1;
const OSS_INT32 provider_rejection = 2;

const OSS_INT32 Provider_reason_reason_not_specified = 0;
const OSS_INT32 temporary_congestion = 1;
const OSS_INT32 local_limit_exceeded = 2;
const OSS_INT32 called_presentation_address_unknown = 3;
const OSS_INT32 protocol_version_not_supported = 4;
const OSS_INT32 default_context_not_supported = 5;
const OSS_INT32 user_data_not_readable = 6;
const OSS_INT32 no_PSAP_available = 7;

const OSS_INT32 Reliable_Transfer_APDU_AbortReason_localSystemProblem = 0;
const OSS_INT32 Reliable_Transfer_APDU_AbortReason_invalidParameter = 1;
const OSS_INT32 Reliable_Transfer_APDU_AbortReason_unrecognizedActivity = 2;
const OSS_INT32 Reliable_Transfer_APDU_AbortReason_temporaryProblem = 3;
const OSS_INT32 Reliable_Transfer_APDU_AbortReason_protocolError = 4;
const OSS_INT32 Reliable_Transfer_APDU_AbortReason_permanentProblem = 5;
const OSS_INT32 Reliable_Transfer_APDU_AbortReason_userError = 6;
const OSS_INT32 Reliable_Transfer_APDU_AbortReason_transferCompleted = 7;

const OSS_INT32 Abort_reason_reason_not_specified = 0;
const OSS_INT32 unrecognized_ppdu = 1;
const OSS_INT32 unexpected_ppdu = 2;
const OSS_INT32 unexpected_session_service_primitive = 3;
const OSS_INT32 unrecognized_ppdu_parameter = 4;
const OSS_INT32 unexpected_ppdu_parameter = 5;
const OSS_INT32 invalid_ppdu_parameter_value = 6;

const OSS_INT32 cp_PPDU = 0;
const OSS_INT32 cpa_PPDU = 1;
const OSS_INT32 cpr_PPDU = 2;
const OSS_INT32 aru_PPDU = 3;
const OSS_INT32 arp_PPDU = 4;
const OSS_INT32 ac_PPDU = 5;
const OSS_INT32 aca_PPDU = 6;
const OSS_INT32 td_PPDU = 7;
const OSS_INT32 ttd_PPDU = 8;
const OSS_INT32 te_PPDU = 9;
const OSS_INT32 tc_PPDU = 10;
const OSS_INT32 tcc_PPDU = 11;
const OSS_INT32 rs_PPDU = 12;
const OSS_INT32 rsa_PPDU = 13;
const OSS_INT32 s_release_indication = 14;
const OSS_INT32 s_release_confirm = 15;
const OSS_INT32 s_token_give_indication = 16;
const OSS_INT32 s_token_please_indication = 17;
const OSS_INT32 s_control_give_indication = 18;
const OSS_INT32 s_sync_minor_indication = 19;
const OSS_INT32 s_sync_minor_confirm = 20;
const OSS_INT32 s_sync_major_indication = 21;
const OSS_INT32 s_sync_major_confirm = 22;
const OSS_INT32 s_p_exception_report_indication = 23;
const OSS_INT32 s_u_exception_report_indication = 24;
const OSS_INT32 s_activity_start_indication = 25;
const OSS_INT32 s_activity_resume_indication = 26;
const OSS_INT32 s_activity_interrupt_indication = 27;
const OSS_INT32 s_activity_interrupt_confirm = 28;
const OSS_INT32 s_activity_discard_indication = 29;
const OSS_INT32 s_activity_discard_confirm = 30;
const OSS_INT32 s_activity_end_indication = 31;
const OSS_INT32 s_activity_end_confirm = 32;

const OSS_INT32 Presentation_context_deletion_result_list_acceptance = 0;
const OSS_INT32 Presentation_context_deletion_result_list_user_rejection = 1;

const OSS_INT32 provider_reason_reason_not_specified = 0;
const OSS_INT32 abstract_syntax_not_supported = 1;
const OSS_INT32 proposed_transfer_syntaxes_not_supported = 2;
const OSS_INT32 local_limit_on_DCS_exceeded = 3;

const OSS_INT32 Remote_Operations_Abstract_Syntaxes_AbortReason_localSystemProblem = 0;
const OSS_INT32 Remote_Operations_Abstract_Syntaxes_AbortReason_invalidParameter = 1;
const OSS_INT32 Remote_Operations_Abstract_Syntaxes_AbortReason_unrecognizedActivity = 2;
const OSS_INT32 Remote_Operations_Abstract_Syntaxes_AbortReason_temporaryProblem = 3;
const OSS_INT32 Remote_Operations_Abstract_Syntaxes_AbortReason_protocolError = 4;
const OSS_INT32 Remote_Operations_Abstract_Syntaxes_AbortReason_permanentProblem = 5;
const OSS_INT32 Remote_Operations_Abstract_Syntaxes_AbortReason_userError = 6;
const OSS_INT32 Remote_Operations_Abstract_Syntaxes_AbortReason_transferCompleted = 7;

const OSS_INT32 unrecognizedPDU = 0;
const OSS_INT32 mistypedPDU = 1;
const OSS_INT32 badlyStructuredPDU = 2;

const OSS_INT32 duplicateInvocation = 0;
const OSS_INT32 unrecognizedOperation = 1;
const OSS_INT32 mistypedArgument = 2;
const OSS_INT32 resourceLimitation = 3;
const OSS_INT32 releaseInProgress = 4;
const OSS_INT32 unrecognizedLinkedId = 5;
const OSS_INT32 linkedResponseUnexpected = 6;
const OSS_INT32 unexpectedLinkedOperation = 7;

const OSS_INT32 ReturnResultProblem_unrecognizedInvocation = 0;
const OSS_INT32 resultResponseUnexpected = 1;
const OSS_INT32 mistypedResult = 2;

const OSS_INT32 ReturnErrorProblem_unrecognizedInvocation = 0;
const OSS_INT32 errorResponseUnexpected = 1;
const OSS_INT32 unrecognizedError = 2;
const OSS_INT32 unexpectedError = 3;
const OSS_INT32 mistypedParameter = 4;

const OSS_INT32 baseObject = 0;
const OSS_INT32 oneLevel = 1;
const OSS_INT32 wholeSubtree = 2;

const OSS_INT32 any_delivery_method = 0;
const OSS_INT32 mhs_delivery = 1;
const OSS_INT32 physical_delivery = 2;
const OSS_INT32 telex_delivery = 3;
const OSS_INT32 teletex_delivery = 4;
const OSS_INT32 g3_facsimile_delivery = 5;
const OSS_INT32 g4_facsimile_delivery = 6;
const OSS_INT32 ia5_terminal_delivery = 7;
const OSS_INT32 videotex_delivery = 8;
const OSS_INT32 telephone_delivery = 9;

const OSS_UINT32 bitDay_sunday = 0;
const OSS_UINT32 bitDay_monday = 1;
const OSS_UINT32 bitDay_tuesday = 2;
const OSS_UINT32 bitDay_wednesday = 3;
const OSS_UINT32 bitDay_thursday = 4;
const OSS_UINT32 bitDay_friday = 5;
const OSS_UINT32 bitDay_saturday = 6;

const OSS_UINT32 week1 = 0;
const OSS_UINT32 week2 = 1;
const OSS_UINT32 week3 = 2;
const OSS_UINT32 week4 = 3;
const OSS_UINT32 week5 = 4;

const OSS_UINT32 january = 0;
const OSS_UINT32 february = 1;
const OSS_UINT32 march = 2;
const OSS_UINT32 april = 3;
const OSS_UINT32 may = 4;
const OSS_UINT32 june = 5;
const OSS_UINT32 july = 6;
const OSS_UINT32 august = 7;
const OSS_UINT32 september = 8;
const OSS_UINT32 october = 9;
const OSS_UINT32 november = 10;
const OSS_UINT32 december = 11;

const OSS_UINT32 bitNamedDays_sunday = 0;
const OSS_UINT32 bitNamedDays_monday = 1;
const OSS_UINT32 bitNamedDays_tuesday = 2;
const OSS_UINT32 bitNamedDays_wednesday = 3;
const OSS_UINT32 bitNamedDays_thursday = 4;
const OSS_UINT32 bitNamedDays_friday = 5;
const OSS_UINT32 bitNamedDays_saturday = 6;
class OSS_PUBLIC __shared2  : public OssChoice   /* CHOICE */
{
public:
    enum Id {
	unselected,
	single_ASN1_type_chosen = 1,
	octet_aligned_chosen = 2,
	arbitrary_chosen = 3
    };
    typedef OssOpen single_ASN1_type;
    typedef OssString octet_aligned;
    typedef OssBitString arbitrary;

    __shared2();
    __shared2(const __shared2 &);
    ~__shared2();

    __shared2 & operator = (const __shared2 &);
    int operator == (const __shared2 &) const;
    int operator != (const __shared2 &) const;

    single_ASN1_type *get_single_ASN1_type();
    const single_ASN1_type *get_single_ASN1_type() const;
    void set_single_ASN1_type(const single_ASN1_type &);

    octet_aligned *get_octet_aligned();
    const octet_aligned *get_octet_aligned() const;
    void set_octet_aligned(const octet_aligned &);

    arbitrary *get_arbitrary();
    const arbitrary *get_arbitrary() const;
    void set_arbitrary(const arbitrary &);
private:
    union {
	OSSC::COssOpen single_ASN1_type_field;
	OSSC::COssString octet_aligned_field;
	OSSC::COssBitString arbitrary_field;
    };
    void cleanup();
};

class OSS_PUBLIC External   /* SEQUENCE */
{
public:
    void * operator new(size_t size);
    void operator delete(void *ptr);

    typedef OssEncOID direct_reference;
    typedef OSS_INT32 indirect_reference;
    typedef OssString data_value_descriptor;
    typedef __shared2 encoding;

    External();
    External(const External &);
    External(const direct_reference &, indirect_reference, const data_value_descriptor &, 
	const encoding &);
    External(const encoding &);

    External & operator = (const External &);
    int operator == (const External &) const;
    int operator != (const External &) const;

    direct_reference *get_direct_reference();
    const direct_reference *get_direct_reference() const;
    void set_direct_reference(const direct_reference &);
    int direct_reference_is_present() const;
    void omit_direct_reference();

    indirect_reference *get_indirect_reference();
    const indirect_reference *get_indirect_reference() const;
    void set_indirect_reference(indirect_reference);
    int indirect_reference_is_present() const;
    void omit_indirect_reference();

    data_value_descriptor *get_data_value_descriptor();
    const data_value_descriptor *get_data_value_descriptor() const;
    void set_data_value_descriptor(const data_value_descriptor &);
    int data_value_descriptor_is_present() const;
    void omit_data_value_descriptor();

    encoding & get_encoding();
    const encoding & get_encoding() const;
    void set_encoding(const encoding &);
private:
    OSS_UINT32 bit_mask;
    direct_reference direct_reference_field;
    indirect_reference indirect_reference_field;
    data_value_descriptor data_value_descriptor_field;
    encoding encoding_field;
};

class OSS_PUBLIC __shared5;

class OSS_PUBLIC __shared6 : public OssList  /* SEQUENCE OF */
{
public:
    typedef __shared5 component;

    __shared6();
    __shared6(const __shared6 &);
    ~__shared6();

    __shared6 & operator = (const __shared6 &);
    int operator == (const __shared6 &) const;
    int operator != (const __shared6 &) const;

    component *at(OssIndex);
    const component *at(OssIndex) const;

    OssIndex prepend(const component & );
    OssIndex prepend(__shared6 *);
    OssIndex insert_after(OssIndex, const component & );
    OssIndex insert_after(OssIndex, __shared6 *);

    int remove_front();
    int remove_after(OssIndex);

    __shared6 *extract_after(OssIndex, OssIndex);
};

typedef __shared6 RDNSequence;

class OSS_PUBLIC __shared7  : public OssChoice   /* CHOICE */
{
public:
    enum Id {
	unselected,
	rdnSequence_chosen = 1
    };
    typedef __shared6 rdnSequence;

    __shared7();
    __shared7(const __shared7 &);
    ~__shared7();

    __shared7 & operator = (const __shared7 &);
    int operator == (const __shared7 &) const;
    int operator != (const __shared7 &) const;

    rdnSequence *get_rdnSequence();
    const rdnSequence *get_rdnSequence() const;
    void set_rdnSequence(const rdnSequence &);
private:
    union {
	void *rdnSequence_field;
    };
    void cleanup();
};

typedef __shared7 Name;

typedef __shared7 AP_title_form1;

class OSS_PUBLIC AP_title  : public OssChoice   /* CHOICE */
{
public:
    enum Id {
	unselected,
	ap_title_form1_chosen = 2,
	ap_title_form2_chosen = 1
    };
    typedef __shared7 ap_title_form1;
    typedef OssEncOID ap_title_form2;

    AP_title();
    AP_title(const AP_title &);
    ~AP_title();

    AP_title & operator = (const AP_title &);
    int operator == (const AP_title &) const;
    int operator != (const AP_title &) const;

    ap_title_form1 *get_ap_title_form1();
    const ap_title_form1 *get_ap_title_form1() const;
    void set_ap_title_form1(const ap_title_form1 &);

    ap_title_form2 *get_ap_title_form2();
    const ap_title_form2 *get_ap_title_form2() const;
    void set_ap_title_form2(const ap_title_form2 &);
private:
    union {
	ap_title_form1 *ap_title_form1_field;
	OSSC::COssEncOID ap_title_form2_field;
    };
    void cleanup();
};

class OSS_PUBLIC AttributeTypeAndDistinguishedValue;

class OSS_PUBLIC __shared5 : public OssList  /* SET OF */
{
public:
    typedef AttributeTypeAndDistinguishedValue component;

    __shared5();
    __shared5(const __shared5 &);
    ~__shared5();

    __shared5 & operator = (const __shared5 &);
    int operator == (const __shared5 &) const;
    int operator != (const __shared5 &) const;

    component *at(OssIndex);
    const component *at(OssIndex) const;

    OssIndex prepend(const component & );
    OssIndex prepend(__shared5 *);
    OssIndex insert_after(OssIndex, const component & );
    OssIndex insert_after(OssIndex, __shared5 *);

    int remove_front();
    int remove_after(OssIndex);

    __shared5 *extract_after(OssIndex, OssIndex);
};

typedef __shared5 RelativeDistinguishedName;

typedef __shared5 AE_qualifier_form1;

class OSS_PUBLIC AE_qualifier  : public OssChoice   /* CHOICE */
{
public:
    enum Id {
	unselected,
	ae_qualifier_form1_chosen = 2,
	ae_qualifier_form2_chosen = 1
    };
    typedef __shared5 ae_qualifier_form1;
    typedef OSS_INT32 ae_qualifier_form2;

    AE_qualifier();
    AE_qualifier(const AE_qualifier &);
    ~AE_qualifier();

    AE_qualifier & operator = (const AE_qualifier &);
    int operator == (const AE_qualifier &) const;
    int operator != (const AE_qualifier &) const;

    ae_qualifier_form1 *get_ae_qualifier_form1();
    const ae_qualifier_form1 *get_ae_qualifier_form1() const;
    void set_ae_qualifier_form1(const ae_qualifier_form1 &);

    ae_qualifier_form2 *get_ae_qualifier_form2();
    const ae_qualifier_form2 *get_ae_qualifier_form2() const;
    void set_ae_qualifier_form2(ae_qualifier_form2);
private:
    union {
	void *ae_qualifier_form1_field;
	ae_qualifier_form2 ae_qualifier_form2_field;
    };
    void cleanup();
};

class OSS_PUBLIC SupportedContexts_Type : public OssConstrainedOpenType
{
public:
    SupportedContexts_Type();
    SupportedContexts_Type(const SupportedContexts_Type &);
    ~SupportedContexts_Type();
    SupportedContexts_Type & operator = (const SupportedContexts_Type &);
    int operator == (const SupportedContexts_Type &) const;
    int operator != (const SupportedContexts_Type &) const;
    int set_decoded(PDU &);
    int grab_decoded(PDU &);
    int set_encoded(const EncodedBuffer &);
    int grab_encoded(EncodedBuffer &);
    int encode(OssControl &);
private:
    void cleanup_decoded();
};

class OSS_PUBLIC __seq1   /* SEQUENCE */
{
public:
    void * operator new(size_t size);
    void operator delete(void *ptr);

    typedef OssEncOID other_mechanism_name;
    typedef SupportedContexts_Type other_mechanism_value;

    __seq1();
    __seq1(const __seq1 &);
    __seq1(const other_mechanism_name &, const other_mechanism_value &);

    __seq1 & operator = (const __seq1 &);
    int operator == (const __seq1 &) const;
    int operator != (const __seq1 &) const;

    other_mechanism_name & get_other_mechanism_name();
    const other_mechanism_name & get_other_mechanism_name() const;
    void set_other_mechanism_name(const other_mechanism_name &);

    other_mechanism_value & get_other_mechanism_value();
    const other_mechanism_value & get_other_mechanism_value() const;
    void set_other_mechanism_value(const other_mechanism_value &);
private:
    other_mechanism_name other_mechanism_name_field;
    other_mechanism_value other_mechanism_value_field;
};

class OSS_PUBLIC Authentication_value  : public OssChoice   /* CHOICE */
{
public:
    enum Id {
	unselected,
	charstring_chosen = 1,
	bitstring_chosen = 2,
	external_chosen = 3,
	other_chosen = 4
    };
    typedef OssString charstring;
    typedef OssBitString bitstring;
    typedef External external;
    typedef __seq1 other;

    Authentication_value();
    Authentication_value(const Authentication_value &);
    ~Authentication_value();

    Authentication_value & operator = (const Authentication_value &);
    int operator == (const Authentication_value &) const;
    int operator != (const Authentication_value &) const;

    charstring *get_charstring();
    const charstring *get_charstring() const;
    void set_charstring(const charstring &);

    bitstring *get_bitstring();
    const bitstring *get_bitstring() const;
    void set_bitstring(const bitstring &);

    external *get_external();
    const external *get_external() const;
    void set_external(const external &);

    other *get_other();
    const other *get_other() const;
    void set_other(const other &);
private:
    union {
	OSSC::COssString charstring_field;
	OSSC::COssBitString bitstring_field;
	external *external_field;
	other *other_field;
    };
    void cleanup();
};

class OSS_PUBLIC __shared8 : public OssList  /* SEQUENCE OF */
{
public:
    typedef OssEncOID component;

    __shared8();
    __shared8(const __shared8 &);
    ~__shared8();

    __shared8 & operator = (const __shared8 &);
    int operator == (const __shared8 &) const;
    int operator != (const __shared8 &) const;

    component *at(OssIndex);
    const component *at(OssIndex) const;

    OssIndex prepend(const component & );
    OssIndex prepend(__shared8 *);
    OssIndex insert_after(OssIndex, const component & );
    OssIndex insert_after(OssIndex, __shared8 *);

    int remove_front();
    int remove_after(OssIndex);

    __shared8 *extract_after(OssIndex, OssIndex);
};

typedef __shared8 Application_context_name_list;

class OSS_PUBLIC __shared9 : public OssList  /* SEQUENCE OF */
{
public:
    typedef External component;

    __shared9();
    __shared9(const __shared9 &);
    ~__shared9();

    __shared9 & operator = (const __shared9 &);
    int operator == (const __shared9 &) const;
    int operator != (const __shared9 &) const;

    component *at(OssIndex);
    const component *at(OssIndex) const;

    OssIndex prepend(const component & );
    OssIndex prepend(__shared9 *);
    OssIndex insert_after(OssIndex, const component & );
    OssIndex insert_after(OssIndex, __shared9 *);

    int remove_front();
    int remove_after(OssIndex);

    __shared9 *extract_after(OssIndex, OssIndex);
};

typedef __shared9 Association_information;

class OSS_PUBLIC AARQ_apdu   /* SEQUENCE */
{
public:
    void * operator new(size_t size);
    void operator delete(void *ptr);

    typedef OssBitString protocol_version;
    typedef OssEncOID application_context_name;
    typedef AP_title called_AP_title;
    typedef AE_qualifier called_AE_qualifier;
    typedef OSS_INT32 called_AP_invocation_identifier;
    typedef OSS_INT32 called_AE_invocation_identifier;
    typedef AP_title calling_AP_title;
    typedef AE_qualifier calling_AE_qualifier;
    typedef OSS_INT32 calling_AP_invocation_identifier;
    typedef OSS_INT32 calling_AE_invocation_identifier;
    typedef OssBitString sender_acse_requirements;
    typedef OssEncOID mechanism_name;
    typedef Authentication_value calling_authentication_value;
    typedef __shared8 application_context_name_list;
    typedef OssString implementation_information;
    typedef __shared9 user_information;

    static const protocol_version & default_protocol_version;

    static const protocol_version& get_default_protocol_version();

    AARQ_apdu();
    AARQ_apdu(const AARQ_apdu &);
    AARQ_apdu(const protocol_version &, const application_context_name &, const called_AP_title &, 
	const called_AE_qualifier &, called_AP_invocation_identifier, called_AE_invocation_identifier, 
	const calling_AP_title &, const calling_AE_qualifier &, calling_AP_invocation_identifier, 
	calling_AE_invocation_identifier, const sender_acse_requirements &, const mechanism_name &, 
	const calling_authentication_value &, const application_context_name_list &, const implementation_information &, 
	const user_information &);
    AARQ_apdu(const application_context_name &);
    ~AARQ_apdu();

    AARQ_apdu & operator = (const AARQ_apdu &);
    int operator == (const AARQ_apdu &) const;
    int operator != (const AARQ_apdu &) const;

    protocol_version *get_protocol_version();
    const protocol_version *get_protocol_version() const;
    void set_protocol_version(const protocol_version &);
    int protocol_version_is_default() const;
    void set_default_protocol_version();

    application_context_name & get_application_context_name();
    const application_context_name & get_application_context_name() const;
    void set_application_context_name(const application_context_name &);

    called_AP_title *get_called_AP_title();
    const called_AP_title *get_called_AP_title() const;
    void set_called_AP_title(const called_AP_title &);
    int called_AP_title_is_present() const;
    void omit_called_AP_title();

    called_AE_qualifier *get_called_AE_qualifier();
    const called_AE_qualifier *get_called_AE_qualifier() const;
    void set_called_AE_qualifier(const called_AE_qualifier &);
    int called_AE_qualifier_is_present() const;
    void omit_called_AE_qualifier();

    called_AP_invocation_identifier *get_called_AP_invocation_identifier();
    const called_AP_invocation_identifier *get_called_AP_invocation_identifier() const;
    void set_called_AP_invocation_identifier(called_AP_invocation_identifier);
    int called_AP_invocation_identifier_is_present() const;
    void omit_called_AP_invocation_identifier();

    called_AE_invocation_identifier *get_called_AE_invocation_identifier();
    const called_AE_invocation_identifier *get_called_AE_invocation_identifier() const;
    void set_called_AE_invocation_identifier(called_AE_invocation_identifier);
    int called_AE_invocation_identifier_is_present() const;
    void omit_called_AE_invocation_identifier();

    calling_AP_title *get_calling_AP_title();
    const calling_AP_title *get_calling_AP_title() const;
    void set_calling_AP_title(const calling_AP_title &);
    int calling_AP_title_is_present() const;
    void omit_calling_AP_title();

    calling_AE_qualifier *get_calling_AE_qualifier();
    const calling_AE_qualifier *get_calling_AE_qualifier() const;
    void set_calling_AE_qualifier(const calling_AE_qualifier &);
    int calling_AE_qualifier_is_present() const;
    void omit_calling_AE_qualifier();

    calling_AP_invocation_identifier *get_calling_AP_invocation_identifier();
    const calling_AP_invocation_identifier *get_calling_AP_invocation_identifier() const;
    void set_calling_AP_invocation_identifier(calling_AP_invocation_identifier);
    int calling_AP_invocation_identifier_is_present() const;
    void omit_calling_AP_invocation_identifier();

    calling_AE_invocation_identifier *get_calling_AE_invocation_identifier();
    const calling_AE_invocation_identifier *get_calling_AE_invocation_identifier() const;
    void set_calling_AE_invocation_identifier(calling_AE_invocation_identifier);
    int calling_AE_invocation_identifier_is_present() const;
    void omit_calling_AE_invocation_identifier();

    sender_acse_requirements *get_sender_acse_requirements();
    const sender_acse_requirements *get_sender_acse_requirements() const;
    void set_sender_acse_requirements(const sender_acse_requirements &);
    int sender_acse_requirements_is_present() const;
    void omit_sender_acse_requirements();

    mechanism_name *get_mechanism_name();
    const mechanism_name *get_mechanism_name() const;
    void set_mechanism_name(const mechanism_name &);
    int mechanism_name_is_present() const;
    void omit_mechanism_name();

    calling_authentication_value *get_calling_authentication_value();
    const calling_authentication_value *get_calling_authentication_value() const;
    void set_calling_authentication_value(const calling_authentication_value &);
    int calling_authentication_value_is_present() const;
    void omit_calling_authentication_value();

    application_context_name_list *get_application_context_name_list();
    const application_context_name_list *get_application_context_name_list() const;
    void set_application_context_name_list(const application_context_name_list &);
    int application_context_name_list_is_present() const;
    void omit_application_context_name_list();

    implementation_information *get_implementation_information();
    const implementation_information *get_implementation_information() const;
    void set_implementation_information(const implementation_information &);
    int implementation_information_is_present() const;
    void omit_implementation_information();

    user_information *get_user_information();
    const user_information *get_user_information() const;
    void set_user_information(const user_information &);
    int user_information_is_present() const;
    void omit_user_information();
private:
    OSS_UINT32 bit_mask;
    protocol_version protocol_version_field;
    application_context_name application_context_name_field;
    called_AP_title called_AP_title_field;
    called_AE_qualifier called_AE_qualifier_field;
    called_AP_invocation_identifier called_AP_invocation_identifier_field;
    called_AE_invocation_identifier called_AE_invocation_identifier_field;
    calling_AP_title calling_AP_title_field;
    calling_AE_qualifier calling_AE_qualifier_field;
    calling_AP_invocation_identifier calling_AP_invocation_identifier_field;
    calling_AE_invocation_identifier calling_AE_invocation_identifier_field;
    sender_acse_requirements sender_acse_requirements_field;
    mechanism_name mechanism_name_field;
    calling_authentication_value calling_authentication_value_field;
    application_context_name_list application_context_name_list_field;
    implementation_information implementation_information_field;
    user_information user_information_field;
};

class OSS_PUBLIC Associate_source_diagnostic  : public OssChoice   /* CHOICE */
{
public:
    enum Id {
	unselected,
	acse_service_user_chosen = 1,
	acse_service_provider_chosen = 2
    };
    typedef OSS_INT32 acse_service_user;
    typedef OSS_INT32 acse_service_provider;

    Associate_source_diagnostic();
    Associate_source_diagnostic(const Associate_source_diagnostic &);

    Associate_source_diagnostic & operator = (const Associate_source_diagnostic &);
    int operator == (const Associate_source_diagnostic &) const;
    int operator != (const Associate_source_diagnostic &) const;

    acse_service_user *get_acse_service_user();
    const acse_service_user *get_acse_service_user() const;
    void set_acse_service_user(acse_service_user);

    acse_service_provider *get_acse_service_provider();
    const acse_service_provider *get_acse_service_provider() const;
    void set_acse_service_provider(acse_service_provider);
private:
    union {
	acse_service_user acse_service_user_field;
	acse_service_provider acse_service_provider_field;
    };
};

class OSS_PUBLIC AARE_apdu   /* SEQUENCE */
{
public:
    void * operator new(size_t size);
    void operator delete(void *ptr);

    typedef OssBitString protocol_version;
    typedef OssEncOID application_context_name;
    typedef OSS_INT32 result;
    typedef Associate_source_diagnostic result_source_diagnostic;
    typedef AP_title responding_AP_title;
    typedef AE_qualifier responding_AE_qualifier;
    typedef OSS_INT32 responding_AP_invocation_identifier;
    typedef OSS_INT32 responding_AE_invocation_identifier;
    typedef OssBitString responder_acse_requirements;
    typedef OssEncOID mechanism_name;
    typedef Authentication_value responding_authentication_value;
    typedef __shared8 application_context_name_list;
    typedef OssString implementation_information;
    typedef __shared9 user_information;

    static const protocol_version & default_protocol_version;

    static const protocol_version& get_default_protocol_version();

    AARE_apdu();
    AARE_apdu(const AARE_apdu &);
    AARE_apdu(const protocol_version &, const application_context_name &, result, 
	const result_source_diagnostic &, const responding_AP_title &, const responding_AE_qualifier &, 
	responding_AP_invocation_identifier, responding_AE_invocation_identifier, const responder_acse_requirements &, 
	const mechanism_name &, const responding_authentication_value &, const application_context_name_list &, 
	const implementation_information &, const user_information &);
    AARE_apdu(const application_context_name &, result, const result_source_diagnostic &);
    ~AARE_apdu();

    AARE_apdu & operator = (const AARE_apdu &);
    int operator == (const AARE_apdu &) const;
    int operator != (const AARE_apdu &) const;

    protocol_version *get_protocol_version();
    const protocol_version *get_protocol_version() const;
    void set_protocol_version(const protocol_version &);
    int protocol_version_is_default() const;
    void set_default_protocol_version();

    application_context_name & get_application_context_name();
    const application_context_name & get_application_context_name() const;
    void set_application_context_name(const application_context_name &);

    result & get_result();
    result get_result() const;
    void set_result(result);

    result_source_diagnostic & get_result_source_diagnostic();
    const result_source_diagnostic & get_result_source_diagnostic() const;
    void set_result_source_diagnostic(const result_source_diagnostic &);

    responding_AP_title *get_responding_AP_title();
    const responding_AP_title *get_responding_AP_title() const;
    void set_responding_AP_title(const responding_AP_title &);
    int responding_AP_title_is_present() const;
    void omit_responding_AP_title();

    responding_AE_qualifier *get_responding_AE_qualifier();
    const responding_AE_qualifier *get_responding_AE_qualifier() const;
    void set_responding_AE_qualifier(const responding_AE_qualifier &);
    int responding_AE_qualifier_is_present() const;
    void omit_responding_AE_qualifier();

    responding_AP_invocation_identifier *get_responding_AP_invocation_identifier();
    const responding_AP_invocation_identifier *get_responding_AP_invocation_identifier() const;
    void set_responding_AP_invocation_identifier(responding_AP_invocation_identifier);
    int responding_AP_invocation_identifier_is_present() const;
    void omit_responding_AP_invocation_identifier();

    responding_AE_invocation_identifier *get_responding_AE_invocation_identifier();
    const responding_AE_invocation_identifier *get_responding_AE_invocation_identifier() const;
    void set_responding_AE_invocation_identifier(responding_AE_invocation_identifier);
    int responding_AE_invocation_identifier_is_present() const;
    void omit_responding_AE_invocation_identifier();

    responder_acse_requirements *get_responder_acse_requirements();
    const responder_acse_requirements *get_responder_acse_requirements() const;
    void set_responder_acse_requirements(const responder_acse_requirements &);
    int responder_acse_requirements_is_present() const;
    void omit_responder_acse_requirements();

    mechanism_name *get_mechanism_name();
    const mechanism_name *get_mechanism_name() const;
    void set_mechanism_name(const mechanism_name &);
    int mechanism_name_is_present() const;
    void omit_mechanism_name();

    responding_authentication_value *get_responding_authentication_value();
    const responding_authentication_value *get_responding_authentication_value() const;
    void set_responding_authentication_value(const responding_authentication_value &);
    int responding_authentication_value_is_present() const;
    void omit_responding_authentication_value();

    application_context_name_list *get_application_context_name_list();
    const application_context_name_list *get_application_context_name_list() const;
    void set_application_context_name_list(const application_context_name_list &);
    int application_context_name_list_is_present() const;
    void omit_application_context_name_list();

    implementation_information *get_implementation_information();
    const implementation_information *get_implementation_information() const;
    void set_implementation_information(const implementation_information &);
    int implementation_information_is_present() const;
    void omit_implementation_information();

    user_information *get_user_information();
    const user_information *get_user_information() const;
    void set_user_information(const user_information &);
    int user_information_is_present() const;
    void omit_user_information();
private:
    OSS_UINT32 bit_mask;
    protocol_version protocol_version_field;
    application_context_name application_context_name_field;
    result result_field;
    result_source_diagnostic result_source_diagnostic_field;
    responding_AP_title responding_AP_title_field;
    responding_AE_qualifier responding_AE_qualifier_field;
    responding_AP_invocation_identifier responding_AP_invocation_identifier_field;
    responding_AE_invocation_identifier responding_AE_invocation_identifier_field;
    responder_acse_requirements responder_acse_requirements_field;
    mechanism_name mechanism_name_field;
    responding_authentication_value responding_authentication_value_field;
    application_context_name_list application_context_name_list_field;
    implementation_information implementation_information_field;
    user_information user_information_field;
};

class OSS_PUBLIC __shared10   /* SEQUENCE */
{
public:
    void * operator new(size_t size);
    void operator delete(void *ptr);

    typedef OSS_INT32 reason;
    typedef __shared9 user_information;

    __shared10();
    __shared10(const __shared10 &);
    __shared10(reason, const user_information &);

    __shared10 & operator = (const __shared10 &);
    int operator == (const __shared10 &) const;
    int operator != (const __shared10 &) const;

    reason *get_reason();
    const reason *get_reason() const;
    void set_reason(reason);
    int reason_is_present() const;
    void omit_reason();

    user_information *get_user_information();
    const user_information *get_user_information() const;
    void set_user_information(const user_information &);
    int user_information_is_present() const;
    void omit_user_information();
private:
    OSS_UINT32 bit_mask;
    reason reason_field;
    user_information user_information_field;
};

typedef __shared10 RLRQ_apdu;

typedef __shared10 RLRE_apdu;

class OSS_PUBLIC ABRT_apdu   /* SEQUENCE */
{
public:
    void * operator new(size_t size);
    void operator delete(void *ptr);

    typedef OSS_INT32 abort_source;
    typedef enum ABRT_diagnostic abort_diagnostic;
    typedef __shared9 user_information;

    ABRT_apdu();
    ABRT_apdu(const ABRT_apdu &);
    ABRT_apdu(abort_source, abort_diagnostic, const user_information &);
    ABRT_apdu(abort_source);

    ABRT_apdu & operator = (const ABRT_apdu &);
    int operator == (const ABRT_apdu &) const;
    int operator != (const ABRT_apdu &) const;

    abort_source & get_abort_source();
    abort_source get_abort_source() const;
    void set_abort_source(abort_source);

    abort_diagnostic *get_abort_diagnostic();
    const abort_diagnostic *get_abort_diagnostic() const;
    void set_abort_diagnostic(abort_diagnostic);
    int abort_diagnostic_is_present() const;
    void omit_abort_diagnostic();

    user_information *get_user_information();
    const user_information *get_user_information() const;
    void set_user_information(const user_information &);
    int user_information_is_present() const;
    void omit_user_information();
private:
    OSS_UINT32 bit_mask;
    abort_source abort_source_field;
    abort_diagnostic abort_diagnostic_field;
    user_information user_information_field;
};

class OSS_PUBLIC ACSE_apdu  : public OssChoice   /* CHOICE */
{
public:
    enum Id {
	unselected,
	aarq_chosen = 1,
	aare_chosen = 2,
	rlrq_chosen = 3,
	rlre_chosen = 4,
	abrt_chosen = 5
    };
    typedef AARQ_apdu aarq;
    typedef AARE_apdu aare;
    typedef __shared10 rlrq;
    typedef __shared10 rlre;
    typedef ABRT_apdu abrt;

    ACSE_apdu();
    ACSE_apdu(const ACSE_apdu &);
    ~ACSE_apdu();

    ACSE_apdu & operator = (const ACSE_apdu &);
    int operator == (const ACSE_apdu &) const;
    int operator != (const ACSE_apdu &) const;

    aarq *get_aarq();
    const aarq *get_aarq() const;
    void set_aarq(const aarq &);

    aare *get_aare();
    const aare *get_aare() const;
    void set_aare(const aare &);

    rlrq *get_rlrq();
    const rlrq *get_rlrq() const;
    void set_rlrq(const rlrq &);

    rlre *get_rlre();
    const rlre *get_rlre() const;
    void set_rlre(const rlre &);

    abrt *get_abrt();
    const abrt *get_abrt() const;
    void set_abrt(const abrt &);
private:
    union {
	aarq *aarq_field;
	aare *aare_field;
	rlrq *rlrq_field;
	rlre *rlre_field;
	abrt *abrt_field;
    };
    void cleanup();
};

typedef OssEncOID Application_context_name;

typedef OssEncOID AP_title_form2;

typedef OSS_INT32 AE_qualifier_form2;

typedef OSS_INT32 AP_invocation_identifier;

typedef OSS_INT32 AE_invocation_identifier;

typedef OssBitString ACSE_requirements;

typedef OssEncOID Mechanism_name;

typedef OssOpen AttributeValue;

typedef OSS_INT32 HierarchyLevel;

class OSS_PUBLIC __shared11   /* SEQUENCE */
{
public:
    void * operator new(size_t size);
    void operator delete(void *ptr);

    typedef enum _enum1 realization_type;
    typedef ossBoolean concatenation;

    static const concatenation default_concatenation;

    static concatenation get_default_concatenation();

    __shared11();
    __shared11(const __shared11 &);
    __shared11(realization_type, concatenation);
    __shared11(realization_type);

    __shared11 & operator = (const __shared11 &);
    int operator == (const __shared11 &) const;
    int operator != (const __shared11 &) const;

    realization_type & get_realization_type();
    realization_type get_realization_type() const;
    void set_realization_type(realization_type);

    concatenation *get_concatenation();
    const concatenation *get_concatenation() const;
    void set_concatenation(concatenation);
    int concatenation_is_default() const;
    void set_default_concatenation();
private:
    OSS_UINT32 bit_mask;
    realization_type realization_type_field;
    concatenation concatenation_field;
};

typedef __shared11 RealizationParameter;

typedef OSS_INT32 IntegerMatch_SYNTAX;

typedef OSS_INT32 IntegerOrderingMatch_SYNTAX;

typedef OssUTCTime UTCTimeMatch_SYNTAX;

typedef OssUTCTime UTCTimeOrderingMatch_SYNTAX;

typedef OssGeneralizedTime GeneralizedTimeMatch_SYNTAX;

typedef OssGeneralizedTime GeneralizedTimeOrderingMatch_SYNTAX;

typedef OSS_INT32 IntegerFirstComponentMatch_SYNTAX;

typedef OssGeneralizedTime CreateTimestamp_WITH_SYNTAX;

typedef OssGeneralizedTime ModifyTimestamp_WITH_SYNTAX;

typedef OssGeneralizedTime SubschemaTimestamp_WITH_SYNTAX;

typedef OssBitString UniqueIdentifier;

typedef OssString CountryName;

typedef OssString TelephoneNumber;

typedef OssString X121Address;

typedef OssString InternationalISDNNumber;

typedef OssString DestinationIndicator;

typedef OssString LanguageContextSyntax;

typedef ossBoolean HierarchyBelow;

typedef __shared11 Acse_RealizationParameter;

typedef __shared11 Acse_with_concatenation_RealizationParameter;

typedef __shared11 Association_by_RTSE_RealizationParameter;

typedef __shared11 PData_RealizationParameter;

typedef __shared11 PData_with_concatenation_RealizationParameter;

typedef __shared11 Transfer_by_RTSE_RealizationParameter;

typedef OssBitString BitStringMatch_SYNTAX;

typedef OssString DnQualifier_WITH_SYNTAX;

typedef OssString SerialNumber_WITH_SYNTAX;

typedef OssString NumericStringMatch_SYNTAX;

typedef OssString ProtocolInformationMatch_SYNTAX;

typedef OssString UiiInUrn_WITH_SYNTAX;

typedef OssString NumericStringOrderingMatch_SYNTAX;

typedef ossBoolean BooleanMatch_SYNTAX;

typedef OssString OctetStringMatch_SYNTAX;

typedef OssString OctetStringOrderingMatch_SYNTAX;

typedef OssEncOID AdministrativeRole_WITH_SYNTAX;

typedef ossBoolean HasSubordinates_WITH_SYNTAX;

typedef OssString Implementation_data;

typedef OSS_INT32 Associate_result;

typedef OSS_INT32 Release_request_reason;

typedef OSS_INT32 Release_response_reason;

typedef OSS_INT32 ABRT_source;

typedef __shared7 AE_title_form1;

typedef OssEncOID AE_title_form2;

class OSS_PUBLIC AE_title  : public OssChoice   /* CHOICE */
{
public:
    enum Id {
	unselected,
	ae_title_form1_chosen = 2,
	ae_title_form2_chosen = 1
    };
    typedef __shared7 ae_title_form1;
    typedef OssEncOID ae_title_form2;

    AE_title();
    AE_title(const AE_title &);
    ~AE_title();

    AE_title & operator = (const AE_title &);
    int operator == (const AE_title &) const;
    int operator != (const AE_title &) const;

    ae_title_form1 *get_ae_title_form1();
    const ae_title_form1 *get_ae_title_form1() const;
    void set_ae_title_form1(const ae_title_form1 &);

    ae_title_form2 *get_ae_title_form2();
    const ae_title_form2 *get_ae_title_form2() const;
    void set_ae_title_form2(const ae_title_form2 &);
private:
    union {
	ae_title_form1 *ae_title_form1_field;
	OSSC::COssEncOID ae_title_form2_field;
    };
    void cleanup();
};

class OSS_PUBLIC Mode_selector   /* SET */
{
public:
    void * operator new(size_t size);
    void operator delete(void *ptr);

    typedef OSS_INT32 mode_value;

    Mode_selector();
    Mode_selector(const Mode_selector &);
    Mode_selector(mode_value);

    Mode_selector & operator = (const Mode_selector &);
    int operator == (const Mode_selector &) const;
    int operator != (const Mode_selector &) const;

    mode_value & get_mode_value();
    mode_value get_mode_value() const;
    void set_mode_value(mode_value);
private:
    mode_value mode_value_field;
};

class OSS_PUBLIC CallingSSuserReference  : public OssChoice   /* CHOICE */
{
public:
    enum Id {
	unselected,
	t61String_chosen = 2,
	octetString_chosen = 1
    };
    typedef OssString t61String;
    typedef OssString octetString;

    CallingSSuserReference();
    CallingSSuserReference(const CallingSSuserReference &);
    ~CallingSSuserReference();

    CallingSSuserReference & operator = (const CallingSSuserReference &);
    int operator == (const CallingSSuserReference &) const;
    int operator != (const CallingSSuserReference &) const;

    t61String *get_t61String();
    const t61String *get_t61String() const;
    void set_t61String(const t61String &);

    octetString *get_octetString();
    const octetString *get_octetString() const;
    void set_octetString(const octetString &);
private:
    union {
	OSSC::COssString t61String_field;
	OSSC::COssString octetString_field;
    };
    void cleanup();
};

class OSS_PUBLIC SessionConnectionIdentifier   /* SEQUENCE */
{
public:
    void * operator new(size_t size);
    void operator delete(void *ptr);

    typedef CallingSSuserReference callingSSuserReference;
    typedef OssUTCTime commonReference;
    typedef OssString additionalReferenceInformation;

    SessionConnectionIdentifier();
    SessionConnectionIdentifier(const SessionConnectionIdentifier &);
    SessionConnectionIdentifier(const callingSSuserReference &, const commonReference &, 
	const additionalReferenceInformation &);
    SessionConnectionIdentifier(const callingSSuserReference &, const commonReference &);

    SessionConnectionIdentifier & operator = (const SessionConnectionIdentifier &);
    int operator == (const SessionConnectionIdentifier &) const;
    int operator != (const SessionConnectionIdentifier &) const;

    callingSSuserReference & get_callingSSuserReference();
    const callingSSuserReference & get_callingSSuserReference() const;
    void set_callingSSuserReference(const callingSSuserReference &);

    commonReference & get_commonReference();
    const commonReference & get_commonReference() const;
    void set_commonReference(const commonReference &);

    additionalReferenceInformation *get_additionalReferenceInformation();
    const additionalReferenceInformation *get_additionalReferenceInformation() const;
    void set_additionalReferenceInformation(const additionalReferenceInformation &);
    int additionalReferenceInformation_is_present() const;
    void omit_additionalReferenceInformation();
private:
    OSS_UINT32 bit_mask;
    callingSSuserReference callingSSuserReference_field;
    commonReference commonReference_field;
    additionalReferenceInformation additionalReferenceInformation_field;
};

class OSS_PUBLIC ConnectionData  : public OssChoice   /* CHOICE */
{
public:
    enum Id {
	unselected,
	open_chosen = 1,
	recover_chosen = 2
    };
    typedef OssOpen open;
    typedef SessionConnectionIdentifier recover;

    ConnectionData();
    ConnectionData(const ConnectionData &);
    ~ConnectionData();

    ConnectionData & operator = (const ConnectionData &);
    int operator == (const ConnectionData &) const;
    int operator != (const ConnectionData &) const;

    open *get_open();
    const open *get_open() const;
    void set_open(const open &);

    recover *get_recover();
    const recover *get_recover() const;
    void set_recover(const recover &);
private:
    union {
	OSSC::COssOpen open_field;
	recover *recover_field;
    };
    void cleanup();
};

typedef OssBitString Protocol_version;

typedef OssString Presentation_selector;

typedef OssString Calling_presentation_selector;

typedef OssString Called_presentation_selector;

class OSS_PUBLIC __seq7;

class OSS_PUBLIC __shared12 : public OssList  /* SEQUENCE OF */
{
public:
    typedef __seq7 component;

    __shared12();
    __shared12(const __shared12 &);
    ~__shared12();

    __shared12 & operator = (const __shared12 &);
    int operator == (const __shared12 &) const;
    int operator != (const __shared12 &) const;

    component *at(OssIndex);
    const component *at(OssIndex) const;

    OssIndex prepend(const component & );
    OssIndex prepend(__shared12 *);
    OssIndex insert_after(OssIndex, const component & );
    OssIndex insert_after(OssIndex, __shared12 *);

    int remove_front();
    int remove_after(OssIndex);

    __shared12 *extract_after(OssIndex, OssIndex);
};

typedef __shared12 Context_list;

typedef __shared12 Presentation_context_definition_list;

typedef OssEncOID Abstract_syntax_name;

typedef OssEncOID Transfer_syntax_name;

class OSS_PUBLIC Default_context_name   /* SEQUENCE */
{
public:
    void * operator new(size_t size);
    void operator delete(void *ptr);

    typedef OssEncOID abstract_syntax_name;
    typedef OssEncOID transfer_syntax_name;

    Default_context_name();
    Default_context_name(const Default_context_name &);
    Default_context_name(const abstract_syntax_name &, const transfer_syntax_name &);

    Default_context_name & operator = (const Default_context_name &);
    int operator == (const Default_context_name &) const;
    int operator != (const Default_context_name &) const;

    abstract_syntax_name & get_abstract_syntax_name();
    const abstract_syntax_name & get_abstract_syntax_name() const;
    void set_abstract_syntax_name(const abstract_syntax_name &);

    transfer_syntax_name & get_transfer_syntax_name();
    const transfer_syntax_name & get_transfer_syntax_name() const;
    void set_transfer_syntax_name(const transfer_syntax_name &);
private:
    abstract_syntax_name abstract_syntax_name_field;
    transfer_syntax_name transfer_syntax_name_field;
};

typedef OssBitString Presentation_requirements;

typedef OssBitString User_session_requirements;

typedef OssBitString Protocol_options;

typedef OSS_INT32 Presentation_context_identifier;

typedef OssString Simply_encoded_data;

class OSS_PUBLIC PDV_list;

class OSS_PUBLIC __shared13 : public OssList  /* SEQUENCE OF */
{
public:
    typedef PDV_list component;

    __shared13();
    __shared13(const __shared13 &);
    ~__shared13();

    __shared13 & operator = (const __shared13 &);
    int operator == (const __shared13 &) const;
    int operator != (const __shared13 &) const;

    component *at(OssIndex);
    const component *at(OssIndex) const;

    OssIndex prepend(const component & );
    OssIndex prepend(__shared13 *);
    OssIndex insert_after(OssIndex, const component & );
    OssIndex insert_after(OssIndex, __shared13 *);

    int remove_front();
    int remove_after(OssIndex);

    __shared13 *extract_after(OssIndex, OssIndex);
};

typedef __shared13 Fully_encoded_data;

class OSS_PUBLIC __shared14  : public OssChoice   /* CHOICE */
{
public:
    enum Id {
	unselected,
	simply_encoded_data_chosen = 1,
	fully_encoded_data_chosen = 2
    };
    typedef OssString simply_encoded_data;
    typedef __shared13 fully_encoded_data;

    __shared14();
    __shared14(const __shared14 &);
    ~__shared14();

    __shared14 & operator = (const __shared14 &);
    int operator == (const __shared14 &) const;
    int operator != (const __shared14 &) const;

    simply_encoded_data *get_simply_encoded_data();
    const simply_encoded_data *get_simply_encoded_data() const;
    void set_simply_encoded_data(const simply_encoded_data &);

    fully_encoded_data *get_fully_encoded_data();
    const fully_encoded_data *get_fully_encoded_data() const;
    void set_fully_encoded_data(const fully_encoded_data &);
private:
    union {
	OSSC::COssString simply_encoded_data_field;
	void *fully_encoded_data_field;
    };
    void cleanup();
};

typedef __shared14 User_data;

class OSS_PUBLIC __shared15   /* SET */
{
public:
    void * operator new(size_t size);
    void operator delete(void *ptr);

    typedef OSS_INT32 checkpointSize;
    typedef OSS_INT32 windowSize;
    typedef OSS_INT32 dialogueMode;
    typedef ConnectionData connectionDataRQ;
    typedef OSS_INT32 applicationProtocol;

    static const checkpointSize default_checkpointSize;
    static const windowSize default_windowSize;
    static const dialogueMode default_dialogueMode;

    static checkpointSize get_default_checkpointSize();
    static windowSize get_default_windowSize();
    static dialogueMode get_default_dialogueMode();

    __shared15();
    __shared15(const __shared15 &);
    __shared15(checkpointSize, windowSize, dialogueMode, const connectionDataRQ &, 
	applicationProtocol);
    __shared15(const connectionDataRQ &);

    __shared15 & operator = (const __shared15 &);
    int operator == (const __shared15 &) const;
    int operator != (const __shared15 &) const;

    checkpointSize *get_checkpointSize();
    const checkpointSize *get_checkpointSize() const;
    void set_checkpointSize(checkpointSize);
    int checkpointSize_is_default() const;
    void set_default_checkpointSize();

    windowSize *get_windowSize();
    const windowSize *get_windowSize() const;
    void set_windowSize(windowSize);
    int windowSize_is_default() const;
    void set_default_windowSize();

    dialogueMode *get_dialogueMode();
    const dialogueMode *get_dialogueMode() const;
    void set_dialogueMode(dialogueMode);
    int dialogueMode_is_default() const;
    void set_default_dialogueMode();

    connectionDataRQ & get_connectionDataRQ();
    const connectionDataRQ & get_connectionDataRQ() const;
    void set_connectionDataRQ(const connectionDataRQ &);

    applicationProtocol *get_applicationProtocol();
    const applicationProtocol *get_applicationProtocol() const;
    void set_applicationProtocol(applicationProtocol);
    int applicationProtocol_is_present() const;
    void omit_applicationProtocol();
private:
    OSS_UINT32 bit_mask;
    checkpointSize checkpointSize_field;
    windowSize windowSize_field;
    dialogueMode dialogueMode_field;
    connectionDataRQ connectionDataRQ_field;
    applicationProtocol applicationProtocol_field;
};

class OSS_PUBLIC __seq2   /* SEQUENCE */
{
public:
    void * operator new(size_t size);
    void operator delete(void *ptr);


    __seq2();
    __seq2(const __seq2 &);

    __seq2 & operator = (const __seq2 &);
    int operator == (const __seq2 &) const;
    int operator != (const __seq2 &) const;
private:
    char placeholder;
};

class OSS_PUBLIC __seq3   /* SEQUENCE */
{
public:
    void * operator new(size_t size);
    void operator delete(void *ptr);

    typedef OssBitString protocol_version;
    typedef OssString calling_presentation_selector;
    typedef OssString called_presentation_selector;
    typedef __shared12 presentation_context_definition_list;
    typedef Default_context_name default_context_name;
    typedef OssBitString presentation_requirements;
    typedef OssBitString user_session_requirements;
    typedef OssBitString protocol_options;
    typedef OSS_INT32 initiators_nominated_context;
    typedef __seq2 extensions;
    typedef __shared14 user_data;

    static const protocol_version & default_protocol_version;
    static const protocol_options & default_protocol_options;

    static const protocol_version& get_default_protocol_version();
    static const protocol_options& get_default_protocol_options();

    __seq3();
    __seq3(const __seq3 &);
    __seq3(const protocol_version &, const calling_presentation_selector &, const called_presentation_selector &, 
	const presentation_context_definition_list &, const default_context_name &, const presentation_requirements &, 
	const user_session_requirements &, const protocol_options &, initiators_nominated_context, 
	const extensions &, const user_data &);
    ~__seq3();

    __seq3 & operator = (const __seq3 &);
    int operator == (const __seq3 &) const;
    int operator != (const __seq3 &) const;

    protocol_version *get_protocol_version();
    const protocol_version *get_protocol_version() const;
    void set_protocol_version(const protocol_version &);
    int protocol_version_is_default() const;
    void set_default_protocol_version();

    calling_presentation_selector *get_calling_presentation_selector();
    const calling_presentation_selector *get_calling_presentation_selector() const;
    void set_calling_presentation_selector(const calling_presentation_selector &);
    int calling_presentation_selector_is_present() const;
    void omit_calling_presentation_selector();

    called_presentation_selector *get_called_presentation_selector();
    const called_presentation_selector *get_called_presentation_selector() const;
    void set_called_presentation_selector(const called_presentation_selector &);
    int called_presentation_selector_is_present() const;
    void omit_called_presentation_selector();

    presentation_context_definition_list *get_presentation_context_definition_list();
    const presentation_context_definition_list *get_presentation_context_definition_list() const;
    void set_presentation_context_definition_list(const presentation_context_definition_list &);
    int presentation_context_definition_list_is_present() const;
    void omit_presentation_context_definition_list();

    default_context_name *get_default_context_name();
    const default_context_name *get_default_context_name() const;
    void set_default_context_name(const default_context_name &);
    int default_context_name_is_present() const;
    void omit_default_context_name();

    presentation_requirements *get_presentation_requirements();
    const presentation_requirements *get_presentation_requirements() const;
    void set_presentation_requirements(const presentation_requirements &);
    int presentation_requirements_is_present() const;
    void omit_presentation_requirements();

    user_session_requirements *get_user_session_requirements();
    const user_session_requirements *get_user_session_requirements() const;
    void set_user_session_requirements(const user_session_requirements &);
    int user_session_requirements_is_present() const;
    void omit_user_session_requirements();

    protocol_options *get_protocol_options();
    const protocol_options *get_protocol_options() const;
    void set_protocol_options(const protocol_options &);
    int protocol_options_is_default() const;
    void set_default_protocol_options();

    initiators_nominated_context *get_initiators_nominated_context();
    const initiators_nominated_context *get_initiators_nominated_context() const;
    void set_initiators_nominated_context(initiators_nominated_context);
    int initiators_nominated_context_is_present() const;
    void omit_initiators_nominated_context();

    extensions *get_extensions();
    const extensions *get_extensions() const;
    void set_extensions(const extensions &);
    int extensions_is_present() const;
    void omit_extensions();

    user_data *get_user_data();
    const user_data *get_user_data() const;
    void set_user_data(const user_data &);
    int user_data_is_present() const;
    void omit_user_data();
private:
    OSS_UINT32 bit_mask;
    protocol_version protocol_version_field;
    calling_presentation_selector calling_presentation_selector_field;
    called_presentation_selector called_presentation_selector_field;
    presentation_context_definition_list presentation_context_definition_list_field;
    default_context_name default_context_name_field;
    presentation_requirements presentation_requirements_field;
    user_session_requirements user_session_requirements_field;
    protocol_options protocol_options_field;
    initiators_nominated_context initiators_nominated_context_field;
    extensions extensions_field;
    user_data user_data_field;
};

class OSS_PUBLIC CP_type   /* SET */
{
public:
    void * operator new(size_t size);
    void operator delete(void *ptr);

    typedef Mode_selector mode_selector;
    typedef __shared15 x410_mode_parameters;
    typedef __seq3 normal_mode_parameters;

    CP_type();
    CP_type(const CP_type &);
    CP_type(const mode_selector &, const x410_mode_parameters &, const normal_mode_parameters &);
    CP_type(const mode_selector &);

    CP_type & operator = (const CP_type &);
    int operator == (const CP_type &) const;
    int operator != (const CP_type &) const;

    mode_selector & get_mode_selector();
    const mode_selector & get_mode_selector() const;
    void set_mode_selector(const mode_selector &);

    x410_mode_parameters *get_x410_mode_parameters();
    const x410_mode_parameters *get_x410_mode_parameters() const;
    void set_x410_mode_parameters(const x410_mode_parameters &);
    int x410_mode_parameters_is_present() const;
    void omit_x410_mode_parameters();

    normal_mode_parameters *get_normal_mode_parameters();
    const normal_mode_parameters *get_normal_mode_parameters() const;
    void set_normal_mode_parameters(const normal_mode_parameters &);
    int normal_mode_parameters_is_present() const;
    void omit_normal_mode_parameters();
private:
    OSS_UINT32 bit_mask;
    mode_selector mode_selector_field;
    x410_mode_parameters x410_mode_parameters_field;
    normal_mode_parameters normal_mode_parameters_field;
};

typedef __shared14 CPC_type;

typedef OssString Responding_presentation_selector;

class OSS_PUBLIC __seq9;

class OSS_PUBLIC __shared16 : public OssList  /* SEQUENCE OF */
{
public:
    typedef __seq9 component;

    __shared16();
    __shared16(const __shared16 &);
    ~__shared16();

    __shared16 & operator = (const __shared16 &);
    int operator == (const __shared16 &) const;
    int operator != (const __shared16 &) const;

    component *at(OssIndex);
    const component *at(OssIndex) const;

    OssIndex prepend(const component & );
    OssIndex prepend(__shared16 *);
    OssIndex insert_after(OssIndex, const component & );
    OssIndex insert_after(OssIndex, __shared16 *);

    int remove_front();
    int remove_after(OssIndex);

    __shared16 *extract_after(OssIndex, OssIndex);
};

typedef __shared16 Result_list;

typedef __shared16 Presentation_context_definition_result_list;

class OSS_PUBLIC __shared17   /* SET */
{
public:
    void * operator new(size_t size);
    void operator delete(void *ptr);

    typedef OSS_INT32 checkpointSize;
    typedef OSS_INT32 windowSize;
    typedef ConnectionData connectionDataAC;

    static const checkpointSize default_checkpointSize;
    static const windowSize default_windowSize;

    static checkpointSize get_default_checkpointSize();
    static windowSize get_default_windowSize();

    __shared17();
    __shared17(const __shared17 &);
    __shared17(checkpointSize, windowSize, const connectionDataAC &);
    __shared17(const connectionDataAC &);

    __shared17 & operator = (const __shared17 &);
    int operator == (const __shared17 &) const;
    int operator != (const __shared17 &) const;

    checkpointSize *get_checkpointSize();
    const checkpointSize *get_checkpointSize() const;
    void set_checkpointSize(checkpointSize);
    int checkpointSize_is_default() const;
    void set_default_checkpointSize();

    windowSize *get_windowSize();
    const windowSize *get_windowSize() const;
    void set_windowSize(windowSize);
    int windowSize_is_default() const;
    void set_default_windowSize();

    connectionDataAC & get_connectionDataAC();
    const connectionDataAC & get_connectionDataAC() const;
    void set_connectionDataAC(const connectionDataAC &);
private:
    OSS_UINT32 bit_mask;
    checkpointSize checkpointSize_field;
    windowSize windowSize_field;
    connectionDataAC connectionDataAC_field;
};

class OSS_PUBLIC __seq4   /* SEQUENCE */
{
public:
    void * operator new(size_t size);
    void operator delete(void *ptr);

    typedef OssBitString protocol_version;
    typedef OssString responding_presentation_selector;
    typedef __shared16 presentation_context_definition_result_list;
    typedef OssBitString presentation_requirements;
    typedef OssBitString user_session_requirements;
    typedef OssBitString protocol_options;
    typedef OSS_INT32 responders_nominated_context;
    typedef __shared14 user_data;

    static const protocol_version & default_protocol_version;
    static const protocol_options & default_protocol_options;

    static const protocol_version& get_default_protocol_version();
    static const protocol_options& get_default_protocol_options();

    __seq4();
    __seq4(const __seq4 &);
    __seq4(const protocol_version &, const responding_presentation_selector &, const presentation_context_definition_result_list &, 
	const presentation_requirements &, const user_session_requirements &, const protocol_options &, 
	responders_nominated_context, const user_data &);
    ~__seq4();

    __seq4 & operator = (const __seq4 &);
    int operator == (const __seq4 &) const;
    int operator != (const __seq4 &) const;

    protocol_version *get_protocol_version();
    const protocol_version *get_protocol_version() const;
    void set_protocol_version(const protocol_version &);
    int protocol_version_is_default() const;
    void set_default_protocol_version();

    responding_presentation_selector *get_responding_presentation_selector();
    const responding_presentation_selector *get_responding_presentation_selector() const;
    void set_responding_presentation_selector(const responding_presentation_selector &);
    int responding_presentation_selector_is_present() const;
    void omit_responding_presentation_selector();

    presentation_context_definition_result_list *get_presentation_context_definition_result_list();
    const presentation_context_definition_result_list *get_presentation_context_definition_result_list() const;
    void set_presentation_context_definition_result_list(const presentation_context_definition_result_list &);
    int presentation_context_definition_result_list_is_present() const;
    void omit_presentation_context_definition_result_list();

    presentation_requirements *get_presentation_requirements();
    const presentation_requirements *get_presentation_requirements() const;
    void set_presentation_requirements(const presentation_requirements &);
    int presentation_requirements_is_present() const;
    void omit_presentation_requirements();

    user_session_requirements *get_user_session_requirements();
    const user_session_requirements *get_user_session_requirements() const;
    void set_user_session_requirements(const user_session_requirements &);
    int user_session_requirements_is_present() const;
    void omit_user_session_requirements();

    protocol_options *get_protocol_options();
    const protocol_options *get_protocol_options() const;
    void set_protocol_options(const protocol_options &);
    int protocol_options_is_default() const;
    void set_default_protocol_options();

    responders_nominated_context *get_responders_nominated_context();
    const responders_nominated_context *get_responders_nominated_context() const;
    void set_responders_nominated_context(responders_nominated_context);
    int responders_nominated_context_is_present() const;
    void omit_responders_nominated_context();

    user_data *get_user_data();
    const user_data *get_user_data() const;
    void set_user_data(const user_data &);
    int user_data_is_present() const;
    void omit_user_data();
private:
    OSS_UINT32 bit_mask;
    protocol_version protocol_version_field;
    responding_presentation_selector responding_presentation_selector_field;
    presentation_context_definition_result_list presentation_context_definition_result_list_field;
    presentation_requirements presentation_requirements_field;
    user_session_requirements user_session_requirements_field;
    protocol_options protocol_options_field;
    responders_nominated_context responders_nominated_context_field;
    user_data user_data_field;
};

class OSS_PUBLIC CPA_PPDU   /* SET */
{
public:
    void * operator new(size_t size);
    void operator delete(void *ptr);

    typedef Mode_selector mode_selector;
    typedef __shared17 x410_mode_parameters;
    typedef __seq4 normal_mode_parameters;

    CPA_PPDU();
    CPA_PPDU(const CPA_PPDU &);
    CPA_PPDU(const mode_selector &, const x410_mode_parameters &, const normal_mode_parameters &);
    CPA_PPDU(const mode_selector &);

    CPA_PPDU & operator = (const CPA_PPDU &);
    int operator == (const CPA_PPDU &) const;
    int operator != (const CPA_PPDU &) const;

    mode_selector & get_mode_selector();
    const mode_selector & get_mode_selector() const;
    void set_mode_selector(const mode_selector &);

    x410_mode_parameters *get_x410_mode_parameters();
    const x410_mode_parameters *get_x410_mode_parameters() const;
    void set_x410_mode_parameters(const x410_mode_parameters &);
    int x410_mode_parameters_is_present() const;
    void omit_x410_mode_parameters();

    normal_mode_parameters *get_normal_mode_parameters();
    const normal_mode_parameters *get_normal_mode_parameters() const;
    void set_normal_mode_parameters(const normal_mode_parameters &);
    int normal_mode_parameters_is_present() const;
    void omit_normal_mode_parameters();
private:
    OSS_UINT32 bit_mask;
    mode_selector mode_selector_field;
    x410_mode_parameters x410_mode_parameters_field;
    normal_mode_parameters normal_mode_parameters_field;
};

typedef OSS_INT32 RefuseReason;

typedef OSS_INT32 Result;

typedef OSS_INT32 Default_context_result;

typedef OSS_INT32 Provider_reason;

class OSS_PUBLIC __shared18   /* SET */
{
public:
    void * operator new(size_t size);
    void operator delete(void *ptr);

    typedef OSS_INT32 refuseReason;
    typedef OssOpen userDataRJ;

    __shared18();
    __shared18(const __shared18 &);
    __shared18(refuseReason, const userDataRJ &);

    __shared18 & operator = (const __shared18 &);
    int operator == (const __shared18 &) const;
    int operator != (const __shared18 &) const;

    refuseReason *get_refuseReason();
    const refuseReason *get_refuseReason() const;
    void set_refuseReason(refuseReason);
    int refuseReason_is_present() const;
    void omit_refuseReason();

    userDataRJ *get_userDataRJ();
    const userDataRJ *get_userDataRJ() const;
    void set_userDataRJ(const userDataRJ &);
    int userDataRJ_is_present() const;
    void omit_userDataRJ();
private:
    OSS_UINT32 bit_mask;
    refuseReason refuseReason_field;
    userDataRJ userDataRJ_field;
};

class OSS_PUBLIC __seq5   /* SEQUENCE */
{
public:
    void * operator new(size_t size);
    void operator delete(void *ptr);

    typedef OssBitString protocol_version;
    typedef OssString responding_presentation_selector;
    typedef __shared16 presentation_context_definition_result_list;
    typedef OSS_INT32 default_context_result;
    typedef OSS_INT32 provider_reason;
    typedef __shared14 user_data;

    static const protocol_version & default_protocol_version;

    static const protocol_version& get_default_protocol_version();

    __seq5();
    __seq5(const __seq5 &);
    __seq5(const protocol_version &, const responding_presentation_selector &, const presentation_context_definition_result_list &, 
	default_context_result, provider_reason, const user_data &);
    ~__seq5();

    __seq5 & operator = (const __seq5 &);
    int operator == (const __seq5 &) const;
    int operator != (const __seq5 &) const;

    protocol_version *get_protocol_version();
    const protocol_version *get_protocol_version() const;
    void set_protocol_version(const protocol_version &);
    int protocol_version_is_default() const;
    void set_default_protocol_version();

    responding_presentation_selector *get_responding_presentation_selector();
    const responding_presentation_selector *get_responding_presentation_selector() const;
    void set_responding_presentation_selector(const responding_presentation_selector &);
    int responding_presentation_selector_is_present() const;
    void omit_responding_presentation_selector();

    presentation_context_definition_result_list *get_presentation_context_definition_result_list();
    const presentation_context_definition_result_list *get_presentation_context_definition_result_list() const;
    void set_presentation_context_definition_result_list(const presentation_context_definition_result_list &);
    int presentation_context_definition_result_list_is_present() const;
    void omit_presentation_context_definition_result_list();

    default_context_result *get_default_context_result();
    const default_context_result *get_default_context_result() const;
    void set_default_context_result(default_context_result);
    int default_context_result_is_present() const;
    void omit_default_context_result();

    provider_reason *get_provider_reason();
    const provider_reason *get_provider_reason() const;
    void set_provider_reason(provider_reason);
    int provider_reason_is_present() const;
    void omit_provider_reason();

    user_data *get_user_data();
    const user_data *get_user_data() const;
    void set_user_data(const user_data &);
    int user_data_is_present() const;
    void omit_user_data();
private:
    OSS_UINT32 bit_mask;
    protocol_version protocol_version_field;
    responding_presentation_selector responding_presentation_selector_field;
    presentation_context_definition_result_list presentation_context_definition_result_list_field;
    default_context_result default_context_result_field;
    provider_reason provider_reason_field;
    user_data user_data_field;
};

class OSS_PUBLIC CPR_PPDU  : public OssChoice   /* CHOICE */
{
public:
    enum Id {
	unselected,
	x400_mode_parameters_chosen = 2,
	normal_mode_parameters_chosen = 1
    };
    typedef __shared18 x400_mode_parameters;
    typedef __seq5 normal_mode_parameters;

    CPR_PPDU();
    CPR_PPDU(const CPR_PPDU &);
    ~CPR_PPDU();

    CPR_PPDU & operator = (const CPR_PPDU &);
    int operator == (const CPR_PPDU &) const;
    int operator != (const CPR_PPDU &) const;

    x400_mode_parameters *get_x400_mode_parameters();
    const x400_mode_parameters *get_x400_mode_parameters() const;
    void set_x400_mode_parameters(const x400_mode_parameters &);

    normal_mode_parameters *get_normal_mode_parameters();
    const normal_mode_parameters *get_normal_mode_parameters() const;
    void set_normal_mode_parameters(const normal_mode_parameters &);
private:
    union {
	x400_mode_parameters *x400_mode_parameters_field;
	normal_mode_parameters *normal_mode_parameters_field;
    };
    void cleanup();
};

class OSS_PUBLIC __shared19   /* SET */
{
public:
    void * operator new(size_t size);
    void operator delete(void *ptr);

    typedef OSS_INT32 abortReason;
    typedef OssBitString reflectedParameter;
    typedef OssOpen userdataAB;

    __shared19();
    __shared19(const __shared19 &);
    __shared19(abortReason, const reflectedParameter &, const userdataAB &);

    __shared19 & operator = (const __shared19 &);
    int operator == (const __shared19 &) const;
    int operator != (const __shared19 &) const;

    abortReason *get_abortReason();
    const abortReason *get_abortReason() const;
    void set_abortReason(abortReason);
    int abortReason_is_present() const;
    void omit_abortReason();

    reflectedParameter *get_reflectedParameter();
    const reflectedParameter *get_reflectedParameter() const;
    void set_reflectedParameter(const reflectedParameter &);
    int reflectedParameter_is_present() const;
    void omit_reflectedParameter();

    userdataAB *get_userdataAB();
    const userdataAB *get_userdataAB() const;
    void set_userdataAB(const userdataAB &);
    int userdataAB_is_present() const;
    void omit_userdataAB();
private:
    OSS_UINT32 bit_mask;
    abortReason abortReason_field;
    reflectedParameter reflectedParameter_field;
    userdataAB userdataAB_field;
};

class OSS_PUBLIC __seq8;

class OSS_PUBLIC __shared20 : public OssList  /* SEQUENCE OF */
{
public:
    typedef __seq8 component;

    __shared20();
    __shared20(const __shared20 &);
    ~__shared20();

    __shared20 & operator = (const __shared20 &);
    int operator == (const __shared20 &) const;
    int operator != (const __shared20 &) const;

    component *at(OssIndex);
    const component *at(OssIndex) const;

    OssIndex prepend(const component & );
    OssIndex prepend(__shared20 *);
    OssIndex insert_after(OssIndex, const component & );
    OssIndex insert_after(OssIndex, __shared20 *);

    int remove_front();
    int remove_after(OssIndex);

    __shared20 *extract_after(OssIndex, OssIndex);
};

typedef __shared20 Presentation_context_identifier_list;

class OSS_PUBLIC __shared21   /* SEQUENCE */
{
public:
    void * operator new(size_t size);
    void operator delete(void *ptr);

    typedef __shared20 presentation_context_identifier_list;
    typedef __shared14 user_data;

    __shared21();
    __shared21(const __shared21 &);
    __shared21(const presentation_context_identifier_list &, const user_data &);

    __shared21 & operator = (const __shared21 &);
    int operator == (const __shared21 &) const;
    int operator != (const __shared21 &) const;

    presentation_context_identifier_list *get_presentation_context_identifier_list();
    const presentation_context_identifier_list *get_presentation_context_identifier_list() const;
    void set_presentation_context_identifier_list(const presentation_context_identifier_list &);
    int presentation_context_identifier_list_is_present() const;
    void omit_presentation_context_identifier_list();

    user_data *get_user_data();
    const user_data *get_user_data() const;
    void set_user_data(const user_data &);
    int user_data_is_present() const;
    void omit_user_data();
private:
    OSS_UINT32 bit_mask;
    presentation_context_identifier_list presentation_context_identifier_list_field;
    user_data user_data_field;
};

class OSS_PUBLIC ARU_PPDU  : public OssChoice   /* CHOICE */
{
public:
    enum Id {
	unselected,
	x400_mode_parameters_chosen = 1,
	normal_mode_parameters_chosen = 2
    };
    typedef __shared19 x400_mode_parameters;
    typedef __shared21 normal_mode_parameters;

    ARU_PPDU();
    ARU_PPDU(const ARU_PPDU &);
    ~ARU_PPDU();

    ARU_PPDU & operator = (const ARU_PPDU &);
    int operator == (const ARU_PPDU &) const;
    int operator != (const ARU_PPDU &) const;

    x400_mode_parameters *get_x400_mode_parameters();
    const x400_mode_parameters *get_x400_mode_parameters() const;
    void set_x400_mode_parameters(const x400_mode_parameters &);

    normal_mode_parameters *get_normal_mode_parameters();
    const normal_mode_parameters *get_normal_mode_parameters() const;
    void set_normal_mode_parameters(const normal_mode_parameters &);
private:
    union {
	x400_mode_parameters *x400_mode_parameters_field;
	normal_mode_parameters *normal_mode_parameters_field;
    };
    void cleanup();
};

class OSS_PUBLIC ARP_PPDU   /* SEQUENCE */
{
public:
    void * operator new(size_t size);
    void operator delete(void *ptr);

    typedef OSS_INT32 provider_reason;
    typedef OSS_INT32 event_identifier;

    ARP_PPDU();
    ARP_PPDU(const ARP_PPDU &);
    ARP_PPDU(provider_reason, event_identifier);

    ARP_PPDU & operator = (const ARP_PPDU &);
    int operator == (const ARP_PPDU &) const;
    int operator != (const ARP_PPDU &) const;

    provider_reason *get_provider_reason();
    const provider_reason *get_provider_reason() const;
    void set_provider_reason(provider_reason);
    int provider_reason_is_present() const;
    void omit_provider_reason();

    event_identifier *get_event_identifier();
    const event_identifier *get_event_identifier() const;
    void set_event_identifier(event_identifier);
    int event_identifier_is_present() const;
    void omit_event_identifier();
private:
    OSS_UINT32 bit_mask;
    provider_reason provider_reason_field;
    event_identifier event_identifier_field;
};

class OSS_PUBLIC Abort_type  : public OssChoice   /* CHOICE */
{
public:
    enum Id {
	unselected,
	aru_ppdu_chosen = 2,
	arp_ppdu_chosen = 1
    };
    typedef ARU_PPDU aru_ppdu;
    typedef ARP_PPDU arp_ppdu;

    Abort_type();
    Abort_type(const Abort_type &);
    ~Abort_type();

    Abort_type & operator = (const Abort_type &);
    int operator == (const Abort_type &) const;
    int operator != (const Abort_type &) const;

    aru_ppdu *get_aru_ppdu();
    const aru_ppdu *get_aru_ppdu() const;
    void set_aru_ppdu(const aru_ppdu &);

    arp_ppdu *get_arp_ppdu();
    const arp_ppdu *get_arp_ppdu() const;
    void set_arp_ppdu(const arp_ppdu &);
private:
    union {
	aru_ppdu *aru_ppdu_field;
	arp_ppdu *arp_ppdu_field;
    };
    void cleanup();
};

typedef OSS_INT32 Reliable_Transfer_APDU_AbortReason;

typedef OSS_INT32 Abort_reason;

typedef OSS_INT32 Event_identifier;

typedef __shared12 Presentation_context_addition_list;

class OSS_PUBLIC __shared22 : public OssList  /* SEQUENCE OF */
{
public:
    typedef OSS_INT32 component;

    __shared22();
    __shared22(const __shared22 &);
    ~__shared22();

    __shared22 & operator = (const __shared22 &);
    int operator == (const __shared22 &) const;
    int operator != (const __shared22 &) const;

    component *at(OssIndex);
    const component *at(OssIndex) const;

    OssIndex prepend(component );
    OssIndex prepend(__shared22 *);
    OssIndex insert_after(OssIndex, component );
    OssIndex insert_after(OssIndex, __shared22 *);

    int remove_front();
    int remove_after(OssIndex);

    __shared22 *extract_after(OssIndex, OssIndex);
};

typedef __shared22 Presentation_context_deletion_list;

class OSS_PUBLIC AC_PPDU   /* SEQUENCE */
{
public:
    void * operator new(size_t size);
    void operator delete(void *ptr);

    typedef __shared12 presentation_context_addition_list;
    typedef __shared22 presentation_context_deletion_list;
    typedef __shared14 user_data;

    AC_PPDU();
    AC_PPDU(const AC_PPDU &);
    AC_PPDU(const presentation_context_addition_list &, const presentation_context_deletion_list &, 
	const user_data &);

    AC_PPDU & operator = (const AC_PPDU &);
    int operator == (const AC_PPDU &) const;
    int operator != (const AC_PPDU &) const;

    presentation_context_addition_list *get_presentation_context_addition_list();
    const presentation_context_addition_list *get_presentation_context_addition_list() const;
    void set_presentation_context_addition_list(const presentation_context_addition_list &);
    int presentation_context_addition_list_is_present() const;
    void omit_presentation_context_addition_list();

    presentation_context_deletion_list *get_presentation_context_deletion_list();
    const presentation_context_deletion_list *get_presentation_context_deletion_list() const;
    void set_presentation_context_deletion_list(const presentation_context_deletion_list &);
    int presentation_context_deletion_list_is_present() const;
    void omit_presentation_context_deletion_list();

    user_data *get_user_data();
    const user_data *get_user_data() const;
    void set_user_data(const user_data &);
    int user_data_is_present() const;
    void omit_user_data();
private:
    OSS_UINT32 bit_mask;
    presentation_context_addition_list presentation_context_addition_list_field;
    presentation_context_deletion_list presentation_context_deletion_list_field;
    user_data user_data_field;
};

typedef __shared16 Presentation_context_addition_result_list;

typedef __shared22 Presentation_context_deletion_result_list;

class OSS_PUBLIC ACA_PPDU   /* SEQUENCE */
{
public:
    void * operator new(size_t size);
    void operator delete(void *ptr);

    typedef __shared16 presentation_context_addition_result_list;
    typedef __shared22 presentation_context_deletion_result_list;
    typedef __shared14 user_data;

    ACA_PPDU();
    ACA_PPDU(const ACA_PPDU &);
    ACA_PPDU(const presentation_context_addition_result_list &, const presentation_context_deletion_result_list &, 
	const user_data &);

    ACA_PPDU & operator = (const ACA_PPDU &);
    int operator == (const ACA_PPDU &) const;
    int operator != (const ACA_PPDU &) const;

    presentation_context_addition_result_list *get_presentation_context_addition_result_list();
    const presentation_context_addition_result_list *get_presentation_context_addition_result_list() const;
    void set_presentation_context_addition_result_list(const presentation_context_addition_result_list &);
    int presentation_context_addition_result_list_is_present() const;
    void omit_presentation_context_addition_result_list();

    presentation_context_deletion_result_list *get_presentation_context_deletion_result_list();
    const presentation_context_deletion_result_list *get_presentation_context_deletion_result_list() const;
    void set_presentation_context_deletion_result_list(const presentation_context_deletion_result_list &);
    int presentation_context_deletion_result_list_is_present() const;
    void omit_presentation_context_deletion_result_list();

    user_data *get_user_data();
    const user_data *get_user_data() const;
    void set_user_data(const user_data &);
    int user_data_is_present() const;
    void omit_user_data();
private:
    OSS_UINT32 bit_mask;
    presentation_context_addition_result_list presentation_context_addition_result_list_field;
    presentation_context_deletion_result_list presentation_context_deletion_result_list_field;
    user_data user_data_field;
};

class OSS_PUBLIC Typed_data_type  : public OssChoice   /* CHOICE */
{
public:
    enum Id {
	unselected,
	acPPDU_chosen = 2,
	acaPPDU_chosen = 3,
	ttdPPDU_chosen = 1
    };
    typedef AC_PPDU acPPDU;
    typedef ACA_PPDU acaPPDU;
    typedef __shared14 ttdPPDU;

    Typed_data_type();
    Typed_data_type(const Typed_data_type &);
    ~Typed_data_type();

    Typed_data_type & operator = (const Typed_data_type &);
    int operator == (const Typed_data_type &) const;
    int operator != (const Typed_data_type &) const;

    acPPDU *get_acPPDU();
    const acPPDU *get_acPPDU() const;
    void set_acPPDU(const acPPDU &);

    acaPPDU *get_acaPPDU();
    const acaPPDU *get_acaPPDU() const;
    void set_acaPPDU(const acaPPDU &);

    ttdPPDU *get_ttdPPDU();
    const ttdPPDU *get_ttdPPDU() const;
    void set_ttdPPDU(const ttdPPDU &);
private:
    union {
	acPPDU *acPPDU_field;
	acaPPDU *acaPPDU_field;
	ttdPPDU *ttdPPDU_field;
    };
    void cleanup();
};

typedef __shared21 RS_PPDU;

typedef __shared21 RSA_PPDU;

class OSS_PUBLIC __seq7   /* SEQUENCE */
{
public:
    void * operator new(size_t size);
    void operator delete(void *ptr);

    typedef OSS_INT32 presentation_context_identifier;
    typedef OssEncOID abstract_syntax_name;
    typedef __shared8 transfer_syntax_name_list;

    __seq7();
    __seq7(const __seq7 &);
    __seq7(presentation_context_identifier, const abstract_syntax_name &, const transfer_syntax_name_list &);

    __seq7 & operator = (const __seq7 &);
    int operator == (const __seq7 &) const;
    int operator != (const __seq7 &) const;

    presentation_context_identifier & get_presentation_context_identifier();
    presentation_context_identifier get_presentation_context_identifier() const;
    void set_presentation_context_identifier(presentation_context_identifier);

    abstract_syntax_name & get_abstract_syntax_name();
    const abstract_syntax_name & get_abstract_syntax_name() const;
    void set_abstract_syntax_name(const abstract_syntax_name &);

    transfer_syntax_name_list & get_transfer_syntax_name_list();
    const transfer_syntax_name_list & get_transfer_syntax_name_list() const;
    void set_transfer_syntax_name_list(const transfer_syntax_name_list &);
private:
    presentation_context_identifier presentation_context_identifier_field;
    abstract_syntax_name abstract_syntax_name_field;
    transfer_syntax_name_list transfer_syntax_name_list_field;
};

class OSS_PUBLIC __seq8   /* SEQUENCE */
{
public:
    void * operator new(size_t size);
    void operator delete(void *ptr);

    typedef OSS_INT32 presentation_context_identifier;
    typedef OssEncOID transfer_syntax_name;

    __seq8();
    __seq8(const __seq8 &);
    __seq8(presentation_context_identifier, const transfer_syntax_name &);

    __seq8 & operator = (const __seq8 &);
    int operator == (const __seq8 &) const;
    int operator != (const __seq8 &) const;

    presentation_context_identifier & get_presentation_context_identifier();
    presentation_context_identifier get_presentation_context_identifier() const;
    void set_presentation_context_identifier(presentation_context_identifier);

    transfer_syntax_name & get_transfer_syntax_name();
    const transfer_syntax_name & get_transfer_syntax_name() const;
    void set_transfer_syntax_name(const transfer_syntax_name &);
private:
    presentation_context_identifier presentation_context_identifier_field;
    transfer_syntax_name transfer_syntax_name_field;
};

class OSS_PUBLIC __seq9   /* SEQUENCE */
{
public:
    void * operator new(size_t size);
    void operator delete(void *ptr);

    typedef OSS_INT32 result;
    typedef OssEncOID transfer_syntax_name;
    typedef OSS_INT32 provider_reason;

    __seq9();
    __seq9(const __seq9 &);
    __seq9(result, const transfer_syntax_name &, provider_reason);
    __seq9(result);

    __seq9 & operator = (const __seq9 &);
    int operator == (const __seq9 &) const;
    int operator != (const __seq9 &) const;

    result & get_result();
    result get_result() const;
    void set_result(result);

    transfer_syntax_name *get_transfer_syntax_name();
    const transfer_syntax_name *get_transfer_syntax_name() const;
    void set_transfer_syntax_name(const transfer_syntax_name &);
    int transfer_syntax_name_is_present() const;
    void omit_transfer_syntax_name();

    provider_reason *get_provider_reason();
    const provider_reason *get_provider_reason() const;
    void set_provider_reason(provider_reason);
    int provider_reason_is_present() const;
    void omit_provider_reason();
private:
    OSS_UINT32 bit_mask;
    result result_field;
    transfer_syntax_name transfer_syntax_name_field;
    provider_reason provider_reason_field;
};

class OSS_PUBLIC PDV_list   /* SEQUENCE */
{
public:
    void * operator new(size_t size);
    void operator delete(void *ptr);

    typedef OssEncOID transfer_syntax_name;
    typedef OSS_INT32 presentation_context_identifier;
    typedef __shared2 presentation_data_values;

    PDV_list();
    PDV_list(const PDV_list &);
    PDV_list(const transfer_syntax_name &, presentation_context_identifier, const presentation_data_values &);
    PDV_list(presentation_context_identifier, const presentation_data_values &);

    PDV_list & operator = (const PDV_list &);
    int operator == (const PDV_list &) const;
    int operator != (const PDV_list &) const;

    transfer_syntax_name *get_transfer_syntax_name();
    const transfer_syntax_name *get_transfer_syntax_name() const;
    void set_transfer_syntax_name(const transfer_syntax_name &);
    int transfer_syntax_name_is_present() const;
    void omit_transfer_syntax_name();

    presentation_context_identifier & get_presentation_context_identifier();
    presentation_context_identifier get_presentation_context_identifier() const;
    void set_presentation_context_identifier(presentation_context_identifier);

    presentation_data_values & get_presentation_data_values();
    const presentation_data_values & get_presentation_data_values() const;
    void set_presentation_data_values(const presentation_data_values &);
private:
    OSS_UINT32 bit_mask;
    transfer_syntax_name transfer_syntax_name_field;
    presentation_context_identifier presentation_context_identifier_field;
    presentation_data_values presentation_data_values_field;
};

typedef OSS_INT32 Reliable_Transfer_APDU_RTTPapdu;

typedef OssString Reliable_Transfer_APDU_RTTRapdu;

typedef __shared15 RTORQapdu;

typedef __shared17 RTOACapdu;

typedef __shared18 RTORJapdu;

typedef __shared19 Reliable_Transfer_APDU_RTABapdu;

class OSS_PUBLIC __shared23  : public OssChoice   /* CHOICE */
{
public:
    enum Id {
	unselected,
	rtorq_apdu_chosen = 3,
	rtoac_apdu_chosen = 4,
	rtorj_apdu_chosen = 5,
	rttp_apdu_chosen = 1,
	rttr_apdu_chosen = 2,
	rtab_apdu_chosen = 6
    };
    typedef __shared15 rtorq_apdu;
    typedef __shared17 rtoac_apdu;
    typedef __shared18 rtorj_apdu;
    typedef OSS_INT32 rttp_apdu;
    typedef OssString rttr_apdu;
    typedef __shared19 rtab_apdu;

    __shared23();
    __shared23(const __shared23 &);
    ~__shared23();

    __shared23 & operator = (const __shared23 &);
    int operator == (const __shared23 &) const;
    int operator != (const __shared23 &) const;

    rtorq_apdu *get_rtorq_apdu();
    const rtorq_apdu *get_rtorq_apdu() const;
    void set_rtorq_apdu(const rtorq_apdu &);

    rtoac_apdu *get_rtoac_apdu();
    const rtoac_apdu *get_rtoac_apdu() const;
    void set_rtoac_apdu(const rtoac_apdu &);

    rtorj_apdu *get_rtorj_apdu();
    const rtorj_apdu *get_rtorj_apdu() const;
    void set_rtorj_apdu(const rtorj_apdu &);

    rttp_apdu *get_rttp_apdu();
    const rttp_apdu *get_rttp_apdu() const;
    void set_rttp_apdu(rttp_apdu);

    rttr_apdu *get_rttr_apdu();
    const rttr_apdu *get_rttr_apdu() const;
    void set_rttr_apdu(const rttr_apdu &);

    rtab_apdu *get_rtab_apdu();
    const rtab_apdu *get_rtab_apdu() const;
    void set_rtab_apdu(const rtab_apdu &);
private:
    union {
	rtorq_apdu *rtorq_apdu_field;
	rtoac_apdu *rtoac_apdu_field;
	rtorj_apdu *rtorj_apdu_field;
	rttp_apdu rttp_apdu_field;
	OSSC::COssString rttr_apdu_field;
	rtab_apdu *rtab_apdu_field;
    };
    void cleanup();
};

typedef __shared23 Reliable_Transfer_APDU_RTSE_apdus;

typedef OssUTCTime CommonReference;

typedef OssString AdditionalReferenceInformation;

typedef OSS_INT32 Remote_Operations_Abstract_Syntaxes_RTTPapdu;

typedef OssString Remote_Operations_Abstract_Syntaxes_RTTRapdu;

typedef __shared23 Remote_Operations_Abstract_Syntaxes_RTSE_apdus;

typedef OSS_INT32 Remote_Operations_Abstract_Syntaxes_AbortReason;

typedef __shared19 Remote_Operations_Abstract_Syntaxes_RTABapdu;

class OSS_PUBLIC __shared24  : public OssChoice   /* CHOICE */
{
public:
    enum Id {
	unselected,
	present_chosen = 1,
	absent_chosen = 2
    };
    typedef OSS_INT32 present;
    typedef Nulltype absent;

    __shared24();
    __shared24(const __shared24 &);

    __shared24 & operator = (const __shared24 &);
    int operator == (const __shared24 &) const;
    int operator != (const __shared24 &) const;

    present *get_present();
    const present *get_present() const;
    void set_present(present);

    absent *get_absent();
    const absent *get_absent() const;
    void set_absent(absent);
private:
    union {
	present present_field;
	absent absent_field;
    };
};

typedef __shared24 InvokeId;

typedef __shared24 ROSEInvokeIds;

typedef OSS_INT32 GeneralProblem;

typedef OSS_INT32 InvokeProblem;

typedef OSS_INT32 ReturnResultProblem;

typedef OSS_INT32 ReturnErrorProblem;

class OSS_PUBLIC __choice3  : public OssChoice   /* CHOICE */
{
public:
    enum Id {
	unselected,
	general_chosen = 1,
	invoke_chosen = 2,
	returnResult_chosen = 3,
	returnError_chosen = 4
    };
    typedef OSS_INT32 general;
    typedef OSS_INT32 invoke;
    typedef OSS_INT32 returnResult;
    typedef OSS_INT32 returnError;

    __choice3();
    __choice3(const __choice3 &);

    __choice3 & operator = (const __choice3 &);
    int operator == (const __choice3 &) const;
    int operator != (const __choice3 &) const;

    general *get_general();
    const general *get_general() const;
    void set_general(general);

    invoke *get_invoke();
    const invoke *get_invoke() const;
    void set_invoke(invoke);

    returnResult *get_returnResult();
    const returnResult *get_returnResult() const;
    void set_returnResult(returnResult);

    returnError *get_returnError();
    const returnError *get_returnError() const;
    void set_returnError(returnError);
private:
    union {
	general general_field;
	invoke invoke_field;
	returnResult returnResult_field;
	returnError returnError_field;
    };
};

class OSS_PUBLIC Reject   /* SEQUENCE */
{
public:
    void * operator new(size_t size);
    void operator delete(void *ptr);

    typedef __shared24 invokeId;
    typedef __choice3 problem;

    Reject();
    Reject(const Reject &);
    Reject(const invokeId &, const problem &);

    Reject & operator = (const Reject &);
    int operator == (const Reject &) const;
    int operator != (const Reject &) const;

    invokeId & get_invokeId();
    const invokeId & get_invokeId() const;
    void set_invokeId(const invokeId &);

    problem & get_problem();
    const problem & get_problem() const;
    void set_problem(const problem &);
private:
    invokeId invokeId_field;
    problem problem_field;
};

typedef __shared24 NoInvokeId;

typedef OSS_UINT32 Priority;

class OSS_PUBLIC Code  : public OssChoice   /* CHOICE */
{
public:
    enum Id {
	unselected,
	local_chosen = 1,
	global_chosen = 2
    };
    typedef OSS_INT32 local;
    typedef OssEncOID global;

    Code();
    Code(const Code &);
    ~Code();

    Code & operator = (const Code &);
    int operator == (const Code &) const;
    int operator != (const Code &) const;

    local *get_local();
    const local *get_local() const;
    void set_local(local);

    global *get_global();
    const global *get_global() const;
    void set_global(const global &);
private:
    union {
	local local_field;
	OSSC::COssEncOID global_field;
    };
    void cleanup();
};

class OSS_PUBLIC UnboundedDirectoryString  : public OssChoice   /* CHOICE */
{
public:
    enum Id {
	unselected,
	teletexString_chosen = 3,
	printableString_chosen = 2,
	bmpString_chosen = 5,
	universalString_chosen = 4,
	uTF8String_chosen = 1
    };
    typedef OssString teletexString;
    typedef OssString printableString;
    typedef OssBMPString bmpString;
    typedef OssUniversalString universalString;
    typedef OssString uTF8String;

    UnboundedDirectoryString();
    UnboundedDirectoryString(const UnboundedDirectoryString &);
    ~UnboundedDirectoryString();

    UnboundedDirectoryString & operator = (const UnboundedDirectoryString &);
    int operator == (const UnboundedDirectoryString &) const;
    int operator != (const UnboundedDirectoryString &) const;

    teletexString *get_teletexString();
    const teletexString *get_teletexString() const;
    void set_teletexString(const teletexString &);

    printableString *get_printableString();
    const printableString *get_printableString() const;
    void set_printableString(const printableString &);

    bmpString *get_bmpString();
    const bmpString *get_bmpString() const;
    void set_bmpString(const bmpString &);

    universalString *get_universalString();
    const universalString *get_universalString() const;
    void set_universalString(const universalString &);

    uTF8String *get_uTF8String();
    const uTF8String *get_uTF8String() const;
    void set_uTF8String(const uTF8String &);
private:
    union {
	OSSC::COssString teletexString_field;
	OSSC::COssString printableString_field;
	OSSC::COssBMPString bmpString_field;
	OSSC::COssUniversalString universalString_field;
	OSSC::COssString uTF8String_field;
    };
    void cleanup();
};

typedef OssString UUID;

class OSS_PUBLIC UUIDPair   /* SEQUENCE */
{
public:
    void * operator new(size_t size);
    void operator delete(void *ptr);

    typedef OssString issuerUUID;
    typedef OssString subjectUUID;

    UUIDPair();
    UUIDPair(const UUIDPair &);
    UUIDPair(const issuerUUID &, const subjectUUID &);

    UUIDPair & operator = (const UUIDPair &);
    int operator == (const UUIDPair &) const;
    int operator != (const UUIDPair &) const;

    issuerUUID & get_issuerUUID();
    const issuerUUID & get_issuerUUID() const;
    void set_issuerUUID(const issuerUUID &);

    subjectUUID & get_subjectUUID();
    const subjectUUID & get_subjectUUID() const;
    void set_subjectUUID(const subjectUUID &);
private:
    issuerUUID issuerUUID_field;
    subjectUUID subjectUUID_field;
};

class OSS_PUBLIC CriteriaItem  : public OssChoice   /* CHOICE */
{
public:
    enum Id {
	unselected,
	equality_chosen = 1,
	substrings_chosen = 2,
	greaterOrEqual_chosen = 3,
	lessOrEqual_chosen = 4,
	approximateMatch_chosen = 5
    };
    typedef OssEncOID equality;
    typedef OssEncOID substrings;
    typedef OssEncOID greaterOrEqual;
    typedef OssEncOID lessOrEqual;
    typedef OssEncOID approximateMatch;

    CriteriaItem();
    CriteriaItem(const CriteriaItem &);
    ~CriteriaItem();

    CriteriaItem & operator = (const CriteriaItem &);
    int operator == (const CriteriaItem &) const;
    int operator != (const CriteriaItem &) const;

    equality *get_equality();
    const equality *get_equality() const;
    void set_equality(const equality &);

    substrings *get_substrings();
    const substrings *get_substrings() const;
    void set_substrings(const substrings &);

    greaterOrEqual *get_greaterOrEqual();
    const greaterOrEqual *get_greaterOrEqual() const;
    void set_greaterOrEqual(const greaterOrEqual &);

    lessOrEqual *get_lessOrEqual();
    const lessOrEqual *get_lessOrEqual() const;
    void set_lessOrEqual(const lessOrEqual &);

    approximateMatch *get_approximateMatch();
    const approximateMatch *get_approximateMatch() const;
    void set_approximateMatch(const approximateMatch &);
private:
    union {
	OSSC::COssEncOID equality_field;
	OSSC::COssEncOID substrings_field;
	OSSC::COssEncOID greaterOrEqual_field;
	OSSC::COssEncOID lessOrEqual_field;
	OSSC::COssEncOID approximateMatch_field;
    };
    void cleanup();
};

class OSS_PUBLIC Criteria;

class OSS_PUBLIC __shared25 : public OssList  /* SET OF */
{
public:
    typedef Criteria component;

    __shared25();
    __shared25(const __shared25 &);
    ~__shared25();

    __shared25 & operator = (const __shared25 &);
    int operator == (const __shared25 &) const;
    int operator != (const __shared25 &) const;

    component *at(OssIndex);
    const component *at(OssIndex) const;

    OssIndex prepend(const component & );
    OssIndex prepend(__shared25 *);
    OssIndex insert_after(OssIndex, const component & );
    OssIndex insert_after(OssIndex, __shared25 *);

    int remove_front();
    int remove_after(OssIndex);

    __shared25 *extract_after(OssIndex, OssIndex);
};

class OSS_PUBLIC Criteria  : public OssChoice   /* CHOICE */
{
public:
    enum Id {
	unselected,
	type_chosen = 1,
	Criteria_and_chosen = 2,
	Criteria_or_chosen = 3,
	Criteria_not_chosen = 4
    };
    typedef CriteriaItem type;
    typedef __shared25 Criteria_and;
    typedef __shared25 Criteria_or;
    typedef Criteria Criteria_not;

    Criteria();
    Criteria(const Criteria &);
    ~Criteria();

    Criteria & operator = (const Criteria &);
    int operator == (const Criteria &) const;
    int operator != (const Criteria &) const;

    type *get_type();
    const type *get_type() const;
    void set_type(const type &);

    Criteria_and *get_Criteria_and();
    const Criteria_and *get_Criteria_and() const;
    void set_Criteria_and(const Criteria_and &);

    Criteria_or *get_Criteria_or();
    const Criteria_or *get_Criteria_or() const;
    void set_Criteria_or(const Criteria_or &);

    Criteria_not *get_Criteria_not();
    const Criteria_not *get_Criteria_not() const;
    void set_Criteria_not(const Criteria_not &);
private:
    union {
	type *type_field;
	void *Criteria_and_field;
	void *Criteria_or_field;
	Criteria_not *Criteria_not_field;
    };
    void cleanup();
};

class OSS_PUBLIC Guide   /* SET */
{
public:
    void * operator new(size_t size);
    void operator delete(void *ptr);

    typedef OssEncOID objectClass;
    typedef Criteria criteria;

    Guide();
    Guide(const Guide &);
    Guide(const objectClass &, const criteria &);
    Guide(const criteria &);

    Guide & operator = (const Guide &);
    int operator == (const Guide &) const;
    int operator != (const Guide &) const;

    objectClass *get_objectClass();
    const objectClass *get_objectClass() const;
    void set_objectClass(const objectClass &);
    int objectClass_is_present() const;
    void omit_objectClass();

    criteria & get_criteria();
    const criteria & get_criteria() const;
    void set_criteria(const criteria &);
private:
    OSS_UINT32 bit_mask;
    objectClass objectClass_field;
    criteria criteria_field;
};

typedef OssEncOID AttributeType;

class OSS_PUBLIC EnhancedGuide   /* SEQUENCE */
{
public:
    void * operator new(size_t size);
    void operator delete(void *ptr);

    typedef OssEncOID objectClass;
    typedef Criteria criteria;
    typedef OSS_INT32 subset;

    static const subset default_subset;

    static subset get_default_subset();

    EnhancedGuide();
    EnhancedGuide(const EnhancedGuide &);
    EnhancedGuide(const objectClass &, const criteria &, subset);
    EnhancedGuide(const objectClass &, const criteria &);

    EnhancedGuide & operator = (const EnhancedGuide &);
    int operator == (const EnhancedGuide &) const;
    int operator != (const EnhancedGuide &) const;

    objectClass & get_objectClass();
    const objectClass & get_objectClass() const;
    void set_objectClass(const objectClass &);

    criteria & get_criteria();
    const criteria & get_criteria() const;
    void set_criteria(const criteria &);

    subset *get_subset();
    const subset *get_subset() const;
    void set_subset(subset);
    int subset_is_default() const;
    void set_default_subset();
private:
    OSS_UINT32 bit_mask;
    objectClass objectClass_field;
    criteria criteria_field;
    subset subset_field;
};

class OSS_PUBLIC __shared26 : public OssList  /* SEQUENCE OF */
{
public:
    typedef UnboundedDirectoryString component;

    __shared26();
    __shared26(const __shared26 &);
    ~__shared26();

    __shared26 & operator = (const __shared26 &);
    int operator == (const __shared26 &) const;
    int operator != (const __shared26 &) const;

    component *at(OssIndex);
    const component *at(OssIndex) const;

    OssIndex prepend(const component & );
    OssIndex prepend(__shared26 *);
    OssIndex insert_after(OssIndex, const component & );
    OssIndex insert_after(OssIndex, __shared26 *);

    int remove_front();
    int remove_after(OssIndex);

    __shared26 *extract_after(OssIndex, OssIndex);
};

typedef __shared26 PostalAddress;

class OSS_PUBLIC TelexNumber   /* SEQUENCE */
{
public:
    void * operator new(size_t size);
    void operator delete(void *ptr);

    typedef OssString telexNumber;
    typedef OssString countryCode;
    typedef OssString answerback;

    TelexNumber();
    TelexNumber(const TelexNumber &);
    TelexNumber(const telexNumber &, const countryCode &, const answerback &);

    TelexNumber & operator = (const TelexNumber &);
    int operator == (const TelexNumber &) const;
    int operator != (const TelexNumber &) const;

    telexNumber & get_telexNumber();
    const telexNumber & get_telexNumber() const;
    void set_telexNumber(const telexNumber &);

    countryCode & get_countryCode();
    const countryCode & get_countryCode() const;
    void set_countryCode(const countryCode &);

    answerback & get_answerback();
    const answerback & get_answerback() const;
    void set_answerback(const answerback &);
private:
    telexNumber telexNumber_field;
    countryCode countryCode_field;
    answerback answerback_field;
};

typedef OssEncOID CommunicationsService;

typedef OssEncOID CommunicationsNetwork;

typedef __shared22 PreferredDeliveryMethod;

class OSS_PUBLIC __shared27 : public OssList  /* SET OF */
{
public:
    typedef OssString component;

    __shared27();
    __shared27(const __shared27 &);
    ~__shared27();

    __shared27 & operator = (const __shared27 &);
    int operator == (const __shared27 &) const;
    int operator != (const __shared27 &) const;

    component *at(OssIndex);
    const component *at(OssIndex) const;

    OssIndex prepend(const component & );
    OssIndex prepend(__shared27 *);
    OssIndex insert_after(OssIndex, const component & );
    OssIndex insert_after(OssIndex, __shared27 *);

    int remove_front();
    int remove_after(OssIndex);

    __shared27 *extract_after(OssIndex, OssIndex);
};

class OSS_PUBLIC PresentationAddress   /* SEQUENCE */
{
public:
    void * operator new(size_t size);
    void operator delete(void *ptr);

    typedef OssString pSelector;
    typedef OssString sSelector;
    typedef OssString tSelector;
    typedef __shared27 nAddresses;

    PresentationAddress();
    PresentationAddress(const PresentationAddress &);
    PresentationAddress(const pSelector &, const sSelector &, const tSelector &, 
	const nAddresses &);
    PresentationAddress(const nAddresses &);

    PresentationAddress & operator = (const PresentationAddress &);
    int operator == (const PresentationAddress &) const;
    int operator != (const PresentationAddress &) const;

    pSelector *get_pSelector();
    const pSelector *get_pSelector() const;
    void set_pSelector(const pSelector &);
    int pSelector_is_present() const;
    void omit_pSelector();

    sSelector *get_sSelector();
    const sSelector *get_sSelector() const;
    void set_sSelector(const sSelector &);
    int sSelector_is_present() const;
    void omit_sSelector();

    tSelector *get_tSelector();
    const tSelector *get_tSelector() const;
    void set_tSelector(const tSelector &);
    int tSelector_is_present() const;
    void omit_tSelector();

    nAddresses & get_nAddresses();
    const nAddresses & get_nAddresses() const;
    void set_nAddresses(const nAddresses &);
private:
    OSS_UINT32 bit_mask;
    pSelector pSelector_field;
    sSelector sSelector_field;
    tSelector tSelector_field;
    nAddresses nAddresses_field;
};

class OSS_PUBLIC ProtocolInformation   /* SEQUENCE */
{
public:
    void * operator new(size_t size);
    void operator delete(void *ptr);

    typedef OssString nAddress;
    typedef __shared8 profiles;

    ProtocolInformation();
    ProtocolInformation(const ProtocolInformation &);
    ProtocolInformation(const nAddress &, const profiles &);

    ProtocolInformation & operator = (const ProtocolInformation &);
    int operator == (const ProtocolInformation &) const;
    int operator != (const ProtocolInformation &) const;

    nAddress & get_nAddress();
    const nAddress & get_nAddress() const;
    void set_nAddress(const nAddress &);

    profiles & get_profiles();
    const profiles & get_profiles() const;
    void set_profiles(const profiles &);
private:
    nAddress nAddress_field;
    profiles profiles_field;
};

typedef __shared6 DistinguishedName;

class OSS_PUBLIC NameAndOptionalUID   /* SEQUENCE */
{
public:
    void * operator new(size_t size);
    void operator delete(void *ptr);

    typedef __shared6 dn;
    typedef OssBitString uid;

    NameAndOptionalUID();
    NameAndOptionalUID(const NameAndOptionalUID &);
    NameAndOptionalUID(const dn &, const uid &);
    NameAndOptionalUID(const dn &);

    NameAndOptionalUID & operator = (const NameAndOptionalUID &);
    int operator == (const NameAndOptionalUID &) const;
    int operator != (const NameAndOptionalUID &) const;

    dn & get_dn();
    const dn & get_dn() const;
    void set_dn(const dn &);

    uid *get_uid();
    const uid *get_uid() const;
    void set_uid(const uid &);
    int uid_is_present() const;
    void omit_uid();
private:
    OSS_UINT32 bit_mask;
    dn dn_field;
    uid uid_field;
};

class OSS_PUBLIC __shared3 : public OssList  /* SET OF */
{
public:
    typedef SupportedContexts_Type component;

    __shared3();
    __shared3(const __shared3 &);
    ~__shared3();

    __shared3 & operator = (const __shared3 &);
    int operator == (const __shared3 &) const;
    int operator != (const __shared3 &) const;

    component *at(OssIndex);
    const component *at(OssIndex) const;

    OssIndex prepend(const component & );
    OssIndex prepend(__shared3 *);
    OssIndex insert_after(OssIndex, const component & );
    OssIndex insert_after(OssIndex, __shared3 *);

    int remove_front();
    int remove_after(OssIndex);

    __shared3 *extract_after(OssIndex, OssIndex);
};

class OSS_PUBLIC ContextAssertion   /* SEQUENCE */
{
public:
    void * operator new(size_t size);
    void operator delete(void *ptr);

    typedef OssEncOID contextType;
    typedef __shared3 contextValues;

    ContextAssertion();
    ContextAssertion(const ContextAssertion &);
    ContextAssertion(const contextType &, const contextValues &);

    ContextAssertion & operator = (const ContextAssertion &);
    int operator == (const ContextAssertion &) const;
    int operator != (const ContextAssertion &) const;

    contextType & get_contextType();
    const contextType & get_contextType() const;
    void set_contextType(const contextType &);

    contextValues & get_contextValues();
    const contextValues & get_contextValues() const;
    void set_contextValues(const contextValues &);
private:
    contextType contextType_field;
    contextValues contextValues_field;
};

class OSS_PUBLIC __shared28 : public OssList  /* SET OF */
{
public:
    typedef ContextAssertion component;

    __shared28();
    __shared28(const __shared28 &);
    ~__shared28();

    __shared28 & operator = (const __shared28 &);
    int operator == (const __shared28 &) const;
    int operator != (const __shared28 &) const;

    component *at(OssIndex);
    const component *at(OssIndex) const;

    OssIndex prepend(const component & );
    OssIndex prepend(__shared28 *);
    OssIndex insert_after(OssIndex, const component & );
    OssIndex insert_after(OssIndex, __shared28 *);

    int remove_front();
    int remove_after(OssIndex);

    __shared28 *extract_after(OssIndex, OssIndex);
};

class OSS_PUBLIC __choice4  : public OssChoice   /* CHOICE */
{
public:
    enum Id {
	unselected,
	allContexts_chosen = 1,
	selectedContexts_chosen = 2
    };
    typedef Nulltype allContexts;
    typedef __shared28 selectedContexts;

    __choice4();
    __choice4(const __choice4 &);
    ~__choice4();

    __choice4 & operator = (const __choice4 &);
    int operator == (const __choice4 &) const;
    int operator != (const __choice4 &) const;

    allContexts *get_allContexts();
    const allContexts *get_allContexts() const;
    void set_allContexts(allContexts);

    selectedContexts *get_selectedContexts();
    const selectedContexts *get_selectedContexts() const;
    void set_selectedContexts(const selectedContexts &);
private:
    union {
	allContexts allContexts_field;
	void *selectedContexts_field;
    };
    void cleanup();
};

class OSS_PUBLIC AttributeValueAssertion   /* SEQUENCE */
{
public:
    void * operator new(size_t size);
    void operator delete(void *ptr);

    typedef OssEncOID type;
    typedef SupportedContexts_Type assertion;
    typedef __choice4 assertedContexts;

    AttributeValueAssertion();
    AttributeValueAssertion(const AttributeValueAssertion &);
    AttributeValueAssertion(const type &, const assertion &, const assertedContexts &);
    AttributeValueAssertion(const type &, const assertion &);

    AttributeValueAssertion & operator = (const AttributeValueAssertion &);
    int operator == (const AttributeValueAssertion &) const;
    int operator != (const AttributeValueAssertion &) const;

    type & get_type();
    const type & get_type() const;
    void set_type(const type &);

    assertion & get_assertion();
    const assertion & get_assertion() const;
    void set_assertion(const assertion &);

    assertedContexts *get_assertedContexts();
    const assertedContexts *get_assertedContexts() const;
    void set_assertedContexts(const assertedContexts &);
    int assertedContexts_is_present() const;
    void omit_assertedContexts();
private:
    OSS_UINT32 bit_mask;
    type type_field;
    assertion assertion_field;
    assertedContexts assertedContexts_field;
};

class OSS_PUBLIC __seqof2 : public OssList  /* SEQUENCE OF */
{
public:
    typedef AttributeValueAssertion component;

    __seqof2();
    __seqof2(const __seqof2 &);
    ~__seqof2();

    __seqof2 & operator = (const __seqof2 &);
    int operator == (const __seqof2 &) const;
    int operator != (const __seqof2 &) const;

    component *at(OssIndex);
    const component *at(OssIndex) const;

    OssIndex prepend(const component & );
    OssIndex prepend(__seqof2 *);
    OssIndex insert_after(OssIndex, const component & );
    OssIndex insert_after(OssIndex, __seqof2 *);

    int remove_front();
    int remove_after(OssIndex);

    __seqof2 *extract_after(OssIndex, OssIndex);
};

class OSS_PUBLIC MultipleMatchingLocalities   /* SEQUENCE */
{
public:
    void * operator new(size_t size);
    void operator delete(void *ptr);

    typedef OssEncOID matchingRuleUsed;
    typedef __seqof2 attributeList;

    MultipleMatchingLocalities();
    MultipleMatchingLocalities(const MultipleMatchingLocalities &);
    MultipleMatchingLocalities(const matchingRuleUsed &, const attributeList &);
    MultipleMatchingLocalities(const attributeList &);

    MultipleMatchingLocalities & operator = (const MultipleMatchingLocalities &);
    int operator == (const MultipleMatchingLocalities &) const;
    int operator != (const MultipleMatchingLocalities &) const;

    matchingRuleUsed *get_matchingRuleUsed();
    const matchingRuleUsed *get_matchingRuleUsed() const;
    void set_matchingRuleUsed(const matchingRuleUsed &);
    int matchingRuleUsed_is_present() const;
    void omit_matchingRuleUsed();

    attributeList & get_attributeList();
    const attributeList & get_attributeList() const;
    void set_attributeList(const attributeList &);
private:
    OSS_UINT32 bit_mask;
    matchingRuleUsed matchingRuleUsed_field;
    attributeList attributeList_field;
};

class OSS_PUBLIC SupportedAttributes_Type;

class OSS_PUBLIC __setof13 : public OssList  /* SET OF */
{
public:
    typedef SupportedAttributes_Type component;

    __setof13();
    __setof13(const __setof13 &);
    ~__setof13();

    __setof13 & operator = (const __setof13 &);
    int operator == (const __setof13 &) const;
    int operator != (const __setof13 &) const;

    component *at(OssIndex);
    const component *at(OssIndex) const;

    OssIndex prepend(const component & );
    OssIndex prepend(__setof13 *);
    OssIndex insert_after(OssIndex, const component & );
    OssIndex insert_after(OssIndex, __setof13 *);

    int remove_front();
    int remove_after(OssIndex);

    __setof13 *extract_after(OssIndex, OssIndex);
};

class OSS_PUBLIC __seq12;

class OSS_PUBLIC __setof14 : public OssList  /* SET OF */
{
public:
    typedef __seq12 component;

    __setof14();
    __setof14(const __setof14 &);
    ~__setof14();

    __setof14 & operator = (const __setof14 &);
    int operator == (const __setof14 &) const;
    int operator != (const __setof14 &) const;

    component *at(OssIndex);
    const component *at(OssIndex) const;

    OssIndex prepend(const component & );
    OssIndex prepend(__setof14 *);
    OssIndex insert_after(OssIndex, const component & );
    OssIndex insert_after(OssIndex, __setof14 *);

    int remove_front();
    int remove_after(OssIndex);

    __setof14 *extract_after(OssIndex, OssIndex);
};

class OSS_PUBLIC Attribute   /* SEQUENCE */
{
public:
    void * operator new(size_t size);
    void operator delete(void *ptr);

    typedef OssEncOID type;
    typedef __setof13 values;
    typedef __setof14 valuesWithContext;

    Attribute();
    Attribute(const Attribute &);
    Attribute(const type &, const values &, const valuesWithContext &);
    Attribute(const type &, const values &);

    Attribute & operator = (const Attribute &);
    int operator == (const Attribute &) const;
    int operator != (const Attribute &) const;

    type & get_type();
    const type & get_type() const;
    void set_type(const type &);

    values & get_values();
    const values & get_values() const;
    void set_values(const values &);

    valuesWithContext *get_valuesWithContext();
    const valuesWithContext *get_valuesWithContext() const;
    void set_valuesWithContext(const valuesWithContext &);
    int valuesWithContext_is_present() const;
    void omit_valuesWithContext();
private:
    OSS_UINT32 bit_mask;
    type type_field;
    values values_field;
    valuesWithContext valuesWithContext_field;
};

class OSS_PUBLIC __choice5  : public OssChoice   /* CHOICE */
{
public:
    enum Id {
	unselected,
	initial_chosen = 2,
	any_chosen = 3,
	final_chosen = 4,
	control_chosen = 1
    };
    typedef UnboundedDirectoryString initial;
    typedef UnboundedDirectoryString any;
    typedef UnboundedDirectoryString final;
    typedef Attribute control;

    __choice5();
    __choice5(const __choice5 &);
    ~__choice5();

    __choice5 & operator = (const __choice5 &);
    int operator == (const __choice5 &) const;
    int operator != (const __choice5 &) const;

    initial *get_initial();
    const initial *get_initial() const;
    void set_initial(const initial &);

    any *get_any();
    const any *get_any() const;
    void set_any(const any &);

    final *get_final();
    const final *get_final() const;
    void set_final(const final &);

    control *get_control();
    const control *get_control() const;
    void set_control(const control &);
private:
    union {
	initial *initial_field;
	any *any_field;
	final *final_field;
	control *control_field;
    };
    void cleanup();
};

class OSS_PUBLIC SubstringAssertion : public OssList  /* SEQUENCE OF */
{
public:
    typedef __choice5 component;

    SubstringAssertion();
    SubstringAssertion(const SubstringAssertion &);
    ~SubstringAssertion();

    SubstringAssertion & operator = (const SubstringAssertion &);
    int operator == (const SubstringAssertion &) const;
    int operator != (const SubstringAssertion &) const;

    component *at(OssIndex);
    const component *at(OssIndex) const;

    OssIndex prepend(const component & );
    OssIndex prepend(SubstringAssertion *);
    OssIndex insert_after(OssIndex, const component & );
    OssIndex insert_after(OssIndex, SubstringAssertion *);

    int remove_front();
    int remove_after(OssIndex);

    SubstringAssertion *extract_after(OssIndex, OssIndex);
};

typedef __shared26 CaseIgnoreList;

class OSS_PUBLIC __choice6  : public OssChoice   /* CHOICE */
{
public:
    enum Id {
	unselected,
	initial_chosen = 1,
	any_chosen = 2,
	final_chosen = 3
    };
    typedef OssString initial;
    typedef OssString any;
    typedef OssString final;

    __choice6();
    __choice6(const __choice6 &);
    ~__choice6();

    __choice6 & operator = (const __choice6 &);
    int operator == (const __choice6 &) const;
    int operator != (const __choice6 &) const;

    initial *get_initial();
    const initial *get_initial() const;
    void set_initial(const initial &);

    any *get_any();
    const any *get_any() const;
    void set_any(const any &);

    final *get_final();
    const final *get_final() const;
    void set_final(const final &);
private:
    union {
	OSSC::COssString initial_field;
	OSSC::COssString any_field;
	OSSC::COssString final_field;
    };
    void cleanup();
};

class OSS_PUBLIC OctetSubstringAssertion : public OssList  /* SEQUENCE OF */
{
public:
    typedef __choice6 component;

    OctetSubstringAssertion();
    OctetSubstringAssertion(const OctetSubstringAssertion &);
    ~OctetSubstringAssertion();

    OctetSubstringAssertion & operator = (const OctetSubstringAssertion &);
    int operator == (const OctetSubstringAssertion &) const;
    int operator != (const OctetSubstringAssertion &) const;

    component *at(OssIndex);
    const component *at(OssIndex) const;

    OssIndex prepend(const component & );
    OssIndex prepend(OctetSubstringAssertion *);
    OssIndex insert_after(OssIndex, const component & );
    OssIndex insert_after(OssIndex, OctetSubstringAssertion *);

    int remove_front();
    int remove_after(OssIndex);

    OctetSubstringAssertion *extract_after(OssIndex, OssIndex);
};

class OSS_PUBLIC DayTime   /* SEQUENCE */
{
public:
    void * operator new(size_t size);
    void operator delete(void *ptr);

    typedef OSS_UINT32 hour;
    typedef OSS_UINT32 minute;
    typedef OSS_UINT32 second;

    static const minute default_minute;
    static const second default_second;

    static minute get_default_minute();
    static second get_default_second();

    DayTime();
    DayTime(const DayTime &);
    DayTime(hour, minute, second);
    DayTime(hour);

    DayTime & operator = (const DayTime &);
    int operator == (const DayTime &) const;
    int operator != (const DayTime &) const;

    hour & get_hour();
    hour get_hour() const;
    void set_hour(hour);

    minute *get_minute();
    const minute *get_minute() const;
    void set_minute(minute);
    int minute_is_default() const;
    void set_default_minute();

    second *get_second();
    const second *get_second() const;
    void set_second(second);
    int second_is_default() const;
    void set_default_second();
private:
    OSS_UINT32 bit_mask;
    hour hour_field;
    minute minute_field;
    second second_field;
};

class OSS_PUBLIC DayTimeBand   /* SEQUENCE */
{
public:
    void * operator new(size_t size);
    void operator delete(void *ptr);

    typedef DayTime startDayTime;
    typedef DayTime endDayTime;

    static const startDayTime & default_startDayTime;
    static const endDayTime & default_endDayTime;

    static const startDayTime& get_default_startDayTime();
    static const endDayTime& get_default_endDayTime();

    DayTimeBand();
    DayTimeBand(const DayTimeBand &);
    DayTimeBand(const startDayTime &, const endDayTime &);
    ~DayTimeBand();

    DayTimeBand & operator = (const DayTimeBand &);
    int operator == (const DayTimeBand &) const;
    int operator != (const DayTimeBand &) const;

    startDayTime *get_startDayTime();
    const startDayTime *get_startDayTime() const;
    void set_startDayTime(const startDayTime &);
    int startDayTime_is_default() const;
    void set_default_startDayTime();

    endDayTime *get_endDayTime();
    const endDayTime *get_endDayTime() const;
    void set_endDayTime(const endDayTime &);
    int endDayTime_is_default() const;
    void set_default_endDayTime();
private:
    OSS_UINT32 bit_mask;
    startDayTime startDayTime_field;
    endDayTime endDayTime_field;
};

class OSS_PUBLIC NamedDay  : public OssChoice   /* CHOICE */
{
public:
    enum Id {
	unselected,
	intNamedDays_chosen = 2,
	bitNamedDays_chosen = 1
    };
    typedef enum _enum2 intNamedDays;
    typedef OssBitString bitNamedDays;

    NamedDay();
    NamedDay(const NamedDay &);
    ~NamedDay();

    NamedDay & operator = (const NamedDay &);
    int operator == (const NamedDay &) const;
    int operator != (const NamedDay &) const;

    intNamedDays *get_intNamedDays();
    const intNamedDays *get_intNamedDays() const;
    void set_intNamedDays(intNamedDays);

    bitNamedDays *get_bitNamedDays();
    const bitNamedDays *get_bitNamedDays() const;
    void set_bitNamedDays(const bitNamedDays &);
private:
    union {
	intNamedDays intNamedDays_field;
	OSSC::COssBitString bitNamedDays_field;
    };
    void cleanup();
};

class OSS_PUBLIC XDayOf  : public OssChoice   /* CHOICE */
{
public:
    enum Id {
	unselected,
	first_chosen = 1,
	second_chosen = 2,
	third_chosen = 3,
	fourth_chosen = 4,
	fifth_chosen = 5
    };
    typedef NamedDay first;
    typedef NamedDay second;
    typedef NamedDay third;
    typedef NamedDay fourth;
    typedef NamedDay fifth;

    XDayOf();
    XDayOf(const XDayOf &);
    ~XDayOf();

    XDayOf & operator = (const XDayOf &);
    int operator == (const XDayOf &) const;
    int operator != (const XDayOf &) const;

    first *get_first();
    const first *get_first() const;
    void set_first(const first &);

    second *get_second();
    const second *get_second() const;
    void set_second(const second &);

    third *get_third();
    const third *get_third() const;
    void set_third(const third &);

    fourth *get_fourth();
    const fourth *get_fourth() const;
    void set_fourth(const fourth &);

    fifth *get_fifth();
    const fifth *get_fifth() const;
    void set_fifth(const fifth &);
private:
    union {
	first *first_field;
	second *second_field;
	third *third_field;
	fourth *fourth_field;
	fifth *fifth_field;
    };
    void cleanup();
};

class OSS_PUBLIC __choice7  : public OssChoice   /* CHOICE */
{
public:
    enum Id {
	unselected,
	intDay_chosen = 2,
	bitDay_chosen = 1,
	dayOf_chosen = 3
    };
    typedef __shared22 intDay;
    typedef OssBitString bitDay;
    typedef XDayOf dayOf;

    __choice7();
    __choice7(const __choice7 &);
    ~__choice7();

    __choice7 & operator = (const __choice7 &);
    int operator == (const __choice7 &) const;
    int operator != (const __choice7 &) const;

    intDay *get_intDay();
    const intDay *get_intDay() const;
    void set_intDay(const intDay &);

    bitDay *get_bitDay();
    const bitDay *get_bitDay() const;
    void set_bitDay(const bitDay &);

    dayOf *get_dayOf();
    const dayOf *get_dayOf() const;
    void set_dayOf(const dayOf &);
private:
    union {
	void *intDay_field;
	OSSC::COssBitString bitDay_field;
	dayOf *dayOf_field;
    };
    void cleanup();
};

class OSS_PUBLIC __choice8  : public OssChoice   /* CHOICE */
{
public:
    enum Id {
	unselected,
	allWeeks_chosen = 2,
	intWeek_chosen = 3,
	bitWeek_chosen = 1
    };
    typedef Nulltype allWeeks;
    typedef __shared22 intWeek;
    typedef OssBitString bitWeek;

    __choice8();
    __choice8(const __choice8 &);
    ~__choice8();

    __choice8 & operator = (const __choice8 &);
    int operator == (const __choice8 &) const;
    int operator != (const __choice8 &) const;

    allWeeks *get_allWeeks();
    const allWeeks *get_allWeeks() const;
    void set_allWeeks(allWeeks);

    intWeek *get_intWeek();
    const intWeek *get_intWeek() const;
    void set_intWeek(const intWeek &);

    bitWeek *get_bitWeek();
    const bitWeek *get_bitWeek() const;
    void set_bitWeek(const bitWeek &);
private:
    union {
	allWeeks allWeeks_field;
	void *intWeek_field;
	OSSC::COssBitString bitWeek_field;
    };
    void cleanup();
};

class OSS_PUBLIC __choice9  : public OssChoice   /* CHOICE */
{
public:
    enum Id {
	unselected,
	allMonths_chosen = 2,
	intMonth_chosen = 3,
	bitMonth_chosen = 1
    };
    typedef Nulltype allMonths;
    typedef __shared22 intMonth;
    typedef OssBitString bitMonth;

    __choice9();
    __choice9(const __choice9 &);
    ~__choice9();

    __choice9 & operator = (const __choice9 &);
    int operator == (const __choice9 &) const;
    int operator != (const __choice9 &) const;

    allMonths *get_allMonths();
    const allMonths *get_allMonths() const;
    void set_allMonths(allMonths);

    intMonth *get_intMonth();
    const intMonth *get_intMonth() const;
    void set_intMonth(const intMonth &);

    bitMonth *get_bitMonth();
    const bitMonth *get_bitMonth() const;
    void set_bitMonth(const bitMonth &);
private:
    union {
	allMonths allMonths_field;
	void *intMonth_field;
	OSSC::COssBitString bitMonth_field;
    };
    void cleanup();
};

class OSS_PUBLIC __setof8 : public OssList  /* SET OF */
{
public:
    typedef DayTimeBand component;

    __setof8();
    __setof8(const __setof8 &);
    ~__setof8();

    __setof8 & operator = (const __setof8 &);
    int operator == (const __setof8 &) const;
    int operator != (const __setof8 &) const;

    component *at(OssIndex);
    const component *at(OssIndex) const;

    OssIndex prepend(const component & );
    OssIndex prepend(__setof8 *);
    OssIndex insert_after(OssIndex, const component & );
    OssIndex insert_after(OssIndex, __setof8 *);

    int remove_front();
    int remove_after(OssIndex);

    __setof8 *extract_after(OssIndex, OssIndex);
};

class OSS_PUBLIC __setof9 : public OssList  /* SET OF */
{
public:
    typedef OSS_UINT32 component;

    __setof9();
    __setof9(const __setof9 &);
    ~__setof9();

    __setof9 & operator = (const __setof9 &);
    int operator == (const __setof9 &) const;
    int operator != (const __setof9 &) const;

    component *at(OssIndex);
    const component *at(OssIndex) const;

    OssIndex prepend(component );
    OssIndex prepend(__setof9 *);
    OssIndex insert_after(OssIndex, component );
    OssIndex insert_after(OssIndex, __setof9 *);

    int remove_front();
    int remove_after(OssIndex);

    __setof9 *extract_after(OssIndex, OssIndex);
};

class OSS_PUBLIC Period   /* SEQUENCE */
{
public:
    void * operator new(size_t size);
    void operator delete(void *ptr);

    typedef __setof8 timesOfDay;
    typedef __choice7 days;
    typedef __choice8 weeks;
    typedef __choice9 months;
    typedef __setof9 years;

    Period();
    Period(const Period &);
    Period(const timesOfDay &, const days &, const weeks &, const months &, const years &);

    Period & operator = (const Period &);
    int operator == (const Period &) const;
    int operator != (const Period &) const;

    timesOfDay *get_timesOfDay();
    const timesOfDay *get_timesOfDay() const;
    void set_timesOfDay(const timesOfDay &);
    int timesOfDay_is_present() const;
    void omit_timesOfDay();

    days *get_days();
    const days *get_days() const;
    void set_days(const days &);
    int days_is_present() const;
    void omit_days();

    weeks *get_weeks();
    const weeks *get_weeks() const;
    void set_weeks(const weeks &);
    int weeks_is_present() const;
    void omit_weeks();

    months *get_months();
    const months *get_months() const;
    void set_months(const months &);
    int months_is_present() const;
    void omit_months();

    years *get_years();
    const years *get_years() const;
    void set_years(const years &);
    int years_is_present() const;
    void omit_years();
private:
    OSS_UINT32 bit_mask;
    timesOfDay timesOfDay_field;
    days days_field;
    weeks weeks_field;
    months months_field;
    years years_field;
};

typedef OSS_INT32 TimeZone;

class OSS_PUBLIC __seq10   /* SEQUENCE */
{
public:
    void * operator new(size_t size);
    void operator delete(void *ptr);

    typedef OssGeneralizedTime startTime;
    typedef OssGeneralizedTime endTime;

    __seq10();
    __seq10(const __seq10 &);
    __seq10(const startTime &, const endTime &);

    __seq10 & operator = (const __seq10 &);
    int operator == (const __seq10 &) const;
    int operator != (const __seq10 &) const;

    startTime *get_startTime();
    const startTime *get_startTime() const;
    void set_startTime(const startTime &);
    int startTime_is_present() const;
    void omit_startTime();

    endTime *get_endTime();
    const endTime *get_endTime() const;
    void set_endTime(const endTime &);
    int endTime_is_present() const;
    void omit_endTime();
private:
    startTime startTime_field;
    endTime endTime_field;
};

class OSS_PUBLIC __setof10 : public OssList  /* SET OF */
{
public:
    typedef Period component;

    __setof10();
    __setof10(const __setof10 &);
    ~__setof10();

    __setof10 & operator = (const __setof10 &);
    int operator == (const __setof10 &) const;
    int operator != (const __setof10 &) const;

    component *at(OssIndex);
    const component *at(OssIndex) const;

    OssIndex prepend(const component & );
    OssIndex prepend(__setof10 *);
    OssIndex insert_after(OssIndex, const component & );
    OssIndex insert_after(OssIndex, __setof10 *);

    int remove_front();
    int remove_after(OssIndex);

    __setof10 *extract_after(OssIndex, OssIndex);
};

class OSS_PUBLIC __choice10  : public OssChoice   /* CHOICE */
{
public:
    enum Id {
	unselected,
	absolute_chosen = 1,
	periodic_chosen = 2
    };
    typedef __seq10 absolute;
    typedef __setof10 periodic;

    __choice10();
    __choice10(const __choice10 &);
    ~__choice10();

    __choice10 & operator = (const __choice10 &);
    int operator == (const __choice10 &) const;
    int operator != (const __choice10 &) const;

    absolute *get_absolute();
    const absolute *get_absolute() const;
    void set_absolute(const absolute &);

    periodic *get_periodic();
    const periodic *get_periodic() const;
    void set_periodic(const periodic &);
private:
    union {
	absolute *absolute_field;
	void *periodic_field;
    };
    void cleanup();
};

class OSS_PUBLIC TimeSpecification   /* SEQUENCE */
{
public:
    void * operator new(size_t size);
    void operator delete(void *ptr);

    typedef __choice10 time;
    typedef ossBoolean notThisTime;
    typedef OSS_INT32 timeZone;

    static const notThisTime default_notThisTime;

    static notThisTime get_default_notThisTime();

    TimeSpecification();
    TimeSpecification(const TimeSpecification &);
    TimeSpecification(const time &, notThisTime, timeZone);
    TimeSpecification(const time &);

    TimeSpecification & operator = (const TimeSpecification &);
    int operator == (const TimeSpecification &) const;
    int operator != (const TimeSpecification &) const;

    time & get_time();
    const time & get_time() const;
    void set_time(const time &);

    notThisTime *get_notThisTime();
    const notThisTime *get_notThisTime() const;
    void set_notThisTime(notThisTime);
    int notThisTime_is_default() const;
    void set_default_notThisTime();

    timeZone *get_timeZone();
    const timeZone *get_timeZone() const;
    void set_timeZone(timeZone);
    int timeZone_is_present() const;
    void omit_timeZone();
private:
    OSS_UINT32 bit_mask;
    time time_field;
    notThisTime notThisTime_field;
    timeZone timeZone_field;
};

class OSS_PUBLIC __seq11   /* SEQUENCE */
{
public:
    void * operator new(size_t size);
    void operator delete(void *ptr);

    typedef OssGeneralizedTime startTime;
    typedef OssGeneralizedTime endTime;
    typedef ossBoolean entirely;

    static const entirely default_entirely;

    static entirely get_default_entirely();

    __seq11();
    __seq11(const __seq11 &);
    __seq11(const startTime &, const endTime &, entirely);
    __seq11(const startTime &);

    __seq11 & operator = (const __seq11 &);
    int operator == (const __seq11 &) const;
    int operator != (const __seq11 &) const;

    startTime & get_startTime();
    const startTime & get_startTime() const;
    void set_startTime(const startTime &);

    endTime *get_endTime();
    const endTime *get_endTime() const;
    void set_endTime(const endTime &);
    int endTime_is_present() const;
    void omit_endTime();

    entirely *get_entirely();
    const entirely *get_entirely() const;
    void set_entirely(entirely);
    int entirely_is_default() const;
    void set_default_entirely();
private:
    OSS_UINT32 bit_mask;
    startTime startTime_field;
    endTime endTime_field;
    entirely entirely_field;
};

class OSS_PUBLIC TimeAssertion  : public OssChoice   /* CHOICE */
{
public:
    enum Id {
	unselected,
	now_chosen = 1,
	at_chosen = 3,
	between_chosen = 2
    };
    typedef Nulltype now;
    typedef OssGeneralizedTime at;
    typedef __seq11 between;

    TimeAssertion();
    TimeAssertion(const TimeAssertion &);
    ~TimeAssertion();

    TimeAssertion & operator = (const TimeAssertion &);
    int operator == (const TimeAssertion &) const;
    int operator != (const TimeAssertion &) const;

    now *get_now();
    const now *get_now() const;
    void set_now(now);

    at *get_at();
    const at *get_at() const;
    void set_at(const at &);

    between *get_between();
    const between *get_between() const;
    void set_between(const between &);
private:
    union {
	now now_field;
	char *at_field;
	between *between_field;
    };
    void cleanup();
};

class OSS_PUBLIC LocaleContextSyntax  : public OssChoice   /* CHOICE */
{
public:
    enum Id {
	unselected,
	localeID1_chosen = 1,
	localeID2_chosen = 2
    };
    typedef OssEncOID localeID1;
    typedef UnboundedDirectoryString localeID2;

    LocaleContextSyntax();
    LocaleContextSyntax(const LocaleContextSyntax &);
    ~LocaleContextSyntax();

    LocaleContextSyntax & operator = (const LocaleContextSyntax &);
    int operator == (const LocaleContextSyntax &) const;
    int operator != (const LocaleContextSyntax &) const;

    localeID1 *get_localeID1();
    const localeID1 *get_localeID1() const;
    void set_localeID1(const localeID1 &);

    localeID2 *get_localeID2();
    const localeID2 *get_localeID2() const;
    void set_localeID2(const localeID2 &);
private:
    union {
	OSSC::COssEncOID localeID1_field;
	localeID2 *localeID2_field;
    };
    void cleanup();
};

typedef __shared27 AttributeOptionList;

typedef OssEncOID ID;

class OSS_PUBLIC SupportedAttributes_Type : public OssConstrainedOpenType
{
public:
    SupportedAttributes_Type();
    SupportedAttributes_Type(const SupportedAttributes_Type &);
    ~SupportedAttributes_Type();
    SupportedAttributes_Type & operator = (const SupportedAttributes_Type &);
    int operator == (const SupportedAttributes_Type &) const;
    int operator != (const SupportedAttributes_Type &) const;
    int set_decoded(PDU &);
    int grab_decoded(PDU &);
    int set_encoded(const EncodedBuffer &);
    int grab_encoded(EncodedBuffer &);
    int encode(OssControl &);

    OssEncOID *get_OssEncOID();
    const OssEncOID *get_OssEncOID() const;
    void set_OssEncOID(const OssEncOID &);
    OssEncOID *release_OssEncOID();
    void set_OssEncOID(OssEncOID *);

    __shared6 *get_DistinguishedName();
    const __shared6 *get_DistinguishedName() const;
    void set_DistinguishedName(const __shared6 &);
    __shared6 *release_DistinguishedName();
    void set_DistinguishedName(__shared6 *);
private:
    void cleanup_decoded();
};

class OSS_PUBLIC Context   /* SEQUENCE */
{
public:
    void * operator new(size_t size);
    void operator delete(void *ptr);

    typedef OssEncOID contextType;
    typedef __shared3 contextValues;
    typedef ossBoolean fallback;

    static const fallback default_fallback;

    static fallback get_default_fallback();

    Context();
    Context(const Context &);
    Context(const contextType &, const contextValues &, fallback);
    Context(const contextType &, const contextValues &);

    Context & operator = (const Context &);
    int operator == (const Context &) const;
    int operator != (const Context &) const;

    contextType & get_contextType();
    const contextType & get_contextType() const;
    void set_contextType(const contextType &);

    contextValues & get_contextValues();
    const contextValues & get_contextValues() const;
    void set_contextValues(const contextValues &);

    fallback *get_fallback();
    const fallback *get_fallback() const;
    void set_fallback(fallback);
    int fallback_is_default() const;
    void set_default_fallback();
private:
    OSS_UINT32 bit_mask;
    contextType contextType_field;
    contextValues contextValues_field;
    fallback fallback_field;
};

class OSS_PUBLIC __shared4 : public OssList  /* SET OF */
{
public:
    typedef Context component;

    __shared4();
    __shared4(const __shared4 &);
    ~__shared4();

    __shared4 & operator = (const __shared4 &);
    int operator == (const __shared4 &) const;
    int operator != (const __shared4 &) const;

    component *at(OssIndex);
    const component *at(OssIndex) const;

    OssIndex prepend(const component & );
    OssIndex prepend(__shared4 *);
    OssIndex insert_after(OssIndex, const component & );
    OssIndex insert_after(OssIndex, __shared4 *);

    int remove_front();
    int remove_after(OssIndex);

    __shared4 *extract_after(OssIndex, OssIndex);
};

class OSS_PUBLIC __seq12   /* SEQUENCE */
{
public:
    void * operator new(size_t size);
    void operator delete(void *ptr);

    typedef SupportedAttributes_Type value;
    typedef __shared4 contextList;

    __seq12();
    __seq12(const __seq12 &);
    __seq12(const value &, const contextList &);

    __seq12 & operator = (const __seq12 &);
    int operator == (const __seq12 &) const;
    int operator != (const __seq12 &) const;

    value & get_value();
    const value & get_value() const;
    void set_value(const value &);

    contextList & get_contextList();
    const contextList & get_contextList() const;
    void set_contextList(const contextList &);
private:
    value value_field;
    contextList contextList_field;
};

class OSS_PUBLIC AttributeTypeAssertion   /* SEQUENCE */
{
public:
    void * operator new(size_t size);
    void operator delete(void *ptr);

    typedef OssEncOID type;
    typedef __shared28 assertedContexts;

    AttributeTypeAssertion();
    AttributeTypeAssertion(const AttributeTypeAssertion &);
    AttributeTypeAssertion(const type &, const assertedContexts &);
    AttributeTypeAssertion(const type &);

    AttributeTypeAssertion & operator = (const AttributeTypeAssertion &);
    int operator == (const AttributeTypeAssertion &) const;
    int operator != (const AttributeTypeAssertion &) const;

    type & get_type();
    const type & get_type() const;
    void set_type(const type &);

    assertedContexts *get_assertedContexts();
    const assertedContexts *get_assertedContexts() const;
    void set_assertedContexts(const assertedContexts &);
    int assertedContexts_is_present() const;
    void omit_assertedContexts();
private:
    OSS_UINT32 bit_mask;
    type type_field;
    assertedContexts assertedContexts_field;
};

class OSS_PUBLIC __seq13;

class OSS_PUBLIC __setof16 : public OssList  /* SET OF */
{
public:
    typedef __seq13 component;

    __setof16();
    __setof16(const __setof16 &);
    ~__setof16();

    __setof16 & operator = (const __setof16 &);
    int operator == (const __setof16 &) const;
    int operator != (const __setof16 &) const;

    component *at(OssIndex);
    const component *at(OssIndex) const;

    OssIndex prepend(const component & );
    OssIndex prepend(__setof16 *);
    OssIndex insert_after(OssIndex, const component & );
    OssIndex insert_after(OssIndex, __setof16 *);

    int remove_front();
    int remove_after(OssIndex);

    __setof16 *extract_after(OssIndex, OssIndex);
};

class OSS_PUBLIC AttributeTypeAndDistinguishedValue   /* SEQUENCE */
{
public:
    void * operator new(size_t size);
    void operator delete(void *ptr);

    typedef OssEncOID type;
    typedef SupportedAttributes_Type value;
    typedef ossBoolean primaryDistinguished;
    typedef __setof16 valuesWithContext;

    static const primaryDistinguished default_primaryDistinguished;

    static primaryDistinguished get_default_primaryDistinguished();

    AttributeTypeAndDistinguishedValue();
    AttributeTypeAndDistinguishedValue(const AttributeTypeAndDistinguishedValue &);
    AttributeTypeAndDistinguishedValue(const type &, const value &, primaryDistinguished, 
	const valuesWithContext &);
    AttributeTypeAndDistinguishedValue(const type &, const value &);

    AttributeTypeAndDistinguishedValue & operator = (const AttributeTypeAndDistinguishedValue &);
    int operator == (const AttributeTypeAndDistinguishedValue &) const;
    int operator != (const AttributeTypeAndDistinguishedValue &) const;

    type & get_type();
    const type & get_type() const;
    void set_type(const type &);

    value & get_value();
    const value & get_value() const;
    void set_value(const value &);

    primaryDistinguished *get_primaryDistinguished();
    const primaryDistinguished *get_primaryDistinguished() const;
    void set_primaryDistinguished(primaryDistinguished);
    int primaryDistinguished_is_default() const;
    void set_default_primaryDistinguished();

    valuesWithContext *get_valuesWithContext();
    const valuesWithContext *get_valuesWithContext() const;
    void set_valuesWithContext(const valuesWithContext &);
    int valuesWithContext_is_present() const;
    void omit_valuesWithContext();
private:
    OSS_UINT32 bit_mask;
    type type_field;
    value value_field;
    primaryDistinguished primaryDistinguished_field;
    valuesWithContext valuesWithContext_field;
};

class OSS_PUBLIC __seq13   /* SEQUENCE */
{
public:
    void * operator new(size_t size);
    void operator delete(void *ptr);

    typedef SupportedAttributes_Type distingAttrValue;
    typedef __shared4 contextList;

    __seq13();
    __seq13(const __seq13 &);
    __seq13(const distingAttrValue &, const contextList &);
    __seq13(const contextList &);

    __seq13 & operator = (const __seq13 &);
    int operator == (const __seq13 &) const;
    int operator != (const __seq13 &) const;

    distingAttrValue *get_distingAttrValue();
    const distingAttrValue *get_distingAttrValue() const;
    void set_distingAttrValue(const distingAttrValue &);
    int distingAttrValue_is_present() const;
    void omit_distingAttrValue();

    contextList & get_contextList();
    const contextList & get_contextList() const;
    void set_contextList(const contextList &);
private:
    OSS_UINT32 bit_mask;
    distingAttrValue distingAttrValue_field;
    contextList contextList_field;
};

typedef __shared6 LocalName;

typedef OSS_UINT32 BaseDistance;

class OSS_PUBLIC Refinement;

class OSS_PUBLIC __shared29 : public OssList  /* SET OF */
{
public:
    typedef Refinement component;

    __shared29();
    __shared29(const __shared29 &);
    ~__shared29();

    __shared29 & operator = (const __shared29 &);
    int operator == (const __shared29 &) const;
    int operator != (const __shared29 &) const;

    component *at(OssIndex);
    const component *at(OssIndex) const;

    OssIndex prepend(const component & );
    OssIndex prepend(__shared29 *);
    OssIndex insert_after(OssIndex, const component & );
    OssIndex insert_after(OssIndex, __shared29 *);

    int remove_front();
    int remove_after(OssIndex);

    __shared29 *extract_after(OssIndex, OssIndex);
};

class OSS_PUBLIC Refinement  : public OssChoice   /* CHOICE */
{
public:
    enum Id {
	unselected,
	item_chosen = 1,
	Refinement_and_chosen = 2,
	Refinement_or_chosen = 3,
	Refinement_not_chosen = 4
    };
    typedef OssEncOID item;
    typedef __shared29 Refinement_and;
    typedef __shared29 Refinement_or;
    typedef Refinement Refinement_not;

    Refinement();
    Refinement(const Refinement &);
    ~Refinement();

    Refinement & operator = (const Refinement &);
    int operator == (const Refinement &) const;
    int operator != (const Refinement &) const;

    item *get_item();
    const item *get_item() const;
    void set_item(const item &);

    Refinement_and *get_Refinement_and();
    const Refinement_and *get_Refinement_and() const;
    void set_Refinement_and(const Refinement_and &);

    Refinement_or *get_Refinement_or();
    const Refinement_or *get_Refinement_or() const;
    void set_Refinement_or(const Refinement_or &);

    Refinement_not *get_Refinement_not();
    const Refinement_not *get_Refinement_not() const;
    void set_Refinement_not(const Refinement_not &);
private:
    union {
	OSSC::COssEncOID item_field;
	void *Refinement_and_field;
	void *Refinement_or_field;
	Refinement_not *Refinement_not_field;
    };
    void cleanup();
};

class OSS_PUBLIC __choice11  : public OssChoice   /* CHOICE */
{
public:
    enum Id {
	unselected,
	chopBefore_chosen = 1,
	chopAfter_chosen = 2
    };
    typedef __shared6 chopBefore;
    typedef __shared6 chopAfter;

    __choice11();
    __choice11(const __choice11 &);
    ~__choice11();

    __choice11 & operator = (const __choice11 &);
    int operator == (const __choice11 &) const;
    int operator != (const __choice11 &) const;

    chopBefore *get_chopBefore();
    const chopBefore *get_chopBefore() const;
    void set_chopBefore(const chopBefore &);

    chopAfter *get_chopAfter();
    const chopAfter *get_chopAfter() const;
    void set_chopAfter(const chopAfter &);
private:
    union {
	void *chopBefore_field;
	void *chopAfter_field;
    };
    void cleanup();
};

class OSS_PUBLIC __setof19 : public OssList  /* SET OF */
{
public:
    typedef __choice11 component;

    __setof19();
    __setof19(const __setof19 &);
    ~__setof19();

    __setof19 & operator = (const __setof19 &);
    int operator == (const __setof19 &) const;
    int operator != (const __setof19 &) const;

    component *at(OssIndex);
    const component *at(OssIndex) const;

    OssIndex prepend(const component & );
    OssIndex prepend(__setof19 *);
    OssIndex insert_after(OssIndex, const component & );
    OssIndex insert_after(OssIndex, __setof19 *);

    int remove_front();
    int remove_after(OssIndex);

    __setof19 *extract_after(OssIndex, OssIndex);
};

class OSS_PUBLIC SubtreeSpecification   /* SEQUENCE */
{
public:
    void * operator new(size_t size);
    void operator delete(void *ptr);

    typedef __shared6 base;
    typedef __setof19 specificExclusions;
    typedef OSS_UINT32 minimum;
    typedef OSS_UINT32 maximum;
    typedef Refinement specificationFilter;

    static const base & default_base;
    static const minimum default_minimum;

    static const base& get_default_base();
    static minimum get_default_minimum();

    SubtreeSpecification();
    SubtreeSpecification(const SubtreeSpecification &);
    SubtreeSpecification(const base &, const specificExclusions &, minimum, maximum, 
	const specificationFilter &);
    ~SubtreeSpecification();

    SubtreeSpecification & operator = (const SubtreeSpecification &);
    int operator == (const SubtreeSpecification &) const;
    int operator != (const SubtreeSpecification &) const;

    base *get_base();
    const base *get_base() const;
    void set_base(const base &);
    int base_is_default() const;
    void set_default_base();

    specificExclusions *get_specificExclusions();
    const specificExclusions *get_specificExclusions() const;
    void set_specificExclusions(const specificExclusions &);
    int specificExclusions_is_present() const;
    void omit_specificExclusions();

    minimum *get_minimum();
    const minimum *get_minimum() const;
    void set_minimum(minimum);
    int minimum_is_default() const;
    void set_default_minimum();

    maximum *get_maximum();
    const maximum *get_maximum() const;
    void set_maximum(maximum);
    int maximum_is_present() const;
    void omit_maximum();

    specificationFilter *get_specificationFilter();
    const specificationFilter *get_specificationFilter() const;
    void set_specificationFilter(const specificationFilter &);
    int specificationFilter_is_present() const;
    void omit_specificationFilter();
private:
    OSS_UINT32 bit_mask;
    base base_field;
    specificExclusions specificExclusions_field;
    minimum minimum_field;
    maximum maximum_field;
    specificationFilter specificationFilter_field;
};

typedef OSS_INT32 RuleIdentifier;

class OSS_PUBLIC DITStructureRule   /* SEQUENCE */
{
public:
    void * operator new(size_t size);
    void operator delete(void *ptr);

    typedef OSS_INT32 ruleIdentifier;
    typedef OssEncOID nameForm;
    typedef __shared22 superiorStructureRules;

    DITStructureRule();
    DITStructureRule(const DITStructureRule &);
    DITStructureRule(ruleIdentifier, const nameForm &, const superiorStructureRules &);
    DITStructureRule(ruleIdentifier, const nameForm &);

    DITStructureRule & operator = (const DITStructureRule &);
    int operator == (const DITStructureRule &) const;
    int operator != (const DITStructureRule &) const;

    ruleIdentifier & get_ruleIdentifier();
    ruleIdentifier get_ruleIdentifier() const;
    void set_ruleIdentifier(ruleIdentifier);

    nameForm & get_nameForm();
    const nameForm & get_nameForm() const;
    void set_nameForm(const nameForm &);

    superiorStructureRules *get_superiorStructureRules();
    const superiorStructureRules *get_superiorStructureRules() const;
    void set_superiorStructureRules(const superiorStructureRules &);
    int superiorStructureRules_is_present() const;
    void omit_superiorStructureRules();
private:
    OSS_UINT32 bit_mask;
    ruleIdentifier ruleIdentifier_field;
    nameForm nameForm_field;
    superiorStructureRules superiorStructureRules_field;
};

class OSS_PUBLIC DITContentRule   /* SEQUENCE */
{
public:
    void * operator new(size_t size);
    void operator delete(void *ptr);

    typedef OssEncOID structuralObjectClass;
    typedef __shared8 auxiliaries;
    typedef __shared8 mandatory;
    typedef __shared8 optional;
    typedef __shared8 precluded;

    DITContentRule();
    DITContentRule(const DITContentRule &);
    DITContentRule(const structuralObjectClass &, const auxiliaries &, const mandatory &, 
	const optional &, const precluded &);
    DITContentRule(const structuralObjectClass &);

    DITContentRule & operator = (const DITContentRule &);
    int operator == (const DITContentRule &) const;
    int operator != (const DITContentRule &) const;

    structuralObjectClass & get_structuralObjectClass();
    const structuralObjectClass & get_structuralObjectClass() const;
    void set_structuralObjectClass(const structuralObjectClass &);

    auxiliaries *get_auxiliaries();
    const auxiliaries *get_auxiliaries() const;
    void set_auxiliaries(const auxiliaries &);
    int auxiliaries_is_present() const;
    void omit_auxiliaries();

    mandatory *get_mandatory();
    const mandatory *get_mandatory() const;
    void set_mandatory(const mandatory &);
    int mandatory_is_present() const;
    void omit_mandatory();

    optional *get_optional();
    const optional *get_optional() const;
    void set_optional(const optional &);
    int optional_is_present() const;
    void omit_optional();

    precluded *get_precluded();
    const precluded *get_precluded() const;
    void set_precluded(const precluded &);
    int precluded_is_present() const;
    void omit_precluded();
private:
    OSS_UINT32 bit_mask;
    structuralObjectClass structuralObjectClass_field;
    auxiliaries auxiliaries_field;
    mandatory mandatory_field;
    optional optional_field;
    precluded precluded_field;
};

class OSS_PUBLIC DITContextUse   /* SEQUENCE */
{
public:
    void * operator new(size_t size);
    void operator delete(void *ptr);

    typedef OssEncOID attributeType;
    typedef __shared8 mandatoryContexts;
    typedef __shared8 optionalContexts;

    DITContextUse();
    DITContextUse(const DITContextUse &);
    DITContextUse(const attributeType &, const mandatoryContexts &, const optionalContexts &);
    DITContextUse(const attributeType &);

    DITContextUse & operator = (const DITContextUse &);
    int operator == (const DITContextUse &) const;
    int operator != (const DITContextUse &) const;

    attributeType & get_attributeType();
    const attributeType & get_attributeType() const;
    void set_attributeType(const attributeType &);

    mandatoryContexts *get_mandatoryContexts();
    const mandatoryContexts *get_mandatoryContexts() const;
    void set_mandatoryContexts(const mandatoryContexts &);
    int mandatoryContexts_is_present() const;
    void omit_mandatoryContexts();

    optionalContexts *get_optionalContexts();
    const optionalContexts *get_optionalContexts() const;
    void set_optionalContexts(const optionalContexts &);
    int optionalContexts_is_present() const;
    void omit_optionalContexts();
private:
    OSS_UINT32 bit_mask;
    attributeType attributeType_field;
    mandatoryContexts mandatoryContexts_field;
    optionalContexts optionalContexts_field;
};

/* Universal PDU class */

class OSS_PUBLIC UpperBounds_PDU : public UniversalPDU {
public:
    UpperBounds_PDU();
    void set_OssEncOID(OssEncOID &);
    OssEncOID *get_OssEncOID() const;
    void set_ACSE_apdu(ACSE_apdu &);
    ACSE_apdu *get_ACSE_apdu() const;
    void set_AE_title(AE_title &);
    AE_title *get_AE_title() const;
    void set_CP_type(CP_type &);
    CP_type *get_CP_type() const;
    void set_CPC_type(CPC_type &);
    CPC_type *get_CPC_type() const;
    void set_CPA_PPDU(CPA_PPDU &);
    CPA_PPDU *get_CPA_PPDU() const;
    void set_CPR_PPDU(CPR_PPDU &);
    CPR_PPDU *get_CPR_PPDU() const;
    void set_Abort_type(Abort_type &);
    Abort_type *get_Abort_type() const;
    void set_Typed_data_type(Typed_data_type &);
    Typed_data_type *get_Typed_data_type() const;
    void set_RS_PPDU(RS_PPDU &);
    RS_PPDU *get_RS_PPDU() const;
    void set_RSA_PPDU(RSA_PPDU &);
    RSA_PPDU *get_RSA_PPDU() const;
    void set_Reliable_Transfer_APDU_RTSE_apdus(Reliable_Transfer_APDU_RTSE_apdus &);
    Reliable_Transfer_APDU_RTSE_apdus *get_Reliable_Transfer_APDU_RTSE_apdus() const;
    void set_Remote_Operations_Abstract_Syntaxes_RTSE_apdus(Remote_Operations_Abstract_Syntaxes_RTSE_apdus &);
    Remote_Operations_Abstract_Syntaxes_RTSE_apdus *get_Remote_Operations_Abstract_Syntaxes_RTSE_apdus() const;
    void set_ROSEInvokeIds(ROSEInvokeIds &);
    ROSEInvokeIds *get_ROSEInvokeIds() const;
    void set_Reject(Reject &);
    Reject *get_Reject() const;
    void set_NoInvokeId(NoInvokeId &);
    NoInvokeId *get_NoInvokeId() const;
    void set_UnboundedDirectoryString(UnboundedDirectoryString &);
    UnboundedDirectoryString *get_UnboundedDirectoryString() const;
    void set_UniqueIdentifier(UniqueIdentifier &);
    UniqueIdentifier *get_UniqueIdentifier() const;
    void set_UUIDPair(UUIDPair &);
    UUIDPair *get_UUIDPair() const;
    void set_CountryName(CountryName &);
    CountryName *get_CountryName() const;
    void set_Guide(Guide &);
    Guide *get_Guide() const;
    void set_EnhancedGuide(EnhancedGuide &);
    EnhancedGuide *get_EnhancedGuide() const;
    void set_PostalAddress(PostalAddress &);
    PostalAddress *get_PostalAddress() const;
    void set_TelephoneNumber(TelephoneNumber &);
    TelephoneNumber *get_TelephoneNumber() const;
    void set_TelexNumber(TelexNumber &);
    TelexNumber *get_TelexNumber() const;
    void set_X121Address(X121Address &);
    X121Address *get_X121Address() const;
    void set_InternationalISDNNumber(InternationalISDNNumber &);
    InternationalISDNNumber *get_InternationalISDNNumber() const;
    void set_DestinationIndicator(DestinationIndicator &);
    DestinationIndicator *get_DestinationIndicator() const;
    void set_CommunicationsService(CommunicationsService &);
    CommunicationsService *get_CommunicationsService() const;
    void set_CommunicationsNetwork(CommunicationsNetwork &);
    CommunicationsNetwork *get_CommunicationsNetwork() const;
    void set_PreferredDeliveryMethod(PreferredDeliveryMethod &);
    PreferredDeliveryMethod *get_PreferredDeliveryMethod() const;
    void set_PresentationAddress(PresentationAddress &);
    PresentationAddress *get_PresentationAddress() const;
    void set_ProtocolInformation(ProtocolInformation &);
    ProtocolInformation *get_ProtocolInformation() const;
    void set_NameAndOptionalUID(NameAndOptionalUID &);
    NameAndOptionalUID *get_NameAndOptionalUID() const;
    void set_MultipleMatchingLocalities(MultipleMatchingLocalities &);
    MultipleMatchingLocalities *get_MultipleMatchingLocalities() const;
    void set_SubstringAssertion(SubstringAssertion &);
    SubstringAssertion *get_SubstringAssertion() const;
    void set_CaseIgnoreList(CaseIgnoreList &);
    CaseIgnoreList *get_CaseIgnoreList() const;
    void set_OctetSubstringAssertion(OctetSubstringAssertion &);
    OctetSubstringAssertion *get_OctetSubstringAssertion() const;
    void set_SequenceMatchType(SequenceMatchType &);
    SequenceMatchType *get_SequenceMatchType() const;
    void set_WordMatchTypes(WordMatchTypes &);
    WordMatchTypes *get_WordMatchTypes() const;
    void set_CharacterMatchTypes(CharacterMatchTypes &);
    CharacterMatchTypes *get_CharacterMatchTypes() const;
    void set_LanguageContextSyntax(LanguageContextSyntax &);
    LanguageContextSyntax *get_LanguageContextSyntax() const;
    void set_TimeSpecification(TimeSpecification &);
    TimeSpecification *get_TimeSpecification() const;
    void set_TimeAssertion(TimeAssertion &);
    TimeAssertion *get_TimeAssertion() const;
    void set_LocaleContextSyntax(LocaleContextSyntax &);
    LocaleContextSyntax *get_LocaleContextSyntax() const;
    void set_AttributeOptionList(AttributeOptionList &);
    AttributeOptionList *get_AttributeOptionList() const;
    void set_ID(ID &);
    ID *get_ID() const;
    void set_AttributeValue(AttributeValue &);
    AttributeValue *get_AttributeValue() const;
    void set_ContextAssertion(ContextAssertion &);
    ContextAssertion *get_ContextAssertion() const;
    void set_AttributeTypeAssertion(AttributeTypeAssertion &);
    AttributeTypeAssertion *get_AttributeTypeAssertion() const;
    void set_DistinguishedName(DistinguishedName &);
    DistinguishedName *get_DistinguishedName() const;
    void set_SubtreeSpecification(SubtreeSpecification &);
    SubtreeSpecification *get_SubtreeSpecification() const;
    void set_DITStructureRule(DITStructureRule &);
    DITStructureRule *get_DITStructureRule() const;
    void set_DITContentRule(DITContentRule &);
    DITContentRule *get_DITContentRule() const;
    void set_DITContextUse(DITContextUse &);
    DITContextUse *get_DITContextUse() const;
    void set_HierarchyLevel(HierarchyLevel &);
    HierarchyLevel *get_HierarchyLevel() const;
    void set_HierarchyBelow(HierarchyBelow &);
    HierarchyBelow *get_HierarchyBelow() const;
    void set_Acse_RealizationParameter(Acse_RealizationParameter &);
    Acse_RealizationParameter *get_Acse_RealizationParameter() const;
    void set_Acse_with_concatenation_RealizationParameter(Acse_with_concatenation_RealizationParameter &);
    Acse_with_concatenation_RealizationParameter *get_Acse_with_concatenation_RealizationParameter() const;
    void set_Association_by_RTSE_RealizationParameter(Association_by_RTSE_RealizationParameter &);
    Association_by_RTSE_RealizationParameter *get_Association_by_RTSE_RealizationParameter() const;
    void set_PData_RealizationParameter(PData_RealizationParameter &);
    PData_RealizationParameter *get_PData_RealizationParameter() const;
    void set_PData_with_concatenation_RealizationParameter(PData_with_concatenation_RealizationParameter &);
    PData_with_concatenation_RealizationParameter *get_PData_with_concatenation_RealizationParameter() const;
    void set_Transfer_by_RTSE_RealizationParameter(Transfer_by_RTSE_RealizationParameter &);
    Transfer_by_RTSE_RealizationParameter *get_Transfer_by_RTSE_RealizationParameter() const;
    void set_BitStringMatch_SYNTAX(BitStringMatch_SYNTAX &);
    BitStringMatch_SYNTAX *get_BitStringMatch_SYNTAX() const;
    void set_DnQualifier_WITH_SYNTAX(DnQualifier_WITH_SYNTAX &);
    DnQualifier_WITH_SYNTAX *get_DnQualifier_WITH_SYNTAX() const;
    void set_SerialNumber_WITH_SYNTAX(SerialNumber_WITH_SYNTAX &);
    SerialNumber_WITH_SYNTAX *get_SerialNumber_WITH_SYNTAX() const;
    void set_NumericStringMatch_SYNTAX(NumericStringMatch_SYNTAX &);
    NumericStringMatch_SYNTAX *get_NumericStringMatch_SYNTAX() const;
    void set_ProtocolInformationMatch_SYNTAX(ProtocolInformationMatch_SYNTAX &);
    ProtocolInformationMatch_SYNTAX *get_ProtocolInformationMatch_SYNTAX() const;
    void set_UiiInUrn_WITH_SYNTAX(UiiInUrn_WITH_SYNTAX &);
    UiiInUrn_WITH_SYNTAX *get_UiiInUrn_WITH_SYNTAX() const;
    void set_NumericStringOrderingMatch_SYNTAX(NumericStringOrderingMatch_SYNTAX &);
    NumericStringOrderingMatch_SYNTAX *get_NumericStringOrderingMatch_SYNTAX() const;
    void set_BooleanMatch_SYNTAX(BooleanMatch_SYNTAX &);
    BooleanMatch_SYNTAX *get_BooleanMatch_SYNTAX() const;
    void set_IntegerMatch_SYNTAX(IntegerMatch_SYNTAX &);
    IntegerMatch_SYNTAX *get_IntegerMatch_SYNTAX() const;
    void set_IntegerOrderingMatch_SYNTAX(IntegerOrderingMatch_SYNTAX &);
    IntegerOrderingMatch_SYNTAX *get_IntegerOrderingMatch_SYNTAX() const;
    void set_OctetStringMatch_SYNTAX(OctetStringMatch_SYNTAX &);
    OctetStringMatch_SYNTAX *get_OctetStringMatch_SYNTAX() const;
    void set_OctetStringOrderingMatch_SYNTAX(OctetStringOrderingMatch_SYNTAX &);
    OctetStringOrderingMatch_SYNTAX *get_OctetStringOrderingMatch_SYNTAX() const;
    void set_UTCTimeMatch_SYNTAX(UTCTimeMatch_SYNTAX &);
    UTCTimeMatch_SYNTAX *get_UTCTimeMatch_SYNTAX() const;
    void set_UTCTimeOrderingMatch_SYNTAX(UTCTimeOrderingMatch_SYNTAX &);
    UTCTimeOrderingMatch_SYNTAX *get_UTCTimeOrderingMatch_SYNTAX() const;
    void set_GeneralizedTimeMatch_SYNTAX(GeneralizedTimeMatch_SYNTAX &);
    GeneralizedTimeMatch_SYNTAX *get_GeneralizedTimeMatch_SYNTAX() const;
    void set_GeneralizedTimeOrderingMatch_SYNTAX(GeneralizedTimeOrderingMatch_SYNTAX &);
    GeneralizedTimeOrderingMatch_SYNTAX *get_GeneralizedTimeOrderingMatch_SYNTAX() const;
    void set_IntegerFirstComponentMatch_SYNTAX(IntegerFirstComponentMatch_SYNTAX &);
    IntegerFirstComponentMatch_SYNTAX *get_IntegerFirstComponentMatch_SYNTAX() const;
    void set_AdministrativeRole_WITH_SYNTAX(AdministrativeRole_WITH_SYNTAX &);
    AdministrativeRole_WITH_SYNTAX *get_AdministrativeRole_WITH_SYNTAX() const;
    void set_CreateTimestamp_WITH_SYNTAX(CreateTimestamp_WITH_SYNTAX &);
    CreateTimestamp_WITH_SYNTAX *get_CreateTimestamp_WITH_SYNTAX() const;
    void set_ModifyTimestamp_WITH_SYNTAX(ModifyTimestamp_WITH_SYNTAX &);
    ModifyTimestamp_WITH_SYNTAX *get_ModifyTimestamp_WITH_SYNTAX() const;
    void set_SubschemaTimestamp_WITH_SYNTAX(SubschemaTimestamp_WITH_SYNTAX &);
    SubschemaTimestamp_WITH_SYNTAX *get_SubschemaTimestamp_WITH_SYNTAX() const;
    void set_HasSubordinates_WITH_SYNTAX(HasSubordinates_WITH_SYNTAX &);
    HasSubordinates_WITH_SYNTAX *get_HasSubordinates_WITH_SYNTAX() const;
#ifdef OSS_PREALLOCATED_BUFFER_DECODE_SUPPORTED
    void set_const_OssEncOID(const OssEncOID &);
    const OssEncOID *get_const_OssEncOID() const;
    void set_const_ACSE_apdu(const ACSE_apdu &);
    const ACSE_apdu *get_const_ACSE_apdu() const;
    void set_const_AE_title(const AE_title &);
    const AE_title *get_const_AE_title() const;
    void set_const_CP_type(const CP_type &);
    const CP_type *get_const_CP_type() const;
    void set_const_CPC_type(const CPC_type &);
    const CPC_type *get_const_CPC_type() const;
    void set_const_CPA_PPDU(const CPA_PPDU &);
    const CPA_PPDU *get_const_CPA_PPDU() const;
    void set_const_CPR_PPDU(const CPR_PPDU &);
    const CPR_PPDU *get_const_CPR_PPDU() const;
    void set_const_Abort_type(const Abort_type &);
    const Abort_type *get_const_Abort_type() const;
    void set_const_Typed_data_type(const Typed_data_type &);
    const Typed_data_type *get_const_Typed_data_type() const;
    void set_const_RS_PPDU(const RS_PPDU &);
    const RS_PPDU *get_const_RS_PPDU() const;
    void set_const_RSA_PPDU(const RSA_PPDU &);
    const RSA_PPDU *get_const_RSA_PPDU() const;
    void set_const_Reliable_Transfer_APDU_RTSE_apdus(const Reliable_Transfer_APDU_RTSE_apdus &);
    const Reliable_Transfer_APDU_RTSE_apdus *get_const_Reliable_Transfer_APDU_RTSE_apdus() const;
    void set_const_Remote_Operations_Abstract_Syntaxes_RTSE_apdus(const Remote_Operations_Abstract_Syntaxes_RTSE_apdus &);
    const Remote_Operations_Abstract_Syntaxes_RTSE_apdus *get_const_Remote_Operations_Abstract_Syntaxes_RTSE_apdus() const;
    void set_const_ROSEInvokeIds(const ROSEInvokeIds &);
    const ROSEInvokeIds *get_const_ROSEInvokeIds() const;
    void set_const_Reject(const Reject &);
    const Reject *get_const_Reject() const;
    void set_const_NoInvokeId(const NoInvokeId &);
    const NoInvokeId *get_const_NoInvokeId() const;
    void set_const_UnboundedDirectoryString(const UnboundedDirectoryString &);
    const UnboundedDirectoryString *get_const_UnboundedDirectoryString() const;
    void set_const_UniqueIdentifier(const UniqueIdentifier &);
    const UniqueIdentifier *get_const_UniqueIdentifier() const;
    void set_const_UUIDPair(const UUIDPair &);
    const UUIDPair *get_const_UUIDPair() const;
    void set_const_CountryName(const CountryName &);
    const CountryName *get_const_CountryName() const;
    void set_const_Guide(const Guide &);
    const Guide *get_const_Guide() const;
    void set_const_EnhancedGuide(const EnhancedGuide &);
    const EnhancedGuide *get_const_EnhancedGuide() const;
    void set_const_PostalAddress(const PostalAddress &);
    const PostalAddress *get_const_PostalAddress() const;
    void set_const_TelephoneNumber(const TelephoneNumber &);
    const TelephoneNumber *get_const_TelephoneNumber() const;
    void set_const_TelexNumber(const TelexNumber &);
    const TelexNumber *get_const_TelexNumber() const;
    void set_const_X121Address(const X121Address &);
    const X121Address *get_const_X121Address() const;
    void set_const_InternationalISDNNumber(const InternationalISDNNumber &);
    const InternationalISDNNumber *get_const_InternationalISDNNumber() const;
    void set_const_DestinationIndicator(const DestinationIndicator &);
    const DestinationIndicator *get_const_DestinationIndicator() const;
    void set_const_CommunicationsService(const CommunicationsService &);
    const CommunicationsService *get_const_CommunicationsService() const;
    void set_const_CommunicationsNetwork(const CommunicationsNetwork &);
    const CommunicationsNetwork *get_const_CommunicationsNetwork() const;
    void set_const_PreferredDeliveryMethod(const PreferredDeliveryMethod &);
    const PreferredDeliveryMethod *get_const_PreferredDeliveryMethod() const;
    void set_const_PresentationAddress(const PresentationAddress &);
    const PresentationAddress *get_const_PresentationAddress() const;
    void set_const_ProtocolInformation(const ProtocolInformation &);
    const ProtocolInformation *get_const_ProtocolInformation() const;
    void set_const_NameAndOptionalUID(const NameAndOptionalUID &);
    const NameAndOptionalUID *get_const_NameAndOptionalUID() const;
    void set_const_MultipleMatchingLocalities(const MultipleMatchingLocalities &);
    const MultipleMatchingLocalities *get_const_MultipleMatchingLocalities() const;
    void set_const_SubstringAssertion(const SubstringAssertion &);
    const SubstringAssertion *get_const_SubstringAssertion() const;
    void set_const_CaseIgnoreList(const CaseIgnoreList &);
    const CaseIgnoreList *get_const_CaseIgnoreList() const;
    void set_const_OctetSubstringAssertion(const OctetSubstringAssertion &);
    const OctetSubstringAssertion *get_const_OctetSubstringAssertion() const;
    void set_const_SequenceMatchType(const SequenceMatchType &);
    const SequenceMatchType *get_const_SequenceMatchType() const;
    void set_const_WordMatchTypes(const WordMatchTypes &);
    const WordMatchTypes *get_const_WordMatchTypes() const;
    void set_const_CharacterMatchTypes(const CharacterMatchTypes &);
    const CharacterMatchTypes *get_const_CharacterMatchTypes() const;
    void set_const_LanguageContextSyntax(const LanguageContextSyntax &);
    const LanguageContextSyntax *get_const_LanguageContextSyntax() const;
    void set_const_TimeSpecification(const TimeSpecification &);
    const TimeSpecification *get_const_TimeSpecification() const;
    void set_const_TimeAssertion(const TimeAssertion &);
    const TimeAssertion *get_const_TimeAssertion() const;
    void set_const_LocaleContextSyntax(const LocaleContextSyntax &);
    const LocaleContextSyntax *get_const_LocaleContextSyntax() const;
    void set_const_AttributeOptionList(const AttributeOptionList &);
    const AttributeOptionList *get_const_AttributeOptionList() const;
    void set_const_ID(const ID &);
    const ID *get_const_ID() const;
    void set_const_AttributeValue(const AttributeValue &);
    const AttributeValue *get_const_AttributeValue() const;
    void set_const_ContextAssertion(const ContextAssertion &);
    const ContextAssertion *get_const_ContextAssertion() const;
    void set_const_AttributeTypeAssertion(const AttributeTypeAssertion &);
    const AttributeTypeAssertion *get_const_AttributeTypeAssertion() const;
    void set_const_DistinguishedName(const DistinguishedName &);
    const DistinguishedName *get_const_DistinguishedName() const;
    void set_const_SubtreeSpecification(const SubtreeSpecification &);
    const SubtreeSpecification *get_const_SubtreeSpecification() const;
    void set_const_DITStructureRule(const DITStructureRule &);
    const DITStructureRule *get_const_DITStructureRule() const;
    void set_const_DITContentRule(const DITContentRule &);
    const DITContentRule *get_const_DITContentRule() const;
    void set_const_DITContextUse(const DITContextUse &);
    const DITContextUse *get_const_DITContextUse() const;
    void set_const_HierarchyLevel(const HierarchyLevel &);
    const HierarchyLevel *get_const_HierarchyLevel() const;
    void set_const_HierarchyBelow(const HierarchyBelow &);
    const HierarchyBelow *get_const_HierarchyBelow() const;
    void set_const_Acse_RealizationParameter(const Acse_RealizationParameter &);
    const Acse_RealizationParameter *get_const_Acse_RealizationParameter() const;
    void set_const_Acse_with_concatenation_RealizationParameter(const Acse_with_concatenation_RealizationParameter &);
    const Acse_with_concatenation_RealizationParameter *get_const_Acse_with_concatenation_RealizationParameter() const;
    void set_const_Association_by_RTSE_RealizationParameter(const Association_by_RTSE_RealizationParameter &);
    const Association_by_RTSE_RealizationParameter *get_const_Association_by_RTSE_RealizationParameter() const;
    void set_const_PData_RealizationParameter(const PData_RealizationParameter &);
    const PData_RealizationParameter *get_const_PData_RealizationParameter() const;
    void set_const_PData_with_concatenation_RealizationParameter(const PData_with_concatenation_RealizationParameter &);
    const PData_with_concatenation_RealizationParameter *get_const_PData_with_concatenation_RealizationParameter() const;
    void set_const_Transfer_by_RTSE_RealizationParameter(const Transfer_by_RTSE_RealizationParameter &);
    const Transfer_by_RTSE_RealizationParameter *get_const_Transfer_by_RTSE_RealizationParameter() const;
    void set_const_BitStringMatch_SYNTAX(const BitStringMatch_SYNTAX &);
    const BitStringMatch_SYNTAX *get_const_BitStringMatch_SYNTAX() const;
    void set_const_DnQualifier_WITH_SYNTAX(const DnQualifier_WITH_SYNTAX &);
    const DnQualifier_WITH_SYNTAX *get_const_DnQualifier_WITH_SYNTAX() const;
    void set_const_SerialNumber_WITH_SYNTAX(const SerialNumber_WITH_SYNTAX &);
    const SerialNumber_WITH_SYNTAX *get_const_SerialNumber_WITH_SYNTAX() const;
    void set_const_NumericStringMatch_SYNTAX(const NumericStringMatch_SYNTAX &);
    const NumericStringMatch_SYNTAX *get_const_NumericStringMatch_SYNTAX() const;
    void set_const_ProtocolInformationMatch_SYNTAX(const ProtocolInformationMatch_SYNTAX &);
    const ProtocolInformationMatch_SYNTAX *get_const_ProtocolInformationMatch_SYNTAX() const;
    void set_const_UiiInUrn_WITH_SYNTAX(const UiiInUrn_WITH_SYNTAX &);
    const UiiInUrn_WITH_SYNTAX *get_const_UiiInUrn_WITH_SYNTAX() const;
    void set_const_NumericStringOrderingMatch_SYNTAX(const NumericStringOrderingMatch_SYNTAX &);
    const NumericStringOrderingMatch_SYNTAX *get_const_NumericStringOrderingMatch_SYNTAX() const;
    void set_const_BooleanMatch_SYNTAX(const BooleanMatch_SYNTAX &);
    const BooleanMatch_SYNTAX *get_const_BooleanMatch_SYNTAX() const;
    void set_const_IntegerMatch_SYNTAX(const IntegerMatch_SYNTAX &);
    const IntegerMatch_SYNTAX *get_const_IntegerMatch_SYNTAX() const;
    void set_const_IntegerOrderingMatch_SYNTAX(const IntegerOrderingMatch_SYNTAX &);
    const IntegerOrderingMatch_SYNTAX *get_const_IntegerOrderingMatch_SYNTAX() const;
    void set_const_OctetStringMatch_SYNTAX(const OctetStringMatch_SYNTAX &);
    const OctetStringMatch_SYNTAX *get_const_OctetStringMatch_SYNTAX() const;
    void set_const_OctetStringOrderingMatch_SYNTAX(const OctetStringOrderingMatch_SYNTAX &);
    const OctetStringOrderingMatch_SYNTAX *get_const_OctetStringOrderingMatch_SYNTAX() const;
    void set_const_UTCTimeMatch_SYNTAX(const UTCTimeMatch_SYNTAX &);
    const UTCTimeMatch_SYNTAX *get_const_UTCTimeMatch_SYNTAX() const;
    void set_const_UTCTimeOrderingMatch_SYNTAX(const UTCTimeOrderingMatch_SYNTAX &);
    const UTCTimeOrderingMatch_SYNTAX *get_const_UTCTimeOrderingMatch_SYNTAX() const;
    void set_const_GeneralizedTimeMatch_SYNTAX(const GeneralizedTimeMatch_SYNTAX &);
    const GeneralizedTimeMatch_SYNTAX *get_const_GeneralizedTimeMatch_SYNTAX() const;
    void set_const_GeneralizedTimeOrderingMatch_SYNTAX(const GeneralizedTimeOrderingMatch_SYNTAX &);
    const GeneralizedTimeOrderingMatch_SYNTAX *get_const_GeneralizedTimeOrderingMatch_SYNTAX() const;
    void set_const_IntegerFirstComponentMatch_SYNTAX(const IntegerFirstComponentMatch_SYNTAX &);
    const IntegerFirstComponentMatch_SYNTAX *get_const_IntegerFirstComponentMatch_SYNTAX() const;
    void set_const_AdministrativeRole_WITH_SYNTAX(const AdministrativeRole_WITH_SYNTAX &);
    const AdministrativeRole_WITH_SYNTAX *get_const_AdministrativeRole_WITH_SYNTAX() const;
    void set_const_CreateTimestamp_WITH_SYNTAX(const CreateTimestamp_WITH_SYNTAX &);
    const CreateTimestamp_WITH_SYNTAX *get_const_CreateTimestamp_WITH_SYNTAX() const;
    void set_const_ModifyTimestamp_WITH_SYNTAX(const ModifyTimestamp_WITH_SYNTAX &);
    const ModifyTimestamp_WITH_SYNTAX *get_const_ModifyTimestamp_WITH_SYNTAX() const;
    void set_const_SubschemaTimestamp_WITH_SYNTAX(const SubschemaTimestamp_WITH_SYNTAX &);
    const SubschemaTimestamp_WITH_SYNTAX *get_const_SubschemaTimestamp_WITH_SYNTAX() const;
    void set_const_HasSubordinates_WITH_SYNTAX(const HasSubordinates_WITH_SYNTAX &);
    const HasSubordinates_WITH_SYNTAX *get_const_HasSubordinates_WITH_SYNTAX() const;
#endif
};

/* Specific PDU classes */

class OSS_PUBLIC OssEncOID_PDU : public ConcretePDU {
public:
    OssEncOID_PDU();
    void set_data(OssEncOID &);
    OssEncOID *get_data() const;
#ifdef OSS_PREALLOCATED_BUFFER_DECODE_SUPPORTED
    void set_const_data(const OssEncOID & d);
    const OssEncOID *get_const_data() const;
#endif
protected:
    OssTypeIndex get_index() const;
};

class OSS_PUBLIC ACSE_apdu_PDU : public ConcretePDU {
public:
    ACSE_apdu_PDU();
    void set_data(ACSE_apdu &);
    ACSE_apdu *get_data() const;
#ifdef OSS_PREALLOCATED_BUFFER_DECODE_SUPPORTED
    void set_const_data(const ACSE_apdu & d);
    const ACSE_apdu *get_const_data() const;
#endif
protected:
    OssTypeIndex get_index() const;
};

class OSS_PUBLIC AE_title_PDU : public ConcretePDU {
public:
    AE_title_PDU();
    void set_data(AE_title &);
    AE_title *get_data() const;
#ifdef OSS_PREALLOCATED_BUFFER_DECODE_SUPPORTED
    void set_const_data(const AE_title & d);
    const AE_title *get_const_data() const;
#endif
protected:
    OssTypeIndex get_index() const;
};

class OSS_PUBLIC CP_type_PDU : public ConcretePDU {
public:
    CP_type_PDU();
    void set_data(CP_type &);
    CP_type *get_data() const;
#ifdef OSS_PREALLOCATED_BUFFER_DECODE_SUPPORTED
    void set_const_data(const CP_type & d);
    const CP_type *get_const_data() const;
#endif
protected:
    OssTypeIndex get_index() const;
};

class OSS_PUBLIC CPC_type_PDU : public ConcretePDU {
public:
    CPC_type_PDU();
    void set_data(CPC_type &);
    CPC_type *get_data() const;
#ifdef OSS_PREALLOCATED_BUFFER_DECODE_SUPPORTED
    void set_const_data(const CPC_type & d);
    const CPC_type *get_const_data() const;
#endif
protected:
    OssTypeIndex get_index() const;
};

class OSS_PUBLIC CPA_PPDU_PDU : public ConcretePDU {
public:
    CPA_PPDU_PDU();
    void set_data(CPA_PPDU &);
    CPA_PPDU *get_data() const;
#ifdef OSS_PREALLOCATED_BUFFER_DECODE_SUPPORTED
    void set_const_data(const CPA_PPDU & d);
    const CPA_PPDU *get_const_data() const;
#endif
protected:
    OssTypeIndex get_index() const;
};

class OSS_PUBLIC CPR_PPDU_PDU : public ConcretePDU {
public:
    CPR_PPDU_PDU();
    void set_data(CPR_PPDU &);
    CPR_PPDU *get_data() const;
#ifdef OSS_PREALLOCATED_BUFFER_DECODE_SUPPORTED
    void set_const_data(const CPR_PPDU & d);
    const CPR_PPDU *get_const_data() const;
#endif
protected:
    OssTypeIndex get_index() const;
};

class OSS_PUBLIC Abort_type_PDU : public ConcretePDU {
public:
    Abort_type_PDU();
    void set_data(Abort_type &);
    Abort_type *get_data() const;
#ifdef OSS_PREALLOCATED_BUFFER_DECODE_SUPPORTED
    void set_const_data(const Abort_type & d);
    const Abort_type *get_const_data() const;
#endif
protected:
    OssTypeIndex get_index() const;
};

class OSS_PUBLIC Typed_data_type_PDU : public ConcretePDU {
public:
    Typed_data_type_PDU();
    void set_data(Typed_data_type &);
    Typed_data_type *get_data() const;
#ifdef OSS_PREALLOCATED_BUFFER_DECODE_SUPPORTED
    void set_const_data(const Typed_data_type & d);
    const Typed_data_type *get_const_data() const;
#endif
protected:
    OssTypeIndex get_index() const;
};

class OSS_PUBLIC RS_PPDU_PDU : public ConcretePDU {
public:
    RS_PPDU_PDU();
    void set_data(RS_PPDU &);
    RS_PPDU *get_data() const;
#ifdef OSS_PREALLOCATED_BUFFER_DECODE_SUPPORTED
    void set_const_data(const RS_PPDU & d);
    const RS_PPDU *get_const_data() const;
#endif
protected:
    OssTypeIndex get_index() const;
};

class OSS_PUBLIC RSA_PPDU_PDU : public ConcretePDU {
public:
    RSA_PPDU_PDU();
    void set_data(RSA_PPDU &);
    RSA_PPDU *get_data() const;
#ifdef OSS_PREALLOCATED_BUFFER_DECODE_SUPPORTED
    void set_const_data(const RSA_PPDU & d);
    const RSA_PPDU *get_const_data() const;
#endif
protected:
    OssTypeIndex get_index() const;
};

class OSS_PUBLIC Reliable_Transfer_APDU_RTSE_apdus_PDU : public ConcretePDU {
public:
    Reliable_Transfer_APDU_RTSE_apdus_PDU();
    void set_data(Reliable_Transfer_APDU_RTSE_apdus &);
    Reliable_Transfer_APDU_RTSE_apdus *get_data() const;
#ifdef OSS_PREALLOCATED_BUFFER_DECODE_SUPPORTED
    void set_const_data(const Reliable_Transfer_APDU_RTSE_apdus & d);
    const Reliable_Transfer_APDU_RTSE_apdus *get_const_data() const;
#endif
protected:
    OssTypeIndex get_index() const;
};

class OSS_PUBLIC Remote_Operations_Abstract_Syntaxes_RTSE_apdus_PDU : public ConcretePDU {
public:
    Remote_Operations_Abstract_Syntaxes_RTSE_apdus_PDU();
    void set_data(Remote_Operations_Abstract_Syntaxes_RTSE_apdus &);
    Remote_Operations_Abstract_Syntaxes_RTSE_apdus *get_data() const;
#ifdef OSS_PREALLOCATED_BUFFER_DECODE_SUPPORTED
    void set_const_data(const Remote_Operations_Abstract_Syntaxes_RTSE_apdus & d);
    const Remote_Operations_Abstract_Syntaxes_RTSE_apdus *get_const_data() const;
#endif
protected:
    OssTypeIndex get_index() const;
};

class OSS_PUBLIC ROSEInvokeIds_PDU : public ConcretePDU {
public:
    ROSEInvokeIds_PDU();
    void set_data(ROSEInvokeIds &);
    ROSEInvokeIds *get_data() const;
#ifdef OSS_PREALLOCATED_BUFFER_DECODE_SUPPORTED
    void set_const_data(const ROSEInvokeIds & d);
    const ROSEInvokeIds *get_const_data() const;
#endif
protected:
    OssTypeIndex get_index() const;
};

class OSS_PUBLIC Reject_PDU : public ConcretePDU {
public:
    Reject_PDU();
    void set_data(Reject &);
    Reject *get_data() const;
#ifdef OSS_PREALLOCATED_BUFFER_DECODE_SUPPORTED
    void set_const_data(const Reject & d);
    const Reject *get_const_data() const;
#endif
protected:
    OssTypeIndex get_index() const;
};

class OSS_PUBLIC NoInvokeId_PDU : public ConcretePDU {
public:
    NoInvokeId_PDU();
    void set_data(NoInvokeId &);
    NoInvokeId *get_data() const;
#ifdef OSS_PREALLOCATED_BUFFER_DECODE_SUPPORTED
    void set_const_data(const NoInvokeId & d);
    const NoInvokeId *get_const_data() const;
#endif
protected:
    OssTypeIndex get_index() const;
};

class OSS_PUBLIC UnboundedDirectoryString_PDU : public ConcretePDU {
public:
    UnboundedDirectoryString_PDU();
    void set_data(UnboundedDirectoryString &);
    UnboundedDirectoryString *get_data() const;
#ifdef OSS_PREALLOCATED_BUFFER_DECODE_SUPPORTED
    void set_const_data(const UnboundedDirectoryString & d);
    const UnboundedDirectoryString *get_const_data() const;
#endif
protected:
    OssTypeIndex get_index() const;
};

class OSS_PUBLIC UniqueIdentifier_PDU : public ConcretePDU {
public:
    UniqueIdentifier_PDU();
    void set_data(UniqueIdentifier &);
    UniqueIdentifier *get_data() const;
#ifdef OSS_PREALLOCATED_BUFFER_DECODE_SUPPORTED
    void set_const_data(const UniqueIdentifier & d);
    const UniqueIdentifier *get_const_data() const;
#endif
protected:
    OssTypeIndex get_index() const;
};

class OSS_PUBLIC UUIDPair_PDU : public ConcretePDU {
public:
    UUIDPair_PDU();
    void set_data(UUIDPair &);
    UUIDPair *get_data() const;
#ifdef OSS_PREALLOCATED_BUFFER_DECODE_SUPPORTED
    void set_const_data(const UUIDPair & d);
    const UUIDPair *get_const_data() const;
#endif
protected:
    OssTypeIndex get_index() const;
};

class OSS_PUBLIC CountryName_PDU : public ConcretePDU {
public:
    CountryName_PDU();
    void set_data(CountryName &);
    CountryName *get_data() const;
#ifdef OSS_PREALLOCATED_BUFFER_DECODE_SUPPORTED
    void set_const_data(const CountryName & d);
    const CountryName *get_const_data() const;
#endif
protected:
    OssTypeIndex get_index() const;
};

class OSS_PUBLIC Guide_PDU : public ConcretePDU {
public:
    Guide_PDU();
    void set_data(Guide &);
    Guide *get_data() const;
#ifdef OSS_PREALLOCATED_BUFFER_DECODE_SUPPORTED
    void set_const_data(const Guide & d);
    const Guide *get_const_data() const;
#endif
protected:
    OssTypeIndex get_index() const;
};

class OSS_PUBLIC EnhancedGuide_PDU : public ConcretePDU {
public:
    EnhancedGuide_PDU();
    void set_data(EnhancedGuide &);
    EnhancedGuide *get_data() const;
#ifdef OSS_PREALLOCATED_BUFFER_DECODE_SUPPORTED
    void set_const_data(const EnhancedGuide & d);
    const EnhancedGuide *get_const_data() const;
#endif
protected:
    OssTypeIndex get_index() const;
};

class OSS_PUBLIC PostalAddress_PDU : public ConcretePDU {
public:
    PostalAddress_PDU();
    void set_data(PostalAddress &);
    PostalAddress *get_data() const;
#ifdef OSS_PREALLOCATED_BUFFER_DECODE_SUPPORTED
    void set_const_data(const PostalAddress & d);
    const PostalAddress *get_const_data() const;
#endif
protected:
    OssTypeIndex get_index() const;
};

class OSS_PUBLIC TelephoneNumber_PDU : public ConcretePDU {
public:
    TelephoneNumber_PDU();
    void set_data(TelephoneNumber &);
    TelephoneNumber *get_data() const;
#ifdef OSS_PREALLOCATED_BUFFER_DECODE_SUPPORTED
    void set_const_data(const TelephoneNumber & d);
    const TelephoneNumber *get_const_data() const;
#endif
protected:
    OssTypeIndex get_index() const;
};

class OSS_PUBLIC TelexNumber_PDU : public ConcretePDU {
public:
    TelexNumber_PDU();
    void set_data(TelexNumber &);
    TelexNumber *get_data() const;
#ifdef OSS_PREALLOCATED_BUFFER_DECODE_SUPPORTED
    void set_const_data(const TelexNumber & d);
    const TelexNumber *get_const_data() const;
#endif
protected:
    OssTypeIndex get_index() const;
};

class OSS_PUBLIC X121Address_PDU : public ConcretePDU {
public:
    X121Address_PDU();
    void set_data(X121Address &);
    X121Address *get_data() const;
#ifdef OSS_PREALLOCATED_BUFFER_DECODE_SUPPORTED
    void set_const_data(const X121Address & d);
    const X121Address *get_const_data() const;
#endif
protected:
    OssTypeIndex get_index() const;
};

class OSS_PUBLIC InternationalISDNNumber_PDU : public ConcretePDU {
public:
    InternationalISDNNumber_PDU();
    void set_data(InternationalISDNNumber &);
    InternationalISDNNumber *get_data() const;
#ifdef OSS_PREALLOCATED_BUFFER_DECODE_SUPPORTED
    void set_const_data(const InternationalISDNNumber & d);
    const InternationalISDNNumber *get_const_data() const;
#endif
protected:
    OssTypeIndex get_index() const;
};

class OSS_PUBLIC DestinationIndicator_PDU : public ConcretePDU {
public:
    DestinationIndicator_PDU();
    void set_data(DestinationIndicator &);
    DestinationIndicator *get_data() const;
#ifdef OSS_PREALLOCATED_BUFFER_DECODE_SUPPORTED
    void set_const_data(const DestinationIndicator & d);
    const DestinationIndicator *get_const_data() const;
#endif
protected:
    OssTypeIndex get_index() const;
};

class OSS_PUBLIC CommunicationsService_PDU : public ConcretePDU {
public:
    CommunicationsService_PDU();
    void set_data(CommunicationsService &);
    CommunicationsService *get_data() const;
#ifdef OSS_PREALLOCATED_BUFFER_DECODE_SUPPORTED
    void set_const_data(const CommunicationsService & d);
    const CommunicationsService *get_const_data() const;
#endif
protected:
    OssTypeIndex get_index() const;
};

class OSS_PUBLIC CommunicationsNetwork_PDU : public ConcretePDU {
public:
    CommunicationsNetwork_PDU();
    void set_data(CommunicationsNetwork &);
    CommunicationsNetwork *get_data() const;
#ifdef OSS_PREALLOCATED_BUFFER_DECODE_SUPPORTED
    void set_const_data(const CommunicationsNetwork & d);
    const CommunicationsNetwork *get_const_data() const;
#endif
protected:
    OssTypeIndex get_index() const;
};

class OSS_PUBLIC PreferredDeliveryMethod_PDU : public ConcretePDU {
public:
    PreferredDeliveryMethod_PDU();
    void set_data(PreferredDeliveryMethod &);
    PreferredDeliveryMethod *get_data() const;
#ifdef OSS_PREALLOCATED_BUFFER_DECODE_SUPPORTED
    void set_const_data(const PreferredDeliveryMethod & d);
    const PreferredDeliveryMethod *get_const_data() const;
#endif
protected:
    OssTypeIndex get_index() const;
};

class OSS_PUBLIC PresentationAddress_PDU : public ConcretePDU {
public:
    PresentationAddress_PDU();
    void set_data(PresentationAddress &);
    PresentationAddress *get_data() const;
#ifdef OSS_PREALLOCATED_BUFFER_DECODE_SUPPORTED
    void set_const_data(const PresentationAddress & d);
    const PresentationAddress *get_const_data() const;
#endif
protected:
    OssTypeIndex get_index() const;
};

class OSS_PUBLIC ProtocolInformation_PDU : public ConcretePDU {
public:
    ProtocolInformation_PDU();
    void set_data(ProtocolInformation &);
    ProtocolInformation *get_data() const;
#ifdef OSS_PREALLOCATED_BUFFER_DECODE_SUPPORTED
    void set_const_data(const ProtocolInformation & d);
    const ProtocolInformation *get_const_data() const;
#endif
protected:
    OssTypeIndex get_index() const;
};

class OSS_PUBLIC NameAndOptionalUID_PDU : public ConcretePDU {
public:
    NameAndOptionalUID_PDU();
    void set_data(NameAndOptionalUID &);
    NameAndOptionalUID *get_data() const;
#ifdef OSS_PREALLOCATED_BUFFER_DECODE_SUPPORTED
    void set_const_data(const NameAndOptionalUID & d);
    const NameAndOptionalUID *get_const_data() const;
#endif
protected:
    OssTypeIndex get_index() const;
};

class OSS_PUBLIC MultipleMatchingLocalities_PDU : public ConcretePDU {
public:
    MultipleMatchingLocalities_PDU();
    void set_data(MultipleMatchingLocalities &);
    MultipleMatchingLocalities *get_data() const;
#ifdef OSS_PREALLOCATED_BUFFER_DECODE_SUPPORTED
    void set_const_data(const MultipleMatchingLocalities & d);
    const MultipleMatchingLocalities *get_const_data() const;
#endif
protected:
    OssTypeIndex get_index() const;
};

class OSS_PUBLIC SubstringAssertion_PDU : public ConcretePDU {
public:
    SubstringAssertion_PDU();
    void set_data(SubstringAssertion &);
    SubstringAssertion *get_data() const;
#ifdef OSS_PREALLOCATED_BUFFER_DECODE_SUPPORTED
    void set_const_data(const SubstringAssertion & d);
    const SubstringAssertion *get_const_data() const;
#endif
protected:
    OssTypeIndex get_index() const;
};

class OSS_PUBLIC CaseIgnoreList_PDU : public ConcretePDU {
public:
    CaseIgnoreList_PDU();
    void set_data(CaseIgnoreList &);
    CaseIgnoreList *get_data() const;
#ifdef OSS_PREALLOCATED_BUFFER_DECODE_SUPPORTED
    void set_const_data(const CaseIgnoreList & d);
    const CaseIgnoreList *get_const_data() const;
#endif
protected:
    OssTypeIndex get_index() const;
};

class OSS_PUBLIC OctetSubstringAssertion_PDU : public ConcretePDU {
public:
    OctetSubstringAssertion_PDU();
    void set_data(OctetSubstringAssertion &);
    OctetSubstringAssertion *get_data() const;
#ifdef OSS_PREALLOCATED_BUFFER_DECODE_SUPPORTED
    void set_const_data(const OctetSubstringAssertion & d);
    const OctetSubstringAssertion *get_const_data() const;
#endif
protected:
    OssTypeIndex get_index() const;
};

class OSS_PUBLIC SequenceMatchType_PDU : public ConcretePDU {
public:
    SequenceMatchType_PDU();
    void set_data(SequenceMatchType &);
    SequenceMatchType *get_data() const;
#ifdef OSS_PREALLOCATED_BUFFER_DECODE_SUPPORTED
    void set_const_data(const SequenceMatchType & d);
    const SequenceMatchType *get_const_data() const;
#endif
protected:
    OssTypeIndex get_index() const;
};

class OSS_PUBLIC WordMatchTypes_PDU : public ConcretePDU {
public:
    WordMatchTypes_PDU();
    void set_data(WordMatchTypes &);
    WordMatchTypes *get_data() const;
#ifdef OSS_PREALLOCATED_BUFFER_DECODE_SUPPORTED
    void set_const_data(const WordMatchTypes & d);
    const WordMatchTypes *get_const_data() const;
#endif
protected:
    OssTypeIndex get_index() const;
};

class OSS_PUBLIC CharacterMatchTypes_PDU : public ConcretePDU {
public:
    CharacterMatchTypes_PDU();
    void set_data(CharacterMatchTypes &);
    CharacterMatchTypes *get_data() const;
#ifdef OSS_PREALLOCATED_BUFFER_DECODE_SUPPORTED
    void set_const_data(const CharacterMatchTypes & d);
    const CharacterMatchTypes *get_const_data() const;
#endif
protected:
    OssTypeIndex get_index() const;
};

class OSS_PUBLIC LanguageContextSyntax_PDU : public ConcretePDU {
public:
    LanguageContextSyntax_PDU();
    void set_data(LanguageContextSyntax &);
    LanguageContextSyntax *get_data() const;
#ifdef OSS_PREALLOCATED_BUFFER_DECODE_SUPPORTED
    void set_const_data(const LanguageContextSyntax & d);
    const LanguageContextSyntax *get_const_data() const;
#endif
protected:
    OssTypeIndex get_index() const;
};

class OSS_PUBLIC TimeSpecification_PDU : public ConcretePDU {
public:
    TimeSpecification_PDU();
    void set_data(TimeSpecification &);
    TimeSpecification *get_data() const;
#ifdef OSS_PREALLOCATED_BUFFER_DECODE_SUPPORTED
    void set_const_data(const TimeSpecification & d);
    const TimeSpecification *get_const_data() const;
#endif
protected:
    OssTypeIndex get_index() const;
};

class OSS_PUBLIC TimeAssertion_PDU : public ConcretePDU {
public:
    TimeAssertion_PDU();
    void set_data(TimeAssertion &);
    TimeAssertion *get_data() const;
#ifdef OSS_PREALLOCATED_BUFFER_DECODE_SUPPORTED
    void set_const_data(const TimeAssertion & d);
    const TimeAssertion *get_const_data() const;
#endif
protected:
    OssTypeIndex get_index() const;
};

class OSS_PUBLIC LocaleContextSyntax_PDU : public ConcretePDU {
public:
    LocaleContextSyntax_PDU();
    void set_data(LocaleContextSyntax &);
    LocaleContextSyntax *get_data() const;
#ifdef OSS_PREALLOCATED_BUFFER_DECODE_SUPPORTED
    void set_const_data(const LocaleContextSyntax & d);
    const LocaleContextSyntax *get_const_data() const;
#endif
protected:
    OssTypeIndex get_index() const;
};

class OSS_PUBLIC AttributeOptionList_PDU : public ConcretePDU {
public:
    AttributeOptionList_PDU();
    void set_data(AttributeOptionList &);
    AttributeOptionList *get_data() const;
#ifdef OSS_PREALLOCATED_BUFFER_DECODE_SUPPORTED
    void set_const_data(const AttributeOptionList & d);
    const AttributeOptionList *get_const_data() const;
#endif
protected:
    OssTypeIndex get_index() const;
};

class OSS_PUBLIC ID_PDU : public ConcretePDU {
public:
    ID_PDU();
    void set_data(ID &);
    ID *get_data() const;
#ifdef OSS_PREALLOCATED_BUFFER_DECODE_SUPPORTED
    void set_const_data(const ID & d);
    const ID *get_const_data() const;
#endif
protected:
    OssTypeIndex get_index() const;
};

class OSS_PUBLIC AttributeValue_PDU : public ConcretePDU {
public:
    AttributeValue_PDU();
    void set_data(AttributeValue &);
    AttributeValue *get_data() const;
#ifdef OSS_PREALLOCATED_BUFFER_DECODE_SUPPORTED
    void set_const_data(const AttributeValue & d);
    const AttributeValue *get_const_data() const;
#endif
protected:
    OssTypeIndex get_index() const;
};

class OSS_PUBLIC ContextAssertion_PDU : public ConcretePDU {
public:
    ContextAssertion_PDU();
    void set_data(ContextAssertion &);
    ContextAssertion *get_data() const;
#ifdef OSS_PREALLOCATED_BUFFER_DECODE_SUPPORTED
    void set_const_data(const ContextAssertion & d);
    const ContextAssertion *get_const_data() const;
#endif
protected:
    OssTypeIndex get_index() const;
};

class OSS_PUBLIC AttributeTypeAssertion_PDU : public ConcretePDU {
public:
    AttributeTypeAssertion_PDU();
    void set_data(AttributeTypeAssertion &);
    AttributeTypeAssertion *get_data() const;
#ifdef OSS_PREALLOCATED_BUFFER_DECODE_SUPPORTED
    void set_const_data(const AttributeTypeAssertion & d);
    const AttributeTypeAssertion *get_const_data() const;
#endif
protected:
    OssTypeIndex get_index() const;
};

class OSS_PUBLIC DistinguishedName_PDU : public ConcretePDU {
public:
    DistinguishedName_PDU();
    void set_data(DistinguishedName &);
    DistinguishedName *get_data() const;
#ifdef OSS_PREALLOCATED_BUFFER_DECODE_SUPPORTED
    void set_const_data(const DistinguishedName & d);
    const DistinguishedName *get_const_data() const;
#endif
protected:
    OssTypeIndex get_index() const;
};

class OSS_PUBLIC SubtreeSpecification_PDU : public ConcretePDU {
public:
    SubtreeSpecification_PDU();
    void set_data(SubtreeSpecification &);
    SubtreeSpecification *get_data() const;
#ifdef OSS_PREALLOCATED_BUFFER_DECODE_SUPPORTED
    void set_const_data(const SubtreeSpecification & d);
    const SubtreeSpecification *get_const_data() const;
#endif
protected:
    OssTypeIndex get_index() const;
};

class OSS_PUBLIC DITStructureRule_PDU : public ConcretePDU {
public:
    DITStructureRule_PDU();
    void set_data(DITStructureRule &);
    DITStructureRule *get_data() const;
#ifdef OSS_PREALLOCATED_BUFFER_DECODE_SUPPORTED
    void set_const_data(const DITStructureRule & d);
    const DITStructureRule *get_const_data() const;
#endif
protected:
    OssTypeIndex get_index() const;
};

class OSS_PUBLIC DITContentRule_PDU : public ConcretePDU {
public:
    DITContentRule_PDU();
    void set_data(DITContentRule &);
    DITContentRule *get_data() const;
#ifdef OSS_PREALLOCATED_BUFFER_DECODE_SUPPORTED
    void set_const_data(const DITContentRule & d);
    const DITContentRule *get_const_data() const;
#endif
protected:
    OssTypeIndex get_index() const;
};

class OSS_PUBLIC DITContextUse_PDU : public ConcretePDU {
public:
    DITContextUse_PDU();
    void set_data(DITContextUse &);
    DITContextUse *get_data() const;
#ifdef OSS_PREALLOCATED_BUFFER_DECODE_SUPPORTED
    void set_const_data(const DITContextUse & d);
    const DITContextUse *get_const_data() const;
#endif
protected:
    OssTypeIndex get_index() const;
};

class OSS_PUBLIC HierarchyLevel_PDU : public ConcretePDU {
public:
    HierarchyLevel_PDU();
    void set_data(HierarchyLevel &);
    HierarchyLevel *get_data() const;
#ifdef OSS_PREALLOCATED_BUFFER_DECODE_SUPPORTED
    void set_const_data(const HierarchyLevel & d);
    const HierarchyLevel *get_const_data() const;
#endif
protected:
    OssTypeIndex get_index() const;
};

class OSS_PUBLIC HierarchyBelow_PDU : public ConcretePDU {
public:
    HierarchyBelow_PDU();
    void set_data(HierarchyBelow &);
    HierarchyBelow *get_data() const;
#ifdef OSS_PREALLOCATED_BUFFER_DECODE_SUPPORTED
    void set_const_data(const HierarchyBelow & d);
    const HierarchyBelow *get_const_data() const;
#endif
protected:
    OssTypeIndex get_index() const;
};

class OSS_PUBLIC Acse_RealizationParameter_PDU : public ConcretePDU {
public:
    Acse_RealizationParameter_PDU();
    void set_data(Acse_RealizationParameter &);
    Acse_RealizationParameter *get_data() const;
#ifdef OSS_PREALLOCATED_BUFFER_DECODE_SUPPORTED
    void set_const_data(const Acse_RealizationParameter & d);
    const Acse_RealizationParameter *get_const_data() const;
#endif
protected:
    OssTypeIndex get_index() const;
};

class OSS_PUBLIC Acse_with_concatenation_RealizationParameter_PDU : public ConcretePDU {
public:
    Acse_with_concatenation_RealizationParameter_PDU();
    void set_data(Acse_with_concatenation_RealizationParameter &);
    Acse_with_concatenation_RealizationParameter *get_data() const;
#ifdef OSS_PREALLOCATED_BUFFER_DECODE_SUPPORTED
    void set_const_data(const Acse_with_concatenation_RealizationParameter & d);
    const Acse_with_concatenation_RealizationParameter *get_const_data() const;
#endif
protected:
    OssTypeIndex get_index() const;
};

class OSS_PUBLIC Association_by_RTSE_RealizationParameter_PDU : public ConcretePDU {
public:
    Association_by_RTSE_RealizationParameter_PDU();
    void set_data(Association_by_RTSE_RealizationParameter &);
    Association_by_RTSE_RealizationParameter *get_data() const;
#ifdef OSS_PREALLOCATED_BUFFER_DECODE_SUPPORTED
    void set_const_data(const Association_by_RTSE_RealizationParameter & d);
    const Association_by_RTSE_RealizationParameter *get_const_data() const;
#endif
protected:
    OssTypeIndex get_index() const;
};

class OSS_PUBLIC PData_RealizationParameter_PDU : public ConcretePDU {
public:
    PData_RealizationParameter_PDU();
    void set_data(PData_RealizationParameter &);
    PData_RealizationParameter *get_data() const;
#ifdef OSS_PREALLOCATED_BUFFER_DECODE_SUPPORTED
    void set_const_data(const PData_RealizationParameter & d);
    const PData_RealizationParameter *get_const_data() const;
#endif
protected:
    OssTypeIndex get_index() const;
};

class OSS_PUBLIC PData_with_concatenation_RealizationParameter_PDU : public ConcretePDU {
public:
    PData_with_concatenation_RealizationParameter_PDU();
    void set_data(PData_with_concatenation_RealizationParameter &);
    PData_with_concatenation_RealizationParameter *get_data() const;
#ifdef OSS_PREALLOCATED_BUFFER_DECODE_SUPPORTED
    void set_const_data(const PData_with_concatenation_RealizationParameter & d);
    const PData_with_concatenation_RealizationParameter *get_const_data() const;
#endif
protected:
    OssTypeIndex get_index() const;
};

class OSS_PUBLIC Transfer_by_RTSE_RealizationParameter_PDU : public ConcretePDU {
public:
    Transfer_by_RTSE_RealizationParameter_PDU();
    void set_data(Transfer_by_RTSE_RealizationParameter &);
    Transfer_by_RTSE_RealizationParameter *get_data() const;
#ifdef OSS_PREALLOCATED_BUFFER_DECODE_SUPPORTED
    void set_const_data(const Transfer_by_RTSE_RealizationParameter & d);
    const Transfer_by_RTSE_RealizationParameter *get_const_data() const;
#endif
protected:
    OssTypeIndex get_index() const;
};

class OSS_PUBLIC BitStringMatch_SYNTAX_PDU : public ConcretePDU {
public:
    BitStringMatch_SYNTAX_PDU();
    void set_data(BitStringMatch_SYNTAX &);
    BitStringMatch_SYNTAX *get_data() const;
#ifdef OSS_PREALLOCATED_BUFFER_DECODE_SUPPORTED
    void set_const_data(const BitStringMatch_SYNTAX & d);
    const BitStringMatch_SYNTAX *get_const_data() const;
#endif
protected:
    OssTypeIndex get_index() const;
};

class OSS_PUBLIC DnQualifier_WITH_SYNTAX_PDU : public ConcretePDU {
public:
    DnQualifier_WITH_SYNTAX_PDU();
    void set_data(DnQualifier_WITH_SYNTAX &);
    DnQualifier_WITH_SYNTAX *get_data() const;
#ifdef OSS_PREALLOCATED_BUFFER_DECODE_SUPPORTED
    void set_const_data(const DnQualifier_WITH_SYNTAX & d);
    const DnQualifier_WITH_SYNTAX *get_const_data() const;
#endif
protected:
    OssTypeIndex get_index() const;
};

class OSS_PUBLIC SerialNumber_WITH_SYNTAX_PDU : public ConcretePDU {
public:
    SerialNumber_WITH_SYNTAX_PDU();
    void set_data(SerialNumber_WITH_SYNTAX &);
    SerialNumber_WITH_SYNTAX *get_data() const;
#ifdef OSS_PREALLOCATED_BUFFER_DECODE_SUPPORTED
    void set_const_data(const SerialNumber_WITH_SYNTAX & d);
    const SerialNumber_WITH_SYNTAX *get_const_data() const;
#endif
protected:
    OssTypeIndex get_index() const;
};

class OSS_PUBLIC NumericStringMatch_SYNTAX_PDU : public ConcretePDU {
public:
    NumericStringMatch_SYNTAX_PDU();
    void set_data(NumericStringMatch_SYNTAX &);
    NumericStringMatch_SYNTAX *get_data() const;
#ifdef OSS_PREALLOCATED_BUFFER_DECODE_SUPPORTED
    void set_const_data(const NumericStringMatch_SYNTAX & d);
    const NumericStringMatch_SYNTAX *get_const_data() const;
#endif
protected:
    OssTypeIndex get_index() const;
};

class OSS_PUBLIC ProtocolInformationMatch_SYNTAX_PDU : public ConcretePDU {
public:
    ProtocolInformationMatch_SYNTAX_PDU();
    void set_data(ProtocolInformationMatch_SYNTAX &);
    ProtocolInformationMatch_SYNTAX *get_data() const;
#ifdef OSS_PREALLOCATED_BUFFER_DECODE_SUPPORTED
    void set_const_data(const ProtocolInformationMatch_SYNTAX & d);
    const ProtocolInformationMatch_SYNTAX *get_const_data() const;
#endif
protected:
    OssTypeIndex get_index() const;
};

class OSS_PUBLIC UiiInUrn_WITH_SYNTAX_PDU : public ConcretePDU {
public:
    UiiInUrn_WITH_SYNTAX_PDU();
    void set_data(UiiInUrn_WITH_SYNTAX &);
    UiiInUrn_WITH_SYNTAX *get_data() const;
#ifdef OSS_PREALLOCATED_BUFFER_DECODE_SUPPORTED
    void set_const_data(const UiiInUrn_WITH_SYNTAX & d);
    const UiiInUrn_WITH_SYNTAX *get_const_data() const;
#endif
protected:
    OssTypeIndex get_index() const;
};

class OSS_PUBLIC NumericStringOrderingMatch_SYNTAX_PDU : public ConcretePDU {
public:
    NumericStringOrderingMatch_SYNTAX_PDU();
    void set_data(NumericStringOrderingMatch_SYNTAX &);
    NumericStringOrderingMatch_SYNTAX *get_data() const;
#ifdef OSS_PREALLOCATED_BUFFER_DECODE_SUPPORTED
    void set_const_data(const NumericStringOrderingMatch_SYNTAX & d);
    const NumericStringOrderingMatch_SYNTAX *get_const_data() const;
#endif
protected:
    OssTypeIndex get_index() const;
};

class OSS_PUBLIC BooleanMatch_SYNTAX_PDU : public ConcretePDU {
public:
    BooleanMatch_SYNTAX_PDU();
    void set_data(BooleanMatch_SYNTAX &);
    BooleanMatch_SYNTAX *get_data() const;
#ifdef OSS_PREALLOCATED_BUFFER_DECODE_SUPPORTED
    void set_const_data(const BooleanMatch_SYNTAX & d);
    const BooleanMatch_SYNTAX *get_const_data() const;
#endif
protected:
    OssTypeIndex get_index() const;
};

class OSS_PUBLIC IntegerMatch_SYNTAX_PDU : public ConcretePDU {
public:
    IntegerMatch_SYNTAX_PDU();
    void set_data(IntegerMatch_SYNTAX &);
    IntegerMatch_SYNTAX *get_data() const;
#ifdef OSS_PREALLOCATED_BUFFER_DECODE_SUPPORTED
    void set_const_data(const IntegerMatch_SYNTAX & d);
    const IntegerMatch_SYNTAX *get_const_data() const;
#endif
protected:
    OssTypeIndex get_index() const;
};

class OSS_PUBLIC IntegerOrderingMatch_SYNTAX_PDU : public ConcretePDU {
public:
    IntegerOrderingMatch_SYNTAX_PDU();
    void set_data(IntegerOrderingMatch_SYNTAX &);
    IntegerOrderingMatch_SYNTAX *get_data() const;
#ifdef OSS_PREALLOCATED_BUFFER_DECODE_SUPPORTED
    void set_const_data(const IntegerOrderingMatch_SYNTAX & d);
    const IntegerOrderingMatch_SYNTAX *get_const_data() const;
#endif
protected:
    OssTypeIndex get_index() const;
};

class OSS_PUBLIC OctetStringMatch_SYNTAX_PDU : public ConcretePDU {
public:
    OctetStringMatch_SYNTAX_PDU();
    void set_data(OctetStringMatch_SYNTAX &);
    OctetStringMatch_SYNTAX *get_data() const;
#ifdef OSS_PREALLOCATED_BUFFER_DECODE_SUPPORTED
    void set_const_data(const OctetStringMatch_SYNTAX & d);
    const OctetStringMatch_SYNTAX *get_const_data() const;
#endif
protected:
    OssTypeIndex get_index() const;
};

class OSS_PUBLIC OctetStringOrderingMatch_SYNTAX_PDU : public ConcretePDU {
public:
    OctetStringOrderingMatch_SYNTAX_PDU();
    void set_data(OctetStringOrderingMatch_SYNTAX &);
    OctetStringOrderingMatch_SYNTAX *get_data() const;
#ifdef OSS_PREALLOCATED_BUFFER_DECODE_SUPPORTED
    void set_const_data(const OctetStringOrderingMatch_SYNTAX & d);
    const OctetStringOrderingMatch_SYNTAX *get_const_data() const;
#endif
protected:
    OssTypeIndex get_index() const;
};

class OSS_PUBLIC UTCTimeMatch_SYNTAX_PDU : public ConcretePDU {
public:
    UTCTimeMatch_SYNTAX_PDU();
    void set_data(UTCTimeMatch_SYNTAX &);
    UTCTimeMatch_SYNTAX *get_data() const;
#ifdef OSS_PREALLOCATED_BUFFER_DECODE_SUPPORTED
    void set_const_data(const UTCTimeMatch_SYNTAX & d);
    const UTCTimeMatch_SYNTAX *get_const_data() const;
#endif
protected:
    OssTypeIndex get_index() const;
};

class OSS_PUBLIC UTCTimeOrderingMatch_SYNTAX_PDU : public ConcretePDU {
public:
    UTCTimeOrderingMatch_SYNTAX_PDU();
    void set_data(UTCTimeOrderingMatch_SYNTAX &);
    UTCTimeOrderingMatch_SYNTAX *get_data() const;
#ifdef OSS_PREALLOCATED_BUFFER_DECODE_SUPPORTED
    void set_const_data(const UTCTimeOrderingMatch_SYNTAX & d);
    const UTCTimeOrderingMatch_SYNTAX *get_const_data() const;
#endif
protected:
    OssTypeIndex get_index() const;
};

class OSS_PUBLIC GeneralizedTimeMatch_SYNTAX_PDU : public ConcretePDU {
public:
    GeneralizedTimeMatch_SYNTAX_PDU();
    void set_data(GeneralizedTimeMatch_SYNTAX &);
    GeneralizedTimeMatch_SYNTAX *get_data() const;
#ifdef OSS_PREALLOCATED_BUFFER_DECODE_SUPPORTED
    void set_const_data(const GeneralizedTimeMatch_SYNTAX & d);
    const GeneralizedTimeMatch_SYNTAX *get_const_data() const;
#endif
protected:
    OssTypeIndex get_index() const;
};

class OSS_PUBLIC GeneralizedTimeOrderingMatch_SYNTAX_PDU : public ConcretePDU {
public:
    GeneralizedTimeOrderingMatch_SYNTAX_PDU();
    void set_data(GeneralizedTimeOrderingMatch_SYNTAX &);
    GeneralizedTimeOrderingMatch_SYNTAX *get_data() const;
#ifdef OSS_PREALLOCATED_BUFFER_DECODE_SUPPORTED
    void set_const_data(const GeneralizedTimeOrderingMatch_SYNTAX & d);
    const GeneralizedTimeOrderingMatch_SYNTAX *get_const_data() const;
#endif
protected:
    OssTypeIndex get_index() const;
};

class OSS_PUBLIC IntegerFirstComponentMatch_SYNTAX_PDU : public ConcretePDU {
public:
    IntegerFirstComponentMatch_SYNTAX_PDU();
    void set_data(IntegerFirstComponentMatch_SYNTAX &);
    IntegerFirstComponentMatch_SYNTAX *get_data() const;
#ifdef OSS_PREALLOCATED_BUFFER_DECODE_SUPPORTED
    void set_const_data(const IntegerFirstComponentMatch_SYNTAX & d);
    const IntegerFirstComponentMatch_SYNTAX *get_const_data() const;
#endif
protected:
    OssTypeIndex get_index() const;
};

class OSS_PUBLIC AdministrativeRole_WITH_SYNTAX_PDU : public ConcretePDU {
public:
    AdministrativeRole_WITH_SYNTAX_PDU();
    void set_data(AdministrativeRole_WITH_SYNTAX &);
    AdministrativeRole_WITH_SYNTAX *get_data() const;
#ifdef OSS_PREALLOCATED_BUFFER_DECODE_SUPPORTED
    void set_const_data(const AdministrativeRole_WITH_SYNTAX & d);
    const AdministrativeRole_WITH_SYNTAX *get_const_data() const;
#endif
protected:
    OssTypeIndex get_index() const;
};

class OSS_PUBLIC CreateTimestamp_WITH_SYNTAX_PDU : public ConcretePDU {
public:
    CreateTimestamp_WITH_SYNTAX_PDU();
    void set_data(CreateTimestamp_WITH_SYNTAX &);
    CreateTimestamp_WITH_SYNTAX *get_data() const;
#ifdef OSS_PREALLOCATED_BUFFER_DECODE_SUPPORTED
    void set_const_data(const CreateTimestamp_WITH_SYNTAX & d);
    const CreateTimestamp_WITH_SYNTAX *get_const_data() const;
#endif
protected:
    OssTypeIndex get_index() const;
};

class OSS_PUBLIC ModifyTimestamp_WITH_SYNTAX_PDU : public ConcretePDU {
public:
    ModifyTimestamp_WITH_SYNTAX_PDU();
    void set_data(ModifyTimestamp_WITH_SYNTAX &);
    ModifyTimestamp_WITH_SYNTAX *get_data() const;
#ifdef OSS_PREALLOCATED_BUFFER_DECODE_SUPPORTED
    void set_const_data(const ModifyTimestamp_WITH_SYNTAX & d);
    const ModifyTimestamp_WITH_SYNTAX *get_const_data() const;
#endif
protected:
    OssTypeIndex get_index() const;
};

class OSS_PUBLIC SubschemaTimestamp_WITH_SYNTAX_PDU : public ConcretePDU {
public:
    SubschemaTimestamp_WITH_SYNTAX_PDU();
    void set_data(SubschemaTimestamp_WITH_SYNTAX &);
    SubschemaTimestamp_WITH_SYNTAX *get_data() const;
#ifdef OSS_PREALLOCATED_BUFFER_DECODE_SUPPORTED
    void set_const_data(const SubschemaTimestamp_WITH_SYNTAX & d);
    const SubschemaTimestamp_WITH_SYNTAX *get_const_data() const;
#endif
protected:
    OssTypeIndex get_index() const;
};

class OSS_PUBLIC HasSubordinates_WITH_SYNTAX_PDU : public ConcretePDU {
public:
    HasSubordinates_WITH_SYNTAX_PDU();
    void set_data(HasSubordinates_WITH_SYNTAX &);
    HasSubordinates_WITH_SYNTAX *get_data() const;
#ifdef OSS_PREALLOCATED_BUFFER_DECODE_SUPPORTED
    void set_const_data(const HasSubordinates_WITH_SYNTAX & d);
    const HasSubordinates_WITH_SYNTAX *get_const_data() const;
#endif
protected:
    OssTypeIndex get_index() const;
};

/* Control object class */

class OSS_PUBLIC UpperBounds_Control : public OssControl {
public:
    UpperBounds_Control();
    UpperBounds_Control(const UpperBounds_Control &);
};


/* External definitions for named values */

extern OSS_PUBLIC const OssEncOID& acse_as_id;

extern OSS_PUBLIC const OssEncOID& aCSE_id;

extern OSS_PUBLIC const OssEncOID& rTSE_abstract_syntax;

extern OSS_PUBLIC const __shared24& noInvokeId;

const OSS_INT32 SelectedAttributeTypes_ub_telephone_number = 32;

const OSS_INT32 SelectedAttributeTypes_ub_telex_number = 14;

const OSS_INT32 SelectedAttributeTypes_ub_country_code = 4;

const OSS_INT32 SelectedAttributeTypes_ub_answerback = 8;

const OSS_INT32 SelectedAttributeTypes_ub_x121_address = 15;

const OSS_INT32 SelectedAttributeTypes_ub_international_isdn_number = 16;

extern OSS_PUBLIC const OssEncOID& id_at_knowledgeInformation;

extern OSS_PUBLIC const OssEncOID& id_at_commonName;

extern OSS_PUBLIC const OssEncOID& id_at_surname;

extern OSS_PUBLIC const OssEncOID& id_at_serialNumber;

extern OSS_PUBLIC const OssEncOID& id_at_countryName;

extern OSS_PUBLIC const OssEncOID& id_at_localityName;

extern OSS_PUBLIC const OssEncOID& id_at_collectiveLocalityName;

extern OSS_PUBLIC const OssEncOID& id_at_stateOrProvinceName;

extern OSS_PUBLIC const OssEncOID& id_at_collectiveStateOrProvinceName;

extern OSS_PUBLIC const OssEncOID& id_at_streetAddress;

extern OSS_PUBLIC const OssEncOID& id_at_collectiveStreetAddress;

extern OSS_PUBLIC const OssEncOID& id_at_organizationName;

extern OSS_PUBLIC const OssEncOID& id_at_collectiveOrganizationName;

extern OSS_PUBLIC const OssEncOID& id_at_organizationalUnitName;

extern OSS_PUBLIC const OssEncOID& id_at_collectiveOrganizationalUnitName;

extern OSS_PUBLIC const OssEncOID& id_at_title;

extern OSS_PUBLIC const OssEncOID& id_at_description;

extern OSS_PUBLIC const OssEncOID& id_at_searchGuide;

extern OSS_PUBLIC const OssEncOID& id_at_businessCategory;

extern OSS_PUBLIC const OssEncOID& id_at_postalAddress;

extern OSS_PUBLIC const OssEncOID& id_at_collectivePostalAddress;

extern OSS_PUBLIC const OssEncOID& id_at_postalCode;

extern OSS_PUBLIC const OssEncOID& id_at_collectivePostalCode;

extern OSS_PUBLIC const OssEncOID& id_at_postOfficeBox;

extern OSS_PUBLIC const OssEncOID& id_at_collectivePostOfficeBox;

extern OSS_PUBLIC const OssEncOID& id_at_physicalDeliveryOfficeName;

extern OSS_PUBLIC const OssEncOID& id_at_collectivePhysicalDeliveryOfficeName;

extern OSS_PUBLIC const OssEncOID& id_at_telephoneNumber;

extern OSS_PUBLIC const OssEncOID& id_at_collectiveTelephoneNumber;

extern OSS_PUBLIC const OssEncOID& id_at_telexNumber;

extern OSS_PUBLIC const OssEncOID& id_at_collectiveTelexNumber;

extern OSS_PUBLIC const OssEncOID& id_at_facsimileTelephoneNumber;

extern OSS_PUBLIC const OssEncOID& id_at_collectiveFacsimileTelephoneNumber;

extern OSS_PUBLIC const OssEncOID& id_at_x121Address;

extern OSS_PUBLIC const OssEncOID& id_at_internationalISDNNumber;

extern OSS_PUBLIC const OssEncOID& id_at_collectiveInternationalISDNNumber;

extern OSS_PUBLIC const OssEncOID& id_at_registeredAddress;

extern OSS_PUBLIC const OssEncOID& id_at_destinationIndicator;

extern OSS_PUBLIC const OssEncOID& id_at_preferredDeliveryMethod;

extern OSS_PUBLIC const OssEncOID& id_at_presentationAddress;

extern OSS_PUBLIC const OssEncOID& id_at_supportedApplicationContext;

extern OSS_PUBLIC const OssEncOID& id_at_member;

extern OSS_PUBLIC const OssEncOID& id_at_owner;

extern OSS_PUBLIC const OssEncOID& id_at_roleOccupant;

extern OSS_PUBLIC const OssEncOID& id_at_seeAlso;

extern OSS_PUBLIC const OssEncOID& id_at_name;

extern OSS_PUBLIC const OssEncOID& id_at_givenName;

extern OSS_PUBLIC const OssEncOID& id_at_initials;

extern OSS_PUBLIC const OssEncOID& id_at_generationQualifier;

extern OSS_PUBLIC const OssEncOID& id_at_uniqueIdentifier;

extern OSS_PUBLIC const OssEncOID& id_at_dnQualifier;

extern OSS_PUBLIC const OssEncOID& id_at_enhancedSearchGuide;

extern OSS_PUBLIC const OssEncOID& id_at_protocolInformation;

extern OSS_PUBLIC const OssEncOID& id_at_distinguishedName;

extern OSS_PUBLIC const OssEncOID& id_at_uniqueMember;

extern OSS_PUBLIC const OssEncOID& id_at_houseIdentifier;

extern OSS_PUBLIC const OssEncOID& id_at_dmdName;

extern OSS_PUBLIC const OssEncOID& id_at_pseudonym;

extern OSS_PUBLIC const OssEncOID& id_at_communicationsService;

extern OSS_PUBLIC const OssEncOID& id_at_communicationsNetwork;

extern OSS_PUBLIC const OssEncOID& id_at_uuidpair;

extern OSS_PUBLIC const OssEncOID& id_at_tagOid;

extern OSS_PUBLIC const OssEncOID& id_at_uiiFormat;

extern OSS_PUBLIC const OssEncOID& id_at_uiiInUrn;

extern OSS_PUBLIC const OssEncOID& id_at_contentUri;

extern OSS_PUBLIC const OssEncOID& id_cat_sequenceMatchType;

extern OSS_PUBLIC const OssEncOID& id_cat_wordMatchType;

extern OSS_PUBLIC const OssEncOID& id_cat_characterMatchTypes;

extern OSS_PUBLIC const OssEncOID& id_cat_selectedContexts;

extern OSS_PUBLIC const OssEncOID& id_not_dSAProblem;

extern OSS_PUBLIC const OssEncOID& id_not_searchServiceProblem;

extern OSS_PUBLIC const OssEncOID& id_not_serviceType;

extern OSS_PUBLIC const OssEncOID& id_not_attributeTypeList;

extern OSS_PUBLIC const OssEncOID& id_not_matchingRuleList;

extern OSS_PUBLIC const OssEncOID& id_not_filterItem;

extern OSS_PUBLIC const OssEncOID& id_not_attributeCombinations;

extern OSS_PUBLIC const OssEncOID& id_not_contextTypeList;

extern OSS_PUBLIC const OssEncOID& id_not_contextList;

extern OSS_PUBLIC const OssEncOID& id_not_contextCombinations;

extern OSS_PUBLIC const OssEncOID& id_not_hierarchySelectList;

extern OSS_PUBLIC const OssEncOID& id_not_searchControlOptionsList;

extern OSS_PUBLIC const OssEncOID& id_not_serviceControlOptionsList;

extern OSS_PUBLIC const OssEncOID& id_not_multipleMatchingLocalities;

extern OSS_PUBLIC const OssEncOID& id_not_proposedRelaxation;

extern OSS_PUBLIC const OssEncOID& id_not_appliedRelaxation;

extern OSS_PUBLIC const OssEncOID& id_pr_targetDsaUnavailable;

extern OSS_PUBLIC const OssEncOID& id_pr_dataSourceUnavailable;

extern OSS_PUBLIC const OssEncOID& id_pr_unidentifiedOperation;

extern OSS_PUBLIC const OssEncOID& id_pr_unavailableOperation;

extern OSS_PUBLIC const OssEncOID& id_pr_searchAttributeViolation;

extern OSS_PUBLIC const OssEncOID& id_pr_searchAttributeCombinationViolation;

extern OSS_PUBLIC const OssEncOID& id_pr_searchValueNotAllowed;

extern OSS_PUBLIC const OssEncOID& id_pr_missingSearchAttribute;

extern OSS_PUBLIC const OssEncOID& id_pr_searchValueViolation;

extern OSS_PUBLIC const OssEncOID& id_pr_attributeNegationViolation;

extern OSS_PUBLIC const OssEncOID& id_pr_searchValueRequired;

extern OSS_PUBLIC const OssEncOID& id_pr_invalidSearchValue;

extern OSS_PUBLIC const OssEncOID& id_pr_searchContextViolation;

extern OSS_PUBLIC const OssEncOID& id_pr_searchContextCombinationViolation;

extern OSS_PUBLIC const OssEncOID& id_pr_missingSearchContext;

extern OSS_PUBLIC const OssEncOID& id_pr_searchContextValueViolation;

extern OSS_PUBLIC const OssEncOID& id_pr_searchContextValueRequired;

extern OSS_PUBLIC const OssEncOID& id_pr_invalidContextSearchValue;

extern OSS_PUBLIC const OssEncOID& id_pr_unsupportedMatchingRule;

extern OSS_PUBLIC const OssEncOID& id_pr_attributeMatchingViolation;

extern OSS_PUBLIC const OssEncOID& id_pr_unsupportedMatchingUse;

extern OSS_PUBLIC const OssEncOID& id_pr_matchingUseViolation;

extern OSS_PUBLIC const OssEncOID& id_pr_hierarchySelectForbidden;

extern OSS_PUBLIC const OssEncOID& id_pr_invalidHierarchySelect;

extern OSS_PUBLIC const OssEncOID& id_pr_unavailableHierarchySelect;

extern OSS_PUBLIC const OssEncOID& id_pr_invalidSearchControlOptions;

extern OSS_PUBLIC const OssEncOID& id_pr_invalidServiceControlOptions;

extern OSS_PUBLIC const OssEncOID& id_pr_searchSubsetViolation;

extern OSS_PUBLIC const OssEncOID& id_pr_unmatchedKeyAttributes;

extern OSS_PUBLIC const OssEncOID& id_pr_ambiguousKeyAttributes;

extern OSS_PUBLIC const OssEncOID& id_pr_unavailableRelaxationLevel;

extern OSS_PUBLIC const OssEncOID& id_pr_emptyHierarchySelection;

extern OSS_PUBLIC const OssEncOID& id_pr_administratorImposedLimit;

extern OSS_PUBLIC const OssEncOID& id_pr_permanentRestriction;

extern OSS_PUBLIC const OssEncOID& id_pr_temporaryRestriction;

extern OSS_PUBLIC const OssEncOID& id_pr_relaxationNotSupported;

extern OSS_PUBLIC const OssEncOID& id_mr_caseIgnoreMatch;

extern OSS_PUBLIC const OssEncOID& id_mr_caseIgnoreOrderingMatch;

extern OSS_PUBLIC const OssEncOID& id_mr_caseIgnoreSubstringsMatch;

extern OSS_PUBLIC const OssEncOID& id_mr_caseExactMatch;

extern OSS_PUBLIC const OssEncOID& id_mr_caseExactOrderingMatch;

extern OSS_PUBLIC const OssEncOID& id_mr_caseExactSubstringsMatch;

extern OSS_PUBLIC const OssEncOID& id_mr_numericStringMatch;

extern OSS_PUBLIC const OssEncOID& id_mr_numericStringOrderingMatch;

extern OSS_PUBLIC const OssEncOID& id_mr_numericStringSubstringsMatch;

extern OSS_PUBLIC const OssEncOID& id_mr_caseIgnoreListMatch;

extern OSS_PUBLIC const OssEncOID& id_mr_caseIgnoreListSubstringsMatch;

extern OSS_PUBLIC const OssEncOID& id_mr_booleanMatch;

extern OSS_PUBLIC const OssEncOID& id_mr_integerMatch;

extern OSS_PUBLIC const OssEncOID& id_mr_integerOrderingMatch;

extern OSS_PUBLIC const OssEncOID& id_mr_bitStringMatch;

extern OSS_PUBLIC const OssEncOID& id_mr_octetStringMatch;

extern OSS_PUBLIC const OssEncOID& id_mr_octetStringOrderingMatch;

extern OSS_PUBLIC const OssEncOID& id_mr_octetStringSubstringsMatch;

extern OSS_PUBLIC const OssEncOID& id_mr_telephoneNumberMatch;

extern OSS_PUBLIC const OssEncOID& id_mr_telephoneNumberSubstringsMatch;

extern OSS_PUBLIC const OssEncOID& id_mr_presentationAddressMatch;

extern OSS_PUBLIC const OssEncOID& id_mr_uniqueMemberMatch;

extern OSS_PUBLIC const OssEncOID& id_mr_protocolInformationMatch;

extern OSS_PUBLIC const OssEncOID& id_mr_uTCTimeMatch;

extern OSS_PUBLIC const OssEncOID& id_mr_uTCTimeOrderingMatch;

extern OSS_PUBLIC const OssEncOID& id_mr_generalizedTimeMatch;

extern OSS_PUBLIC const OssEncOID& id_mr_generalizedTimeOrderingMatch;

extern OSS_PUBLIC const OssEncOID& id_mr_integerFirstComponentMatch;

extern OSS_PUBLIC const OssEncOID& id_mr_objectIdentifierFirstComponentMatch;

extern OSS_PUBLIC const OssEncOID& id_mr_directoryStringFirstComponentMatch;

extern OSS_PUBLIC const OssEncOID& id_mr_wordMatch;

extern OSS_PUBLIC const OssEncOID& id_mr_keywordMatch;

extern OSS_PUBLIC const OssEncOID& id_mr_storedPrefixMatch;

extern OSS_PUBLIC const OssEncOID& id_mr_systemProposedMatch;

extern OSS_PUBLIC const OssEncOID& id_mr_generalWordMatch;

extern OSS_PUBLIC const OssEncOID& id_mr_approximateStringMatch;

extern OSS_PUBLIC const OssEncOID& id_mr_ignoreIfAbsentMatch;

extern OSS_PUBLIC const OssEncOID& id_mr_nullMatch;

extern OSS_PUBLIC const OssEncOID& id_mr_zonalMatch;

extern OSS_PUBLIC const OssEncOID& id_mr_facsimileNumberMatch;

extern OSS_PUBLIC const OssEncOID& id_mr_facsimileNumberSubstringsMatch;

extern OSS_PUBLIC const OssEncOID& id_mr_uuidpairmatch;

extern OSS_PUBLIC const OssEncOID& id_avc_language;

extern OSS_PUBLIC const OssEncOID& id_avc_temporal;

extern OSS_PUBLIC const OssEncOID& id_avc_locale;

extern OSS_PUBLIC const OssEncOID& id_avc_ldapAttributeOption;

extern OSS_PUBLIC const OssEncOID& ds;

extern OSS_PUBLIC const OssEncOID& module;

extern OSS_PUBLIC const OssEncOID& serviceElement;

extern OSS_PUBLIC const OssEncOID& applicationContext;

extern OSS_PUBLIC const OssEncOID& attributeType;

extern OSS_PUBLIC const OssEncOID& attributeSyntax;

extern OSS_PUBLIC const OssEncOID& UsefulDefinitions_objectClass;

extern OSS_PUBLIC const OssEncOID& algorithm;

extern OSS_PUBLIC const OssEncOID& abstractSyntax;

extern OSS_PUBLIC const OssEncOID& dsaOperationalAttribute;

extern OSS_PUBLIC const OssEncOID& matchingRule;

extern OSS_PUBLIC const OssEncOID& knowledgeMatchingRule;

extern OSS_PUBLIC const OssEncOID& nameForm;

extern OSS_PUBLIC const OssEncOID& group;

extern OSS_PUBLIC const OssEncOID& UsefulDefinitions_subentry;

extern OSS_PUBLIC const OssEncOID& operationalAttributeType;

extern OSS_PUBLIC const OssEncOID& operationalBinding;

extern OSS_PUBLIC const OssEncOID& schemaObjectClass;

extern OSS_PUBLIC const OssEncOID& schemaOperationalAttribute;

extern OSS_PUBLIC const OssEncOID& administrativeRoles;

extern OSS_PUBLIC const OssEncOID& accessControlAttribute;

extern OSS_PUBLIC const OssEncOID& rosObject;

extern OSS_PUBLIC const OssEncOID& contract;

extern OSS_PUBLIC const OssEncOID& package;

extern OSS_PUBLIC const OssEncOID& accessControlSchemes;

extern OSS_PUBLIC const OssEncOID& certificateExtension;

extern OSS_PUBLIC const OssEncOID& managementObject;

extern OSS_PUBLIC const OssEncOID& attributeValueContext;

extern OSS_PUBLIC const OssEncOID& idmProtocol;

extern OSS_PUBLIC const OssEncOID& problem;

extern OSS_PUBLIC const OssEncOID& notification;

extern OSS_PUBLIC const OssEncOID& matchingRestriction;

extern OSS_PUBLIC const OssEncOID& controlAttributeType;

extern OSS_PUBLIC const OssEncOID& keyPurposes;

extern OSS_PUBLIC const OssEncOID& usefulDefinitions;

extern OSS_PUBLIC const OssEncOID& informationFramework;

extern OSS_PUBLIC const OssEncOID& directoryAbstractService;

extern OSS_PUBLIC const OssEncOID& distributedOperations;

extern OSS_PUBLIC const OssEncOID& protocolObjectIdentifiers;

extern OSS_PUBLIC const OssEncOID& selectedAttributeTypes;

extern OSS_PUBLIC const OssEncOID& selectedObjectClasses;

extern OSS_PUBLIC const OssEncOID& authenticationFramework;

extern OSS_PUBLIC const OssEncOID& algorithmObjectIdentifiers;

extern OSS_PUBLIC const OssEncOID& directoryObjectIdentifiers;

extern OSS_PUBLIC const OssEncOID& upperBounds;

extern OSS_PUBLIC const OssEncOID& dap;

extern OSS_PUBLIC const OssEncOID& dsp;

extern OSS_PUBLIC const OssEncOID& distributedDirectoryOIDs;

extern OSS_PUBLIC const OssEncOID& directoryShadowOIDs;

extern OSS_PUBLIC const OssEncOID& directoryShadowAbstractService;

extern OSS_PUBLIC const OssEncOID& disp;

extern OSS_PUBLIC const OssEncOID& dop;

extern OSS_PUBLIC const OssEncOID& opBindingManagement;

extern OSS_PUBLIC const OssEncOID& opBindingOIDs;

extern OSS_PUBLIC const OssEncOID& hierarchicalOperationalBindings;

extern OSS_PUBLIC const OssEncOID& dsaOperationalAttributeTypes;

extern OSS_PUBLIC const OssEncOID& schemaAdministration;

extern OSS_PUBLIC const OssEncOID& basicAccessControl;

extern OSS_PUBLIC const OssEncOID& directoryOperationalBindingTypes;

extern OSS_PUBLIC const OssEncOID& certificateExtensions;

extern OSS_PUBLIC const OssEncOID& directoryManagement;

extern OSS_PUBLIC const OssEncOID& enhancedSecurity;

extern OSS_PUBLIC const OssEncOID& iDMProtocolSpecification;

extern OSS_PUBLIC const OssEncOID& directoryIDMProtocols;

extern OSS_PUBLIC const OssEncOID& attributeCertificateDefinitions;

extern OSS_PUBLIC const OssEncOID& serviceAdministration;

extern OSS_PUBLIC const OssEncOID& externalDefinitions;

extern OSS_PUBLIC const OssEncOID& commonProtocolSpecification;

extern OSS_PUBLIC const OssEncOID& oSIProtocolSpecification;

extern OSS_PUBLIC const OssEncOID& directoryOSIProtocols;

extern OSS_PUBLIC const OssEncOID& id_oc;

extern OSS_PUBLIC const OssEncOID& id_at;

extern OSS_PUBLIC const OssEncOID& id_as;

extern OSS_PUBLIC const OssEncOID& id_mr;

extern OSS_PUBLIC const OssEncOID& id_nf;

extern OSS_PUBLIC const OssEncOID& id_sc;

extern OSS_PUBLIC const OssEncOID& id_oa;

extern OSS_PUBLIC const OssEncOID& id_ob;

extern OSS_PUBLIC const OssEncOID& id_doa;

extern OSS_PUBLIC const OssEncOID& id_kmr;

extern OSS_PUBLIC const OssEncOID& id_soc;

extern OSS_PUBLIC const OssEncOID& id_soa;

extern OSS_PUBLIC const OssEncOID& id_ar;

extern OSS_PUBLIC const OssEncOID& id_aca;

extern OSS_PUBLIC const OssEncOID& id_ac;

extern OSS_PUBLIC const OssEncOID& id_rosObject;

extern OSS_PUBLIC const OssEncOID& id_contract;

extern OSS_PUBLIC const OssEncOID& id_package;

extern OSS_PUBLIC const OssEncOID& id_acScheme;

extern OSS_PUBLIC const OssEncOID& id_ce;

extern OSS_PUBLIC const OssEncOID& id_mgt;

extern OSS_PUBLIC const OssEncOID& id_avc;

extern OSS_PUBLIC const OssEncOID& id_idm;

extern OSS_PUBLIC const OssEncOID& id_pr;

extern OSS_PUBLIC const OssEncOID& id_not;

extern OSS_PUBLIC const OssEncOID& id_mre;

extern OSS_PUBLIC const OssEncOID& id_cat;

extern OSS_PUBLIC const OssEncOID& id_kp;

extern OSS_PUBLIC const OssEncOID& distributedDirectoryObjectIdentifiers;

extern OSS_PUBLIC const OssEncOID& id_oc_top;

extern OSS_PUBLIC const OssEncOID& id_oc_alias;

extern OSS_PUBLIC const OssEncOID& id_oc_parent;

extern OSS_PUBLIC const OssEncOID& id_oc_child;

extern OSS_PUBLIC const OssEncOID& id_at_objectClass;

extern OSS_PUBLIC const OssEncOID& id_at_aliasedEntryName;

extern OSS_PUBLIC const OssEncOID& id_mr_objectIdentifierMatch;

extern OSS_PUBLIC const OssEncOID& id_mr_distinguishedNameMatch;

extern OSS_PUBLIC const OssEncOID& id_oa_excludeAllCollectiveAttributes;

extern OSS_PUBLIC const OssEncOID& id_oa_createTimestamp;

extern OSS_PUBLIC const OssEncOID& id_oa_modifyTimestamp;

extern OSS_PUBLIC const OssEncOID& id_oa_creatorsName;

extern OSS_PUBLIC const OssEncOID& id_oa_modifiersName;

extern OSS_PUBLIC const OssEncOID& id_oa_administrativeRole;

extern OSS_PUBLIC const OssEncOID& id_oa_subtreeSpecification;

extern OSS_PUBLIC const OssEncOID& id_oa_collectiveExclusions;

extern OSS_PUBLIC const OssEncOID& id_oa_subschemaTimestamp;

extern OSS_PUBLIC const OssEncOID& id_oa_hasSubordinates;

extern OSS_PUBLIC const OssEncOID& id_oa_subschemaSubentryList;

extern OSS_PUBLIC const OssEncOID& id_oa_accessControlSubentryList;

extern OSS_PUBLIC const OssEncOID& id_oa_collectiveAttributeSubentryList;

extern OSS_PUBLIC const OssEncOID& id_oa_contextDefaultSubentryList;

extern OSS_PUBLIC const OssEncOID& id_oa_contextAssertionDefault;

extern OSS_PUBLIC const OssEncOID& id_oa_serviceAdminSubentryList;

extern OSS_PUBLIC const OssEncOID& id_oa_searchRules;

extern OSS_PUBLIC const OssEncOID& id_oa_hierarchyLevel;

extern OSS_PUBLIC const OssEncOID& id_oa_hierarchyBelow;

extern OSS_PUBLIC const OssEncOID& id_oa_hierarchyParent;

extern OSS_PUBLIC const OssEncOID& id_oa_hierarchyTop;

extern OSS_PUBLIC const OssEncOID& id_oa_allAttributeTypes;

extern OSS_PUBLIC const OssEncOID& id_sc_subentry;

extern OSS_PUBLIC const OssEncOID& id_sc_accessControlSubentry;

extern OSS_PUBLIC const OssEncOID& id_sc_collectiveAttributeSubentry;

extern OSS_PUBLIC const OssEncOID& id_sc_contextAssertionSubentry;

extern OSS_PUBLIC const OssEncOID& id_sc_serviceAdminSubentry;

extern OSS_PUBLIC const OssEncOID& id_nf_subentryNameForm;

extern OSS_PUBLIC const OssEncOID& id_ar_autonomousArea;

extern OSS_PUBLIC const OssEncOID& id_ar_accessControlSpecificArea;

extern OSS_PUBLIC const OssEncOID& id_ar_accessControlInnerArea;

extern OSS_PUBLIC const OssEncOID& id_ar_subschemaAdminSpecificArea;

extern OSS_PUBLIC const OssEncOID& id_ar_collectiveAttributeSpecificArea;

extern OSS_PUBLIC const OssEncOID& id_ar_collectiveAttributeInnerArea;

extern OSS_PUBLIC const OssEncOID& id_ar_contextDefaultSpecificArea;

extern OSS_PUBLIC const OssEncOID& id_ar_serviceSpecificArea;

const OSS_INT32 UpperBounds_ub_answerback = 8;

const OSS_INT32 ub_business_category = 128;

const OSS_INT32 ub_common_name = 64;

const OSS_INT32 ub_content = 32768;

const OSS_INT32 UpperBounds_ub_country_code = 4;

const OSS_INT32 ub_description = 1024;

const OSS_INT32 ub_destination_indicator = 128;

const OSS_INT32 ub_directory_string_first_component_match = 32768;

const OSS_INT32 ub_domainLocalID = 64;

const OSS_INT32 UpperBounds_ub_international_isdn_number = 16;

const OSS_INT32 ub_knowledge_information = 32768;

const OSS_INT32 ub_localeContextSyntax = 128;

const OSS_INT32 ub_locality_name = 128;

const OSS_INT32 ub_match = 128;

const OSS_INT32 ub_name = 64;

const OSS_INT32 ub_organization_name = 64;

const OSS_INT32 ub_organizational_unit_name = 64;

const OSS_INT32 ub_physical_office_name = 128;

const OSS_INT32 ub_post_office_box = 40;

const OSS_INT32 ub_postal_code = 40;

const OSS_INT32 ub_postal_line = 6;

const OSS_INT32 ub_postal_string = 30;

const OSS_INT32 ub_privacy_mark_length = 128;

const OSS_INT32 ub_pseudonym = 128;

const OSS_INT32 ub_schema = 1024;

const OSS_INT32 ub_search = 32768;

const OSS_INT32 ub_serial_number = 64;

const OSS_INT32 ub_state_name = 128;

const OSS_INT32 ub_street_address = 128;

const OSS_INT32 ub_surname = 64;

const OSS_INT32 ub_tag = 64;

const OSS_INT32 UpperBounds_ub_telephone_number = 32;

const OSS_INT32 ub_teletex_terminal_id = 1024;

const OSS_INT32 UpperBounds_ub_telex_number = 14;

const OSS_INT32 ub_title = 64;

const OSS_INT32 ub_user_password = 128;

const OSS_INT32 UpperBounds_ub_x121_address = 15;

} // namespace ASN

#endif // OSS_UpperBounds
