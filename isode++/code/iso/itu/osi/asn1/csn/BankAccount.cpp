/*************************************************************/
/* Copyright (C) 2014 OSS Nokalva, Inc.  All rights reserved.*/
/*************************************************************/

/* THIS FILE IS PROPRIETARY MATERIAL OF OSS NOKALVA, INC.
 * AND MAY BE USED ONLY BY DIRECT LICENSEES OF OSS NOKALVA, INC.
 * THIS FILE MAY NOT BE DISTRIBUTED. */

/* This file was generated by a TRIAL version of the OSS ASN.1 Tools.
 * Applications built using this file can be executed only on the machine
 * on which you run the OSS ASN.1 compiler. */

/* Generated for: Kampbell (Trial), License: 70040Z. */
/* Abstract syntax: Remote_Operations_Useful_Definitions */
/* Created: Wed Dec 24 13:30:20 2014 */
/* ASN.1/C++ compiler version: 6.0 */
/* Code generated for runtime version 6.0 or later */
/* Compiler operating system: Windows */
/* Compiler machine type: Intel x86 */
/* Target operating system: Windows */
/* Target machine type: Intel x86 */
/* C++ compiler options required: -Zp8 (Microsoft) */
/* ASN.1 compiler options and file names specified:
 * -output Z:/git/ISO.ITU.OSI/cpp/src/iso/itu/osi/asn1/csn\BankAccount
 * -modlistingfile
 * Z:/git/ISO.ITU.OSI/cpp/src/iso/itu/osi/asn1/csn\BankAccount.lst
 * -gendirectives
 * Z:/git/ISO.ITU.OSI/cpp/src/iso/itu/osi/asn1/csn\BankAccount.gen -2008 -per
 * -ber -der -root -messageFormat msvc -namespace BankAccount
 * -allow universaltags
 * Z:/git/ISO.ITU.OSI/cpp/src/iso/itu/osi/asn1/asn/BankAccount.asn
 * Z:/git/ISO.ITU.OSI/cpp/src/iso/itu/osi/asn1/asn/Remote-Operations-Information-Objects.asn
 * Z:/git/ISO.ITU.OSI/cpp/src/iso/itu/osi/asn1/asn/Remote-Operations-Generic-ROS-PDUs.asn
 * Z:/git/ISO.ITU.OSI/cpp/src/iso/itu/osi/asn1/asn/Remote-Operations-Realizations.asn
 * Z:/git/ISO.ITU.OSI/cpp/src/iso/itu/osi/asn1/asn/Remote-Operations-Abstract-Syntaxes.asn
 * Z:/git/ISO.ITU.OSI/cpp/src/iso/itu/osi/asn1/asn/Remote-Operations-Information-Objects-extensions.asn
 * Z:/git/ISO.ITU.OSI/cpp/src/iso/itu/osi/asn1/asn/Remote-Operations-Useful-Definitions.asn
 */

#define OSS_COMPILER_API_LEVEL 31
#define _OSS_CODE_FILE
#define OSS_TOED_BER
#define OSS_TOED_PER
#include "BankAccount.h"
#include "string.h"

#include "osstype.h"

#if OSSDEBUG > 1
#define OSS_CNTX_INIT _Context_Element _element;  _element._occurrence = 0;
#define OSS_CNTX_INITZERO _Context_Element _element = {NULL, NULL, 0};
#define OSS_CNTX_ZEROOCC  _element._occurrence = 0;
#define OSS_CNTX_INCOCC  _element._occurrence++;
#define OSS_CNTX_SETOCC(OCC) _element._occurrence = OCC;
#define OSS_CNTX_DEF _Context_Element _element;
#define OSS_CNTX_POP(OSSCNAME) OSSCNAME->_oss_context_anchor._last = _element._parent;
#define OSS_CNTX_PUSH(OSSCNAME,CNTXID) _element._id = (_Context_Id *)&_context_id[CNTXID];\
    _element._parent = OSSCNAME->_oss_context_anchor._last;\
    OSSCNAME->_oss_context_anchor._last = &_element;
#define OSS_CNTX_SET(CNTXID) _element._id = (_Context_Id *)&_context_id[CNTXID];
#define OSS_CNTX_NEW(OSSCNAME,CNTXID) _Context_Element _element;\
    _element._occurrence = 0;\
    _element._id = (_Context_Id *)&_context_id[CNTXID];\
    _element._parent = OSSCNAME->_oss_context_anchor._last;\
    OSSCNAME->_oss_context_anchor._last = &_element;
#define OSS_CNTX_ANCHOR_SET(PDU,CNTXID) \
    _element._parent = _oss_c->_oss_context_anchor._last;\
    _element._id = (_Context_Id *)&_context_id[CNTXID];\
    _oss_c->_oss_context_anchor._last = &_element;\
    if (!_oss_c->_oss_context_anchor._pdu_number) {\
        _oss_c->_oss_context_anchor._pdu_number = PDU;\
        _oss_c->_oss_context_anchor._pdu_id = _element._id;\
    }
#define OSS_CNTX_OSSC_DEF _EncDecGlobals *_oss_c = (_EncDecGlobals *)_g->encDecVar;
#else
#define OSS_CNTX_INIT
#define OSS_CNTX_INITZERO
#define OSS_CNTX_ZEROOCC
#define OSS_CNTX_INCOCC
#define OSS_CNTX_SETOCC(OCC)
#define OSS_CNTX_DEF
#define OSS_CNTX_POP(OSSCNAME)
#define OSS_CNTX_PUSH(OSSCNAME,CNTXID)
#define OSS_CNTX_SET(CNTXID)
#define OSS_CNTX_NEW(OSSCNAME,CNTXID)
#define OSS_CNTX_ANCHOR_SET(PDU,CNTXID) _oss_c->_oss_context_anchor._pdu_number = 0;
#endif
using namespace BankAccount;
namespace BankAccount {

/* Control table object */

class Remote_Operations_Useful_Definitions_TableType : public OssControlTable {
public:
    static void *internal;
    Remote_Operations_Useful_Definitions_TableType();
    int destroy(void *data, OssTypeIndex typeindex);
    int copy(void *src, void **dst, OssTypeIndex typeindex);
    int equal(void *data1, void *data2, OssTypeIndex typeindex);
};

Remote_Operations_Useful_Definitions_TableType::Remote_Operations_Useful_Definitions_TableType() : OssControlTable(internal) {
}

int Remote_Operations_Useful_Definitions_TableType::destroy(void *data, OssTypeIndex typeindex) {
    switch (typeindex) {
	case 1:
	    asn1Free(data);
	    break;
	case 2:
	    delete (Decimal *)data;
	    break;
	case 3:
	    asn1Free(data);
	    break;
	case 4:
	    delete (NoInvokeId *)data;
	    break;
	case 5:
	    delete (ROSEInvokeIds *)data;
	    break;
	case 6:
	    delete (Acse_RealizationParameter *)data;
	    break;
	case 7:
	    delete (Acse_with_concatenation_RealizationParameter *)data;
	    break;
	case 8:
	    delete (Association_by_RTSE_RealizationParameter *)data;
	    break;
	case 9:
	    delete (PData_RealizationParameter *)data;
	    break;
	case 10:
	    delete (PData_with_concatenation_RealizationParameter *)data;
	    break;
	case 11:
	    delete (Transfer_by_RTSE_RealizationParameter *)data;
	    break;
	default:
	    return oss_call_error(OSS_UNKNOWN_TYPE);
    }
    return 0;
}

int Remote_Operations_Useful_Definitions_TableType::copy(void *src, void **dst, OssTypeIndex typeindex) {
    switch (typeindex) {
	case 1:
	    *dst = osscppMalloc(sizeof(Teller));
	    if (*dst)
		**(Teller **)dst = *(Teller *)src;
	    break;
	case 2:
	    *dst = new Decimal(*(Decimal *)src);
	    break;
	case 3:
	    *dst = osscppMalloc(sizeof(SecurityProblem));
	    if (*dst)
		**(SecurityProblem **)dst = *(SecurityProblem *)src;
	    break;
	case 4:
	    *dst = new NoInvokeId(*(NoInvokeId *)src);
	    break;
	case 5:
	    *dst = new ROSEInvokeIds(*(ROSEInvokeIds *)src);
	    break;
	case 6:
	    *dst = new Acse_RealizationParameter(*(Acse_RealizationParameter *)src);
	    break;
	case 7:
	    *dst = new Acse_with_concatenation_RealizationParameter(*(Acse_with_concatenation_RealizationParameter *)src);
	    break;
	case 8:
	    *dst = new Association_by_RTSE_RealizationParameter(*(Association_by_RTSE_RealizationParameter *)src);
	    break;
	case 9:
	    *dst = new PData_RealizationParameter(*(PData_RealizationParameter *)src);
	    break;
	case 10:
	    *dst = new PData_with_concatenation_RealizationParameter(*(PData_with_concatenation_RealizationParameter *)src);
	    break;
	case 11:
	    *dst = new Transfer_by_RTSE_RealizationParameter(*(Transfer_by_RTSE_RealizationParameter *)src);
	    break;
	default:
	    return oss_call_error(OSS_UNKNOWN_TYPE);
    }
    if (*dst == 0)
	return OSS_NO_MEMORY;
    return 0;
}

int Remote_Operations_Useful_Definitions_TableType::equal(void *data1, void *data2, OssTypeIndex typeindex) {
    switch (typeindex) {
	case 1:
	    return *(Teller *)data1 == *(Teller *)data2;
	case 2:
	    return *(Decimal *)data1 == *(Decimal *)data2;
	case 3:
	    return *(SecurityProblem *)data1 == *(SecurityProblem *)data2;
	case 4:
	    return *(NoInvokeId *)data1 == *(NoInvokeId *)data2;
	case 5:
	    return *(ROSEInvokeIds *)data1 == *(ROSEInvokeIds *)data2;
	case 6:
	    return *(Acse_RealizationParameter *)data1 == *(Acse_RealizationParameter *)data2;
	case 7:
	    return *(Acse_with_concatenation_RealizationParameter *)data1 == *(Acse_with_concatenation_RealizationParameter *)data2;
	case 8:
	    return *(Association_by_RTSE_RealizationParameter *)data1 == *(Association_by_RTSE_RealizationParameter *)data2;
	case 9:
	    return *(PData_RealizationParameter *)data1 == *(PData_RealizationParameter *)data2;
	case 10:
	    return *(PData_with_concatenation_RealizationParameter *)data1 == *(PData_with_concatenation_RealizationParameter *)data2;
	case 11:
	    return *(Transfer_by_RTSE_RealizationParameter *)data1 == *(Transfer_by_RTSE_RealizationParameter *)data2;
    }
    return 0;
}

static Remote_Operations_Useful_Definitions_TableType Remote_Operations_Useful_Definitions_Table;

/* Representation types */

void *__shared2::operator new(size_t size) {
    return ossNewFunc(size);
}

void __shared2::operator delete(void *ptr) {
    asn1Free(ptr);
}

__shared2::__shared2() {
    memset(this, 0, sizeof(__shared2));
}

__shared2::__shared2(const __shared2 & that) {
    OSSTRY {
	name_field = that.name_field;
	code_field = that.code_field;
    } OSSCLEAN(__shared2)
}

__shared2::__shared2(const name & name_val, code code_val) {
    OSSTRY {
	name_field = name_val;
	code_field = code_val;
    } OSSCLEAN(__shared2)
}

__shared2 & __shared2::operator = (const __shared2 & that) {
    if (this == &that)
	return *this;
    name_field = that.name_field;
    code_field = that.code_field;
    return *this;
}

int __shared2::operator == (const __shared2 & that) const {
    if (name_field != that.name_field)
	return 0;
    if (code_field != that.code_field)
	return 0;
    return 1;
}

int __shared2::operator != (const __shared2 & that) const {
    return !(operator ==(that));
}

__shared2::name & __shared2::get_name() {
    return name_field;
}

const __shared2::name & __shared2::get_name() const {
    return name_field;
}

void __shared2::set_name(const name & name_val) {
    name_field = name_val;
}

__shared2::code & __shared2::get_code() {
    return code_field;
}

__shared2::code __shared2::get_code() const {
    return code_field;
}

void __shared2::set_code(code code_val) {
    code_field = code_val;
}

__shared3::__shared3() {
    memset(this, 0, sizeof(__shared3));
}

__shared3::__shared3(const __shared3 & that) {
    memset(this, 0, sizeof(__shared3));
    operator =(that);
}

__shared3 & __shared3::operator = (const __shared3 & that) {
    if (this == &that)
	return *this;
    _choice = that._choice;
    switch (_choice) {
	case present_chosen:
	    *(present *)&present_field = *(present *)&that.present_field;
	    break;
	case absent_chosen:
	    *(absent *)&absent_field = *(absent *)&that.absent_field;
	    break;
    }
    return *this;
}

int __shared3::operator == (const __shared3 & that) const {
    if (_choice != that._choice)
	return 0;
    switch (_choice) {
	case present_chosen:
	    return *(present *)&present_field == *(present *)&that.present_field;
	case absent_chosen:
	    return *(absent *)&absent_field == *(absent *)&that.absent_field;
    }

    return 1;
}

int __shared3::operator != (const __shared3 & that) const {
    return !(operator ==(that));
}

__shared3::present *__shared3::get_present() {
    if (_choice == present_chosen)
	return (present *)&present_field;
    else
	return 0;
}

const __shared3::present *__shared3::get_present() const {
    if (_choice == present_chosen)
	return (const present *)&present_field;
    else
	return 0;
}

void __shared3::set_present(present present_val) {
    *(present *)&present_field = present_val;
    _choice = present_chosen;
}

__shared3::absent *__shared3::get_absent() {
    if (_choice == absent_chosen)
	return (absent *)&absent_field;
    else
	return 0;
}

const __shared3::absent *__shared3::get_absent() const {
    if (_choice == absent_chosen)
	return (const absent *)&absent_field;
    else
	return 0;
}

void __shared3::set_absent(absent absent_val) {
    *(absent *)&absent_field = absent_val;
    _choice = absent_chosen;
}

void *__shared4::operator new(size_t size) {
    return ossNewFunc(size);
}

void __shared4::operator delete(void *ptr) {
    asn1Free(ptr);
}

__shared4::__shared4() {
    memset(this, 0, sizeof(__shared4));
}

__shared4::__shared4(const __shared4 & that) {
    OSSTRY {
	account_field = that.account_field;
	amount_field = that.amount_field;
    } OSSCLEAN(__shared4)
}

__shared4::__shared4(account account_val, amount amount_val) {
    OSSTRY {
	account_field = account_val;
	amount_field = amount_val;
    } OSSCLEAN(__shared4)
}

__shared4 & __shared4::operator = (const __shared4 & that) {
    if (this == &that)
	return *this;
    account_field = that.account_field;
    amount_field = that.amount_field;
    return *this;
}

int __shared4::operator == (const __shared4 & that) const {
    if (account_field != that.account_field)
	return 0;
    if (amount_field != that.amount_field)
	return 0;
    return 1;
}

int __shared4::operator != (const __shared4 & that) const {
    return !(operator ==(that));
}

__shared4::account & __shared4::get_account() {
    return account_field;
}

__shared4::account __shared4::get_account() const {
    return account_field;
}

void __shared4::set_account(account account_val) {
    account_field = account_val;
}

__shared4::amount & __shared4::get_amount() {
    return amount_field;
}

__shared4::amount __shared4::get_amount() const {
    return amount_field;
}

void __shared4::set_amount(amount amount_val) {
    amount_field = amount_val;
}

void *Decimal::operator new(size_t size) {
    return ossNewFunc(size);
}

void Decimal::operator delete(void *ptr) {
    asn1Free(ptr);
}

Decimal::Decimal() {
    memset(this, 0, sizeof(Decimal));
}

Decimal::Decimal(const Decimal & that) {
    OSSTRY {
	mantisse_field = that.mantisse_field;
	decimal_field = that.decimal_field;
    } OSSCLEAN(Decimal)
}

Decimal::Decimal(mantisse mantisse_val, decimal decimal_val) {
    OSSTRY {
	mantisse_field = mantisse_val;
	decimal_field = decimal_val;
    } OSSCLEAN(Decimal)
}

Decimal & Decimal::operator = (const Decimal & that) {
    if (this == &that)
	return *this;
    mantisse_field = that.mantisse_field;
    decimal_field = that.decimal_field;
    return *this;
}

int Decimal::operator == (const Decimal & that) const {
    if (mantisse_field != that.mantisse_field)
	return 0;
    if (decimal_field != that.decimal_field)
	return 0;
    return 1;
}

int Decimal::operator != (const Decimal & that) const {
    return !(operator ==(that));
}

Decimal::mantisse & Decimal::get_mantisse() {
    return mantisse_field;
}

Decimal::mantisse Decimal::get_mantisse() const {
    return mantisse_field;
}

void Decimal::set_mantisse(mantisse mantisse_val) {
    mantisse_field = mantisse_val;
}

Decimal::decimal & Decimal::get_decimal() {
    return decimal_field;
}

Decimal::decimal Decimal::get_decimal() const {
    return decimal_field;
}

void Decimal::set_decimal(decimal decimal_val) {
    decimal_field = decimal_val;
}

Code::Code() {
    memset(this, 0, sizeof(Code));
}

Code::Code(const Code & that) {
    memset(this, 0, sizeof(Code));
    operator =(that);
}

Code::~Code() {
    cleanup();
}

Code & Code::operator = (const Code & that) {
    if (this == &that)
	return *this;
    cleanup();
    _choice = that._choice;
    switch (_choice) {
	case local_chosen:
	    *(local *)&local_field = *(local *)&that.local_field;
	    break;
	case global_chosen:
	    *(global *)&global_field = *(global *)&that.global_field;
	    break;
    }
    return *this;
}

int Code::operator == (const Code & that) const {
    if (_choice != that._choice)
	return 0;
    switch (_choice) {
	case local_chosen:
	    return *(local *)&local_field == *(local *)&that.local_field;
	case global_chosen:
	    return *(global *)&global_field == *(global *)&that.global_field;
    }

    return 1;
}

int Code::operator != (const Code & that) const {
    return !(operator ==(that));
}

Code::local *Code::get_local() {
    if (_choice == local_chosen)
	return (local *)&local_field;
    else
	return 0;
}

const Code::local *Code::get_local() const {
    if (_choice == local_chosen)
	return (const local *)&local_field;
    else
	return 0;
}

void Code::set_local(local local_val) {
    cleanup();
    *(local *)&local_field = local_val;
    _choice = local_chosen;
}

Code::global *Code::get_global() {
    if (_choice == global_chosen)
	return (global *)&global_field;
    else
	return 0;
}

const Code::global *Code::get_global() const {
    if (_choice == global_chosen)
	return (const global *)&global_field;
    else
	return 0;
}

void Code::set_global(const global & global_val) {
    cleanup();
    *(global *)&global_field = global_val;
    _choice = global_chosen;
}

void Code::cleanup() {
    switch (_choice) {
	case local_chosen:
	    break;
	case global_chosen:
	    ((global *)&global_field)->~OssEncOID();
	    break;
    }
    memset(this, 0, sizeof(*this));
}

__choice1::__choice1() {
    memset(this, 0, sizeof(__choice1));
}

__choice1::__choice1(const __choice1 & that) {
    memset(this, 0, sizeof(__choice1));
    operator =(that);
}

__choice1 & __choice1::operator = (const __choice1 & that) {
    if (this == &that)
	return *this;
    _choice = that._choice;
    switch (_choice) {
	case general_chosen:
	    *(general *)&general_field = *(general *)&that.general_field;
	    break;
	case invoke_chosen:
	    *(invoke *)&invoke_field = *(invoke *)&that.invoke_field;
	    break;
	case returnResult_chosen:
	    *(returnResult *)&returnResult_field = *(returnResult *)&that.returnResult_field;
	    break;
	case returnError_chosen:
	    *(returnError *)&returnError_field = *(returnError *)&that.returnError_field;
	    break;
    }
    return *this;
}

int __choice1::operator == (const __choice1 & that) const {
    if (_choice != that._choice)
	return 0;
    switch (_choice) {
	case general_chosen:
	    return *(general *)&general_field == *(general *)&that.general_field;
	case invoke_chosen:
	    return *(invoke *)&invoke_field == *(invoke *)&that.invoke_field;
	case returnResult_chosen:
	    return *(returnResult *)&returnResult_field == *(returnResult *)&that.returnResult_field;
	case returnError_chosen:
	    return *(returnError *)&returnError_field == *(returnError *)&that.returnError_field;
    }

    return 1;
}

int __choice1::operator != (const __choice1 & that) const {
    return !(operator ==(that));
}

__choice1::general *__choice1::get_general() {
    if (_choice == general_chosen)
	return (general *)&general_field;
    else
	return 0;
}

const __choice1::general *__choice1::get_general() const {
    if (_choice == general_chosen)
	return (const general *)&general_field;
    else
	return 0;
}

void __choice1::set_general(general general_val) {
    *(general *)&general_field = general_val;
    _choice = general_chosen;
}

__choice1::invoke *__choice1::get_invoke() {
    if (_choice == invoke_chosen)
	return (invoke *)&invoke_field;
    else
	return 0;
}

const __choice1::invoke *__choice1::get_invoke() const {
    if (_choice == invoke_chosen)
	return (const invoke *)&invoke_field;
    else
	return 0;
}

void __choice1::set_invoke(invoke invoke_val) {
    *(invoke *)&invoke_field = invoke_val;
    _choice = invoke_chosen;
}

__choice1::returnResult *__choice1::get_returnResult() {
    if (_choice == returnResult_chosen)
	return (returnResult *)&returnResult_field;
    else
	return 0;
}

const __choice1::returnResult *__choice1::get_returnResult() const {
    if (_choice == returnResult_chosen)
	return (const returnResult *)&returnResult_field;
    else
	return 0;
}

void __choice1::set_returnResult(returnResult returnResult_val) {
    *(returnResult *)&returnResult_field = returnResult_val;
    _choice = returnResult_chosen;
}

__choice1::returnError *__choice1::get_returnError() {
    if (_choice == returnError_chosen)
	return (returnError *)&returnError_field;
    else
	return 0;
}

const __choice1::returnError *__choice1::get_returnError() const {
    if (_choice == returnError_chosen)
	return (const returnError *)&returnError_field;
    else
	return 0;
}

void __choice1::set_returnError(returnError returnError_val) {
    *(returnError *)&returnError_field = returnError_val;
    _choice = returnError_chosen;
}

void *Reject::operator new(size_t size) {
    return ossNewFunc(size);
}

void Reject::operator delete(void *ptr) {
    asn1Free(ptr);
}

Reject::Reject() {
    memset(this, 0, sizeof(Reject));
}

Reject::Reject(const Reject & that) {
    OSSTRY {
	invokeId_field = that.invokeId_field;
	problem_field = that.problem_field;
    } OSSCLEAN(Reject)
}

Reject::Reject(const invokeId & invokeId_val, const problem & problem_val) {
    OSSTRY {
	invokeId_field = invokeId_val;
	problem_field = problem_val;
    } OSSCLEAN(Reject)
}

Reject & Reject::operator = (const Reject & that) {
    if (this == &that)
	return *this;
    invokeId_field = that.invokeId_field;
    problem_field = that.problem_field;
    return *this;
}

int Reject::operator == (const Reject & that) const {
    if (invokeId_field != that.invokeId_field)
	return 0;
    if (problem_field != that.problem_field)
	return 0;
    return 1;
}

int Reject::operator != (const Reject & that) const {
    return !(operator ==(that));
}

Reject::invokeId & Reject::get_invokeId() {
    return invokeId_field;
}

const Reject::invokeId & Reject::get_invokeId() const {
    return invokeId_field;
}

void Reject::set_invokeId(const invokeId & invokeId_val) {
    invokeId_field = invokeId_val;
}

Reject::problem & Reject::get_problem() {
    return problem_field;
}

const Reject::problem & Reject::get_problem() const {
    return problem_field;
}

void Reject::set_problem(const problem & problem_val) {
    problem_field = problem_val;
}

void *__shared5::operator new(size_t size) {
    return ossNewFunc(size);
}

void __shared5::operator delete(void *ptr) {
    asn1Free(ptr);
}

ossBoolean __shared5::get_default_concatenation() {
    return __shared5::default_concatenation;
}

__shared5::__shared5() {
    memset(this, 0, sizeof(__shared5));
}

__shared5::__shared5(const __shared5 & that) {
    OSSTRY {
	bit_mask = that.bit_mask;
	realization_type_field = that.realization_type_field;
	concatenation_field = that.concatenation_field;
    } OSSCLEAN(__shared5)
}

__shared5::__shared5(realization_type realization_type_val, concatenation concatenation_val) {
    OSSTRY {
	bit_mask = 0x80000000;
	realization_type_field = realization_type_val;
	concatenation_field = concatenation_val;
    } OSSCLEAN(__shared5)
}

__shared5::__shared5(realization_type realization_type_val) {
    OSSTRY {
	bit_mask = 0;
	realization_type_field = realization_type_val;
    } OSSCLEAN(__shared5)
}

__shared5 & __shared5::operator = (const __shared5 & that) {
    if (this == &that)
	return *this;
    this->~__shared5();
    bit_mask = that.bit_mask;
    realization_type_field = that.realization_type_field;
    concatenation_field = that.concatenation_field;
    return *this;
}

int __shared5::operator == (const __shared5 & that) const {
    if (bit_mask != that.bit_mask)
	return 0;
    if (realization_type_field != that.realization_type_field)
	return 0;
    if (bit_mask & 0x80000000) {
	if (concatenation_field != that.concatenation_field)
	    return 0;
    }
    return 1;
}

int __shared5::operator != (const __shared5 & that) const {
    return !(operator ==(that));
}

__shared5::realization_type & __shared5::get_realization_type() {
    return realization_type_field;
}

__shared5::realization_type __shared5::get_realization_type() const {
    return realization_type_field;
}

void __shared5::set_realization_type(realization_type realization_type_val) {
    realization_type_field = realization_type_val;
}

__shared5::concatenation *__shared5::get_concatenation() {
    if (bit_mask & 0x80000000)
	return &concatenation_field;
    else
	return 0;
}

const __shared5::concatenation *__shared5::get_concatenation() const {
    if (bit_mask & 0x80000000)
	return &concatenation_field;
    else
	return 0;
}

void __shared5::set_concatenation(concatenation concatenation_val) {
    bit_mask |= 0x80000000;
    concatenation_field = concatenation_val;
}

int __shared5::concatenation_is_default() const {
    return !(bit_mask & 0x80000000);
}

void __shared5::set_default_concatenation() {
    bit_mask &= ~0x80000000;
}

void *RTABapdu::operator new(size_t size) {
    return ossNewFunc(size);
}

void RTABapdu::operator delete(void *ptr) {
    asn1Free(ptr);
}

RTABapdu::RTABapdu() {
    memset(this, 0, sizeof(RTABapdu));
}

RTABapdu::RTABapdu(const RTABapdu & that) {
    OSSTRY {
	bit_mask = that.bit_mask;
	abortReason_field = that.abortReason_field;
	reflectedParameter_field = that.reflectedParameter_field;
	userdataAB_field = that.userdataAB_field;
    } OSSCLEAN(RTABapdu)
}

RTABapdu::RTABapdu(abortReason abortReason_val, const reflectedParameter & reflectedParameter_val, 
    const userdataAB & userdataAB_val) {
    OSSTRY {
	bit_mask = 0xe0000000;
	abortReason_field = abortReason_val;
	reflectedParameter_field = reflectedParameter_val;
	userdataAB_field = userdataAB_val;
    } OSSCLEAN(RTABapdu)
}

RTABapdu & RTABapdu::operator = (const RTABapdu & that) {
    if (this == &that)
	return *this;
    this->~RTABapdu();
    bit_mask = that.bit_mask;
    abortReason_field = that.abortReason_field;
    reflectedParameter_field = that.reflectedParameter_field;
    userdataAB_field = that.userdataAB_field;
    return *this;
}

int RTABapdu::operator == (const RTABapdu & that) const {
    if (bit_mask != that.bit_mask)
	return 0;
    if (bit_mask & 0x80000000) {
	if (abortReason_field != that.abortReason_field)
	    return 0;
    }
    if (bit_mask & 0x40000000) {
	if (reflectedParameter_field != that.reflectedParameter_field)
	    return 0;
    }
    if (bit_mask & 0x20000000) {
	if (userdataAB_field != that.userdataAB_field)
	    return 0;
    }
    return 1;
}

int RTABapdu::operator != (const RTABapdu & that) const {
    return !(operator ==(that));
}

RTABapdu::abortReason *RTABapdu::get_abortReason() {
    if (bit_mask & 0x80000000)
	return &abortReason_field;
    else
	return 0;
}

const RTABapdu::abortReason *RTABapdu::get_abortReason() const {
    if (bit_mask & 0x80000000)
	return &abortReason_field;
    else
	return 0;
}

void RTABapdu::set_abortReason(abortReason abortReason_val) {
    bit_mask |= 0x80000000;
    abortReason_field = abortReason_val;
}

int RTABapdu::abortReason_is_present() const {
    return !!(bit_mask & 0x80000000);
}

void RTABapdu::omit_abortReason() {
    bit_mask &= ~0x80000000;
}

RTABapdu::reflectedParameter *RTABapdu::get_reflectedParameter() {
    if (bit_mask & 0x40000000)
	return &reflectedParameter_field;
    else
	return 0;
}

const RTABapdu::reflectedParameter *RTABapdu::get_reflectedParameter() const {
    if (bit_mask & 0x40000000)
	return &reflectedParameter_field;
    else
	return 0;
}

void RTABapdu::set_reflectedParameter(const reflectedParameter & reflectedParameter_val) {
    bit_mask |= 0x40000000;
    reflectedParameter_field = reflectedParameter_val;
}

int RTABapdu::reflectedParameter_is_present() const {
    return !!(bit_mask & 0x40000000);
}

void RTABapdu::omit_reflectedParameter() {
    reflectedParameter_field.~OssBitString();
    bit_mask &= ~0x40000000;
}

RTABapdu::userdataAB *RTABapdu::get_userdataAB() {
    if (bit_mask & 0x20000000)
	return &userdataAB_field;
    else
	return 0;
}

const RTABapdu::userdataAB *RTABapdu::get_userdataAB() const {
    if (bit_mask & 0x20000000)
	return &userdataAB_field;
    else
	return 0;
}

void RTABapdu::set_userdataAB(const userdataAB & userdataAB_val) {
    bit_mask |= 0x20000000;
    userdataAB_field = userdataAB_val;
}

int RTABapdu::userdataAB_is_present() const {
    return !!(bit_mask & 0x20000000);
}

void RTABapdu::omit_userdataAB() {
    userdataAB_field.~OssOpen();
    bit_mask &= ~0x20000000;
}

/* Universal PDU class */

Remote_Operations_Useful_Definitions_PDU::Remote_Operations_Useful_Definitions_PDU() {
}

void Remote_Operations_Useful_Definitions_PDU::set_Teller(Teller & d) {
    index = 1;
    data = &d;
#ifdef OSS_PREALLOCATED_BUFFER_DECODE_SUPPORTED
    constant = 0;
#endif
}

Teller *Remote_Operations_Useful_Definitions_PDU::get_Teller() const {
#ifdef OSS_PREALLOCATED_BUFFER_DECODE_SUPPORTED
    if (index == 1 && !constant)
#else
    if (index == 1)
#endif
	return (Teller *)data;
    else
	return 0;
}

void Remote_Operations_Useful_Definitions_PDU::set_Decimal(Decimal & d) {
    index = 2;
    data = &d;
#ifdef OSS_PREALLOCATED_BUFFER_DECODE_SUPPORTED
    constant = 0;
#endif
}

Decimal *Remote_Operations_Useful_Definitions_PDU::get_Decimal() const {
#ifdef OSS_PREALLOCATED_BUFFER_DECODE_SUPPORTED
    if (index == 2 && !constant)
#else
    if (index == 2)
#endif
	return (Decimal *)data;
    else
	return 0;
}

void Remote_Operations_Useful_Definitions_PDU::set_SecurityProblem(SecurityProblem & d) {
    index = 3;
    data = &d;
#ifdef OSS_PREALLOCATED_BUFFER_DECODE_SUPPORTED
    constant = 0;
#endif
}

SecurityProblem *Remote_Operations_Useful_Definitions_PDU::get_SecurityProblem() const {
#ifdef OSS_PREALLOCATED_BUFFER_DECODE_SUPPORTED
    if (index == 3 && !constant)
#else
    if (index == 3)
#endif
	return (SecurityProblem *)data;
    else
	return 0;
}

void Remote_Operations_Useful_Definitions_PDU::set_NoInvokeId(NoInvokeId & d) {
    index = 4;
    data = &d;
#ifdef OSS_PREALLOCATED_BUFFER_DECODE_SUPPORTED
    constant = 0;
#endif
}

NoInvokeId *Remote_Operations_Useful_Definitions_PDU::get_NoInvokeId() const {
#ifdef OSS_PREALLOCATED_BUFFER_DECODE_SUPPORTED
    if (index == 4 && !constant)
#else
    if (index == 4)
#endif
	return (NoInvokeId *)data;
    else
	return 0;
}

void Remote_Operations_Useful_Definitions_PDU::set_ROSEInvokeIds(ROSEInvokeIds & d) {
    index = 5;
    data = &d;
#ifdef OSS_PREALLOCATED_BUFFER_DECODE_SUPPORTED
    constant = 0;
#endif
}

ROSEInvokeIds *Remote_Operations_Useful_Definitions_PDU::get_ROSEInvokeIds() const {
#ifdef OSS_PREALLOCATED_BUFFER_DECODE_SUPPORTED
    if (index == 5 && !constant)
#else
    if (index == 5)
#endif
	return (ROSEInvokeIds *)data;
    else
	return 0;
}

void Remote_Operations_Useful_Definitions_PDU::set_Acse_RealizationParameter(Acse_RealizationParameter & d) {
    index = 6;
    data = &d;
#ifdef OSS_PREALLOCATED_BUFFER_DECODE_SUPPORTED
    constant = 0;
#endif
}

Acse_RealizationParameter *Remote_Operations_Useful_Definitions_PDU::get_Acse_RealizationParameter() const {
#ifdef OSS_PREALLOCATED_BUFFER_DECODE_SUPPORTED
    if (index == 6 && !constant)
#else
    if (index == 6)
#endif
	return (Acse_RealizationParameter *)data;
    else
	return 0;
}

void Remote_Operations_Useful_Definitions_PDU::set_Acse_with_concatenation_RealizationParameter(Acse_with_concatenation_RealizationParameter & d) {
    index = 7;
    data = &d;
#ifdef OSS_PREALLOCATED_BUFFER_DECODE_SUPPORTED
    constant = 0;
#endif
}

Acse_with_concatenation_RealizationParameter *Remote_Operations_Useful_Definitions_PDU::get_Acse_with_concatenation_RealizationParameter() const {
#ifdef OSS_PREALLOCATED_BUFFER_DECODE_SUPPORTED
    if (index == 7 && !constant)
#else
    if (index == 7)
#endif
	return (Acse_with_concatenation_RealizationParameter *)data;
    else
	return 0;
}

void Remote_Operations_Useful_Definitions_PDU::set_Association_by_RTSE_RealizationParameter(Association_by_RTSE_RealizationParameter & d) {
    index = 8;
    data = &d;
#ifdef OSS_PREALLOCATED_BUFFER_DECODE_SUPPORTED
    constant = 0;
#endif
}

Association_by_RTSE_RealizationParameter *Remote_Operations_Useful_Definitions_PDU::get_Association_by_RTSE_RealizationParameter() const {
#ifdef OSS_PREALLOCATED_BUFFER_DECODE_SUPPORTED
    if (index == 8 && !constant)
#else
    if (index == 8)
#endif
	return (Association_by_RTSE_RealizationParameter *)data;
    else
	return 0;
}

void Remote_Operations_Useful_Definitions_PDU::set_PData_RealizationParameter(PData_RealizationParameter & d) {
    index = 9;
    data = &d;
#ifdef OSS_PREALLOCATED_BUFFER_DECODE_SUPPORTED
    constant = 0;
#endif
}

PData_RealizationParameter *Remote_Operations_Useful_Definitions_PDU::get_PData_RealizationParameter() const {
#ifdef OSS_PREALLOCATED_BUFFER_DECODE_SUPPORTED
    if (index == 9 && !constant)
#else
    if (index == 9)
#endif
	return (PData_RealizationParameter *)data;
    else
	return 0;
}

void Remote_Operations_Useful_Definitions_PDU::set_PData_with_concatenation_RealizationParameter(PData_with_concatenation_RealizationParameter & d) {
    index = 10;
    data = &d;
#ifdef OSS_PREALLOCATED_BUFFER_DECODE_SUPPORTED
    constant = 0;
#endif
}

PData_with_concatenation_RealizationParameter *Remote_Operations_Useful_Definitions_PDU::get_PData_with_concatenation_RealizationParameter() const {
#ifdef OSS_PREALLOCATED_BUFFER_DECODE_SUPPORTED
    if (index == 10 && !constant)
#else
    if (index == 10)
#endif
	return (PData_with_concatenation_RealizationParameter *)data;
    else
	return 0;
}

void Remote_Operations_Useful_Definitions_PDU::set_Transfer_by_RTSE_RealizationParameter(Transfer_by_RTSE_RealizationParameter & d) {
    index = 11;
    data = &d;
#ifdef OSS_PREALLOCATED_BUFFER_DECODE_SUPPORTED
    constant = 0;
#endif
}

Transfer_by_RTSE_RealizationParameter *Remote_Operations_Useful_Definitions_PDU::get_Transfer_by_RTSE_RealizationParameter() const {
#ifdef OSS_PREALLOCATED_BUFFER_DECODE_SUPPORTED
    if (index == 11 && !constant)
#else
    if (index == 11)
#endif
	return (Transfer_by_RTSE_RealizationParameter *)data;
    else
	return 0;
}

#ifdef OSS_PREALLOCATED_BUFFER_DECODE_SUPPORTED
void Remote_Operations_Useful_Definitions_PDU::set_const_Teller(const Teller & d) {
    index = 1;
    data = (void *)&d;
    constant = 1;
}

const Teller *Remote_Operations_Useful_Definitions_PDU::get_const_Teller() const {
    if (index == 1)
	return (const Teller *)data;
    else
	return 0;
}

void Remote_Operations_Useful_Definitions_PDU::set_const_Decimal(const Decimal & d) {
    index = 2;
    data = (void *)&d;
    constant = 1;
}

const Decimal *Remote_Operations_Useful_Definitions_PDU::get_const_Decimal() const {
    if (index == 2)
	return (const Decimal *)data;
    else
	return 0;
}

void Remote_Operations_Useful_Definitions_PDU::set_const_SecurityProblem(const SecurityProblem & d) {
    index = 3;
    data = (void *)&d;
    constant = 1;
}

const SecurityProblem *Remote_Operations_Useful_Definitions_PDU::get_const_SecurityProblem() const {
    if (index == 3)
	return (const SecurityProblem *)data;
    else
	return 0;
}

void Remote_Operations_Useful_Definitions_PDU::set_const_NoInvokeId(const NoInvokeId & d) {
    index = 4;
    data = (void *)&d;
    constant = 1;
}

const NoInvokeId *Remote_Operations_Useful_Definitions_PDU::get_const_NoInvokeId() const {
    if (index == 4)
	return (const NoInvokeId *)data;
    else
	return 0;
}

void Remote_Operations_Useful_Definitions_PDU::set_const_ROSEInvokeIds(const ROSEInvokeIds & d) {
    index = 5;
    data = (void *)&d;
    constant = 1;
}

const ROSEInvokeIds *Remote_Operations_Useful_Definitions_PDU::get_const_ROSEInvokeIds() const {
    if (index == 5)
	return (const ROSEInvokeIds *)data;
    else
	return 0;
}

void Remote_Operations_Useful_Definitions_PDU::set_const_Acse_RealizationParameter(const Acse_RealizationParameter & d) {
    index = 6;
    data = (void *)&d;
    constant = 1;
}

const Acse_RealizationParameter *Remote_Operations_Useful_Definitions_PDU::get_const_Acse_RealizationParameter() const {
    if (index == 6)
	return (const Acse_RealizationParameter *)data;
    else
	return 0;
}

void Remote_Operations_Useful_Definitions_PDU::set_const_Acse_with_concatenation_RealizationParameter(const Acse_with_concatenation_RealizationParameter & d) {
    index = 7;
    data = (void *)&d;
    constant = 1;
}

const Acse_with_concatenation_RealizationParameter *Remote_Operations_Useful_Definitions_PDU::get_const_Acse_with_concatenation_RealizationParameter() const {
    if (index == 7)
	return (const Acse_with_concatenation_RealizationParameter *)data;
    else
	return 0;
}

void Remote_Operations_Useful_Definitions_PDU::set_const_Association_by_RTSE_RealizationParameter(const Association_by_RTSE_RealizationParameter & d) {
    index = 8;
    data = (void *)&d;
    constant = 1;
}

const Association_by_RTSE_RealizationParameter *Remote_Operations_Useful_Definitions_PDU::get_const_Association_by_RTSE_RealizationParameter() const {
    if (index == 8)
	return (const Association_by_RTSE_RealizationParameter *)data;
    else
	return 0;
}

void Remote_Operations_Useful_Definitions_PDU::set_const_PData_RealizationParameter(const PData_RealizationParameter & d) {
    index = 9;
    data = (void *)&d;
    constant = 1;
}

const PData_RealizationParameter *Remote_Operations_Useful_Definitions_PDU::get_const_PData_RealizationParameter() const {
    if (index == 9)
	return (const PData_RealizationParameter *)data;
    else
	return 0;
}

void Remote_Operations_Useful_Definitions_PDU::set_const_PData_with_concatenation_RealizationParameter(const PData_with_concatenation_RealizationParameter & d) {
    index = 10;
    data = (void *)&d;
    constant = 1;
}

const PData_with_concatenation_RealizationParameter *Remote_Operations_Useful_Definitions_PDU::get_const_PData_with_concatenation_RealizationParameter() const {
    if (index == 10)
	return (const PData_with_concatenation_RealizationParameter *)data;
    else
	return 0;
}

void Remote_Operations_Useful_Definitions_PDU::set_const_Transfer_by_RTSE_RealizationParameter(const Transfer_by_RTSE_RealizationParameter & d) {
    index = 11;
    data = (void *)&d;
    constant = 1;
}

const Transfer_by_RTSE_RealizationParameter *Remote_Operations_Useful_Definitions_PDU::get_const_Transfer_by_RTSE_RealizationParameter() const {
    if (index == 11)
	return (const Transfer_by_RTSE_RealizationParameter *)data;
    else
	return 0;
}

#endif
/* Specific PDU classes */

Teller_PDU::Teller_PDU() {
}

void Teller_PDU::set_data(Teller & d) {
    data = &d;
#ifdef OSS_PREALLOCATED_BUFFER_DECODE_SUPPORTED
    constant = 0;
#endif
}

Teller *Teller_PDU::get_data() const {
#ifdef OSS_PREALLOCATED_BUFFER_DECODE_SUPPORTED
    if (constant)
	return 0;
#endif
    return (Teller *)data;
}

#ifdef OSS_PREALLOCATED_BUFFER_DECODE_SUPPORTED

void Teller_PDU::set_const_data(const Teller & d) {
    data = (void *)&d;
    constant = 1;
}

const Teller *Teller_PDU::get_const_data() const {
    return (const Teller *)data;
}

#endif

OssTypeIndex Teller_PDU::get_index() const {
    return 1;
}

Decimal_PDU::Decimal_PDU() {
}

void Decimal_PDU::set_data(Decimal & d) {
    data = &d;
#ifdef OSS_PREALLOCATED_BUFFER_DECODE_SUPPORTED
    constant = 0;
#endif
}

Decimal *Decimal_PDU::get_data() const {
#ifdef OSS_PREALLOCATED_BUFFER_DECODE_SUPPORTED
    if (constant)
	return 0;
#endif
    return (Decimal *)data;
}

#ifdef OSS_PREALLOCATED_BUFFER_DECODE_SUPPORTED

void Decimal_PDU::set_const_data(const Decimal & d) {
    data = (void *)&d;
    constant = 1;
}

const Decimal *Decimal_PDU::get_const_data() const {
    return (const Decimal *)data;
}

#endif

OssTypeIndex Decimal_PDU::get_index() const {
    return 2;
}

SecurityProblem_PDU::SecurityProblem_PDU() {
}

void SecurityProblem_PDU::set_data(SecurityProblem & d) {
    data = &d;
#ifdef OSS_PREALLOCATED_BUFFER_DECODE_SUPPORTED
    constant = 0;
#endif
}

SecurityProblem *SecurityProblem_PDU::get_data() const {
#ifdef OSS_PREALLOCATED_BUFFER_DECODE_SUPPORTED
    if (constant)
	return 0;
#endif
    return (SecurityProblem *)data;
}

#ifdef OSS_PREALLOCATED_BUFFER_DECODE_SUPPORTED

void SecurityProblem_PDU::set_const_data(const SecurityProblem & d) {
    data = (void *)&d;
    constant = 1;
}

const SecurityProblem *SecurityProblem_PDU::get_const_data() const {
    return (const SecurityProblem *)data;
}

#endif

OssTypeIndex SecurityProblem_PDU::get_index() const {
    return 3;
}

NoInvokeId_PDU::NoInvokeId_PDU() {
}

void NoInvokeId_PDU::set_data(NoInvokeId & d) {
    data = &d;
#ifdef OSS_PREALLOCATED_BUFFER_DECODE_SUPPORTED
    constant = 0;
#endif
}

NoInvokeId *NoInvokeId_PDU::get_data() const {
#ifdef OSS_PREALLOCATED_BUFFER_DECODE_SUPPORTED
    if (constant)
	return 0;
#endif
    return (NoInvokeId *)data;
}

#ifdef OSS_PREALLOCATED_BUFFER_DECODE_SUPPORTED

void NoInvokeId_PDU::set_const_data(const NoInvokeId & d) {
    data = (void *)&d;
    constant = 1;
}

const NoInvokeId *NoInvokeId_PDU::get_const_data() const {
    return (const NoInvokeId *)data;
}

#endif

OssTypeIndex NoInvokeId_PDU::get_index() const {
    return 4;
}

ROSEInvokeIds_PDU::ROSEInvokeIds_PDU() {
}

void ROSEInvokeIds_PDU::set_data(ROSEInvokeIds & d) {
    data = &d;
#ifdef OSS_PREALLOCATED_BUFFER_DECODE_SUPPORTED
    constant = 0;
#endif
}

ROSEInvokeIds *ROSEInvokeIds_PDU::get_data() const {
#ifdef OSS_PREALLOCATED_BUFFER_DECODE_SUPPORTED
    if (constant)
	return 0;
#endif
    return (ROSEInvokeIds *)data;
}

#ifdef OSS_PREALLOCATED_BUFFER_DECODE_SUPPORTED

void ROSEInvokeIds_PDU::set_const_data(const ROSEInvokeIds & d) {
    data = (void *)&d;
    constant = 1;
}

const ROSEInvokeIds *ROSEInvokeIds_PDU::get_const_data() const {
    return (const ROSEInvokeIds *)data;
}

#endif

OssTypeIndex ROSEInvokeIds_PDU::get_index() const {
    return 5;
}

Acse_RealizationParameter_PDU::Acse_RealizationParameter_PDU() {
}

void Acse_RealizationParameter_PDU::set_data(Acse_RealizationParameter & d) {
    data = &d;
#ifdef OSS_PREALLOCATED_BUFFER_DECODE_SUPPORTED
    constant = 0;
#endif
}

Acse_RealizationParameter *Acse_RealizationParameter_PDU::get_data() const {
#ifdef OSS_PREALLOCATED_BUFFER_DECODE_SUPPORTED
    if (constant)
	return 0;
#endif
    return (Acse_RealizationParameter *)data;
}

#ifdef OSS_PREALLOCATED_BUFFER_DECODE_SUPPORTED

void Acse_RealizationParameter_PDU::set_const_data(const Acse_RealizationParameter & d) {
    data = (void *)&d;
    constant = 1;
}

const Acse_RealizationParameter *Acse_RealizationParameter_PDU::get_const_data() const {
    return (const Acse_RealizationParameter *)data;
}

#endif

OssTypeIndex Acse_RealizationParameter_PDU::get_index() const {
    return 6;
}

Acse_with_concatenation_RealizationParameter_PDU::Acse_with_concatenation_RealizationParameter_PDU() {
}

void Acse_with_concatenation_RealizationParameter_PDU::set_data(Acse_with_concatenation_RealizationParameter & d) {
    data = &d;
#ifdef OSS_PREALLOCATED_BUFFER_DECODE_SUPPORTED
    constant = 0;
#endif
}

Acse_with_concatenation_RealizationParameter *Acse_with_concatenation_RealizationParameter_PDU::get_data() const {
#ifdef OSS_PREALLOCATED_BUFFER_DECODE_SUPPORTED
    if (constant)
	return 0;
#endif
    return (Acse_with_concatenation_RealizationParameter *)data;
}

#ifdef OSS_PREALLOCATED_BUFFER_DECODE_SUPPORTED

void Acse_with_concatenation_RealizationParameter_PDU::set_const_data(const Acse_with_concatenation_RealizationParameter & d) {
    data = (void *)&d;
    constant = 1;
}

const Acse_with_concatenation_RealizationParameter *Acse_with_concatenation_RealizationParameter_PDU::get_const_data() const {
    return (const Acse_with_concatenation_RealizationParameter *)data;
}

#endif

OssTypeIndex Acse_with_concatenation_RealizationParameter_PDU::get_index() const {
    return 7;
}

Association_by_RTSE_RealizationParameter_PDU::Association_by_RTSE_RealizationParameter_PDU() {
}

void Association_by_RTSE_RealizationParameter_PDU::set_data(Association_by_RTSE_RealizationParameter & d) {
    data = &d;
#ifdef OSS_PREALLOCATED_BUFFER_DECODE_SUPPORTED
    constant = 0;
#endif
}

Association_by_RTSE_RealizationParameter *Association_by_RTSE_RealizationParameter_PDU::get_data() const {
#ifdef OSS_PREALLOCATED_BUFFER_DECODE_SUPPORTED
    if (constant)
	return 0;
#endif
    return (Association_by_RTSE_RealizationParameter *)data;
}

#ifdef OSS_PREALLOCATED_BUFFER_DECODE_SUPPORTED

void Association_by_RTSE_RealizationParameter_PDU::set_const_data(const Association_by_RTSE_RealizationParameter & d) {
    data = (void *)&d;
    constant = 1;
}

const Association_by_RTSE_RealizationParameter *Association_by_RTSE_RealizationParameter_PDU::get_const_data() const {
    return (const Association_by_RTSE_RealizationParameter *)data;
}

#endif

OssTypeIndex Association_by_RTSE_RealizationParameter_PDU::get_index() const {
    return 8;
}

PData_RealizationParameter_PDU::PData_RealizationParameter_PDU() {
}

void PData_RealizationParameter_PDU::set_data(PData_RealizationParameter & d) {
    data = &d;
#ifdef OSS_PREALLOCATED_BUFFER_DECODE_SUPPORTED
    constant = 0;
#endif
}

PData_RealizationParameter *PData_RealizationParameter_PDU::get_data() const {
#ifdef OSS_PREALLOCATED_BUFFER_DECODE_SUPPORTED
    if (constant)
	return 0;
#endif
    return (PData_RealizationParameter *)data;
}

#ifdef OSS_PREALLOCATED_BUFFER_DECODE_SUPPORTED

void PData_RealizationParameter_PDU::set_const_data(const PData_RealizationParameter & d) {
    data = (void *)&d;
    constant = 1;
}

const PData_RealizationParameter *PData_RealizationParameter_PDU::get_const_data() const {
    return (const PData_RealizationParameter *)data;
}

#endif

OssTypeIndex PData_RealizationParameter_PDU::get_index() const {
    return 9;
}

PData_with_concatenation_RealizationParameter_PDU::PData_with_concatenation_RealizationParameter_PDU() {
}

void PData_with_concatenation_RealizationParameter_PDU::set_data(PData_with_concatenation_RealizationParameter & d) {
    data = &d;
#ifdef OSS_PREALLOCATED_BUFFER_DECODE_SUPPORTED
    constant = 0;
#endif
}

PData_with_concatenation_RealizationParameter *PData_with_concatenation_RealizationParameter_PDU::get_data() const {
#ifdef OSS_PREALLOCATED_BUFFER_DECODE_SUPPORTED
    if (constant)
	return 0;
#endif
    return (PData_with_concatenation_RealizationParameter *)data;
}

#ifdef OSS_PREALLOCATED_BUFFER_DECODE_SUPPORTED

void PData_with_concatenation_RealizationParameter_PDU::set_const_data(const PData_with_concatenation_RealizationParameter & d) {
    data = (void *)&d;
    constant = 1;
}

const PData_with_concatenation_RealizationParameter *PData_with_concatenation_RealizationParameter_PDU::get_const_data() const {
    return (const PData_with_concatenation_RealizationParameter *)data;
}

#endif

OssTypeIndex PData_with_concatenation_RealizationParameter_PDU::get_index() const {
    return 10;
}

Transfer_by_RTSE_RealizationParameter_PDU::Transfer_by_RTSE_RealizationParameter_PDU() {
}

void Transfer_by_RTSE_RealizationParameter_PDU::set_data(Transfer_by_RTSE_RealizationParameter & d) {
    data = &d;
#ifdef OSS_PREALLOCATED_BUFFER_DECODE_SUPPORTED
    constant = 0;
#endif
}

Transfer_by_RTSE_RealizationParameter *Transfer_by_RTSE_RealizationParameter_PDU::get_data() const {
#ifdef OSS_PREALLOCATED_BUFFER_DECODE_SUPPORTED
    if (constant)
	return 0;
#endif
    return (Transfer_by_RTSE_RealizationParameter *)data;
}

#ifdef OSS_PREALLOCATED_BUFFER_DECODE_SUPPORTED

void Transfer_by_RTSE_RealizationParameter_PDU::set_const_data(const Transfer_by_RTSE_RealizationParameter & d) {
    data = (void *)&d;
    constant = 1;
}

const Transfer_by_RTSE_RealizationParameter *Transfer_by_RTSE_RealizationParameter_PDU::get_const_data() const {
    return (const Transfer_by_RTSE_RealizationParameter *)data;
}

#endif

OssTypeIndex Transfer_by_RTSE_RealizationParameter_PDU::get_index() const {
    return 11;
}

/* Control object class */

Remote_Operations_Useful_Definitions_Control::Remote_Operations_Useful_Definitions_Control() : OssControl(&Remote_Operations_Useful_Definitions_Table, Remote_Operations_Useful_Definitions_TableType::internal) {
}

Remote_Operations_Useful_Definitions_Control::Remote_Operations_Useful_Definitions_Control(const Remote_Operations_Useful_Definitions_Control & that) : OssControl(that) {
}


/* ASN.1 data initialization */

struct _Code {
    OSS_UINT32 choice;
    union {
	OSS_INT32  local;
	OSSC::COssEncOID  global;
    } u;
};
static _Code _v0 = {
    1, {0}
};

const Code& id_opcode_deposit = (const Code&)_v0;

static _Code _v1 = {
    1, {0}
};

const Code& id_opcode_withdraw = (const Code&)_v1;

static _Code _v2 = {
    1, {0}
};

const Code& id_opcode_open = (const Code&)_v2;

static _Code _v3 = {
    1, {0}
};

const Code& id_opcode_close = (const Code&)_v3;

static _Code _v4 = {
    1, {0}
};

const Code& id_opcode_create = (const Code&)_v4;

static _Code _v5 = {
    1, {0}
};

const Code& id_opcode_delete = (const Code&)_v5;

static _Code _v6 = {
    1, {0}
};

const Code& id_errcode_securityError = (const Code&)_v6;

static _Code _v7 = {
    1, {0}
};

const Code& id_errcode_attributeError = (const Code&)_v7;

static _Code _v8 = {
    1, {0}
};

const Code& id_errcode_nameError = (const Code&)_v8;

static _Code _v9 = {
    1, {0}
};

const Code& id_errcode_serviceError = (const Code&)_v9;

static _Code _v10 = {
    1, {0}
};

const Code& id_errcode_referral = (const Code&)_v10;

static _Code _v11 = {
    1, {0}
};

const Code& id_errcode_abandoned = (const Code&)_v11;

static _Code _v12 = {
    1, {0}
};

const Code& id_errcode_abandonFailed = (const Code&)_v12;

static _Code _v13 = {
    1, {0}
};

const Code& id_errcode_updateError = (const Code&)_v13;

static _Code _v14 = {
    1, {0}
};

const Code& id_errcode_dsaReferral = (const Code&)_v14;

static unsigned char _v16[] = { 0x53, 0x04, 0x05, 0x01 };
static OSSC::COssEncOID _v15 = {
    4,
    _v16
};

const OssEncOID& id_rosObject_ba = (const OssEncOID&)_v15;

static unsigned char _v18[] = { 0x53, 0x04, 0x05, 0x02 };
static OSSC::COssEncOID _v17 = {
    4,
    _v18
};

const OssEncOID& id_contract_dap = (const OssEncOID&)_v17;

static unsigned char _v20[] = { 0x53, 0x04, 0x05, 0x03 };
static OSSC::COssEncOID _v19 = {
    4,
    _v20
};

const OssEncOID& id_ac_bankAccountAC = (const OssEncOID&)_v19;

static unsigned char _v22[] = { 0x53, 0x04, 0x05, 0x04 };
static OSSC::COssEncOID _v21 = {
    4,
    _v22
};

const OssEncOID& id_package_baConnection = (const OssEncOID&)_v21;

static unsigned char _v24[] = { 0x53, 0x04, 0x05, 0x04 };
static OSSC::COssEncOID _v23 = {
    4,
    _v24
};

const OssEncOID& id_package_create = (const OssEncOID&)_v23;

static unsigned char _v26[] = { 0x53, 0x04, 0x05, 0x05 };
static OSSC::COssEncOID _v25 = {
    4,
    _v26
};

const OssEncOID& id_package_open = (const OssEncOID&)_v25;

static unsigned char _v28[] = { 0x53, 0x04, 0x05, 0x06 };
static OSSC::COssEncOID _v27 = {
    4,
    _v28
};

const OssEncOID& id_package_modify = (const OssEncOID&)_v27;

static unsigned char _v30[] = { 0x53, 0x04, 0x05, 0x07 };
static OSSC::COssEncOID _v29 = {
    4,
    _v30
};

const OssEncOID& id_as_bankAccountAS = (const OssEncOID&)_v29;


struct _InvokeId {
    OSS_UINT32 choice;
    union {
	OSS_INT32  present;
	char  absent;
    } u;
};
static _InvokeId _v31 = {
    2, {0}
};

const __shared3& noInvokeId = (const __shared3&)_v31;

const ossBoolean __shared5::default_concatenation = FALSE;

/* Local control table initialization */

extern "C" void DLL_ENTRY _oss_run_TOED_on_INTEL_X86_WINDOWS_AND_WINNT(void);

extern "C" {
static void _oss_post_init(struct ossGlobal *world);

/* TOED internal function declarations */

#ifdef OSS_COPY_VALUE
int DLL_ENTRY _CPRemote_Operations_Useful_Def(struct ossGlobal * _g, int pduNum, void * src, void ** pdst);
#endif /* OSS_COPY_VALUE */

#ifdef OSS_COMPARE_VALUE
int DLL_ENTRY _CMRemote_Operations_Useful_Def(struct ossGlobal * _g, int _pduNum, void * _odata, void * _cdata);
#endif /* OSS_COMPARE_VALUE */

#if OSS_TOED_API_LEVEL >= 31
void DLL_ENTRY _oeRemote_Operations_Useful_Def(OssGlobal * _g, int _pdunum, void * _inbuf);
void * DLL_ENTRY _odRemote_Operations_Useful_Def(OssGlobal * _g, int _pdunum);
#endif
static const _oss_xapi_entries_struct _oss_xapi_entries = {
     31
#ifdef OSS_COPY_VALUE
    ,_CPRemote_Operations_Useful_Def
#else
    ,NULL
#endif
#ifdef OSS_COMPARE_VALUE
    ,_CMRemote_Operations_Useful_Def
#else
    ,NULL
#endif
    ,NULL
    ,NULL
    ,102
    ,NULL
    ,NULL
#if OSS_TOED_API_LEVEL >= 24
    ,NULL
    ,NULL
    ,100
#endif
#if OSS_TOED_API_LEVEL >= 31
    ,100
    ,_oeRemote_Operations_Useful_Def
    ,_odRemote_Operations_Useful_Def
#endif
};

/* Local control table initialization */

static unsigned char _privateFlags[] = {0x0b,0x00};
void DLL_ENTRY_FDEF _ossinit_Remote_Operations_Useful_Definitions(struct ossGlobal *world) {
    _EncDecGlobals *_oss_c;

    _v0.u.local = 1;
    _v1.u.local = 2;
    _v2.u.local = 3;
    _v3.u.local = 4;
    _v4.u.local = 5;
    _v5.u.local = 6;
    _v6.u.local = 7;
    _v7.u.local = 1;
    _v8.u.local = 2;
    _v9.u.local = 3;
    _v10.u.local = 4;
    _v11.u.local = 5;
    _v12.u.local = 7;
    _v13.u.local = 8;
    _v14.u.local = 9;
    _v31.u.absent = 0;
    _oss_run_TOED_on_INTEL_X86_WINDOWS_AND_WINNT();
    ossPrivateSetMoreFlags(world, 13, _privateFlags);
    ossLinkBer(world);
    ossLinkPer(world);
    if (world) {
        _oss_c = (_EncDecGlobals *)world->encDecVar;
        _oss_c->der = 1;
    }
    ossInitXAPIentries(world, &_oss_xapi_entries);
    _oss_post_init(world);
}

/* TOED internal function declarations */


struct _Decimal {
    OSS_INT32  mantisse;
    OSS_INT32  decimal;
};

struct _RealizationParameter {
    OSS_UINT32 bit_mask;
    enum _enum1  realization_type;
    ossBoolean  concatenation;
};

struct _TYPE_IDENTIFIER {
    OSSC::COssEncOID id;
    unsigned short Type;
};

struct _Bank {
    OSSC::COssString  name;
    OSS_INT32  code;
};
static long _edInvokeId(OssGlobal * _g, char ** _out_pos, long * _max_len, _InvokeId * _in_data);
static void _ep_InvokeId(OssGlobal * _g, _InvokeId * _in_data);
static void _d_InvokeId(OssGlobal * _g, char ** _in_pos, long * _buf_len, long _data_length, unsigned int _data_tag, _InvokeId * _out_data);
static void _dp_InvokeId(OssGlobal * _g, _InvokeId * _out_data);
#ifdef OSSPRINT
static void _p_InvokeId(OssGlobal * _g, _InvokeId * _data_ptr);
#endif

struct _OperationArgument {
    OSS_INT32  account;
    OSS_INT32  amount;
};

struct _ERROR {
    OSS_UINT32 bit_mask;
    unsigned short ParameterType;
    ossBoolean parameterTypeOptional;
    unsigned short ErrorPriority;
    _Code errorCode;
};
struct _OPERATION;

struct _OPERATION {
    OSS_UINT32 bit_mask;
    unsigned short ArgumentType;
    ossBoolean argumentTypeOptional;
    ossBoolean returnResult;
    unsigned short ResultType;
    ossBoolean resultTypeOptional;
    struct ObjectSetEntry *Errors;
    struct ObjectSetEntry *Linked;
    ossBoolean synchronous;
    ossBoolean alwaysReturns;
    unsigned short InvokePriority;
    unsigned short ResultPriority;
    _Code operationCode;
};

struct _choice1 {
    OSS_UINT32 choice;
    union {
	OSS_INT32  general;
	OSS_INT32  invoke;
	OSS_INT32  returnResult;
	OSS_INT32  returnError;
    } u;
};

struct _Reject {
    _InvokeId  invokeId;
    _choice1  problem;
};
static long _edRealizationParameter(OssGlobal * _g, char ** _out_pos, long * _max_len, _RealizationParameter * _in_data);
static void _ep_RealizationParameter(OssGlobal * _g, _RealizationParameter * _in_data);
static void _d_RealizationParameter(OssGlobal * _g, char ** _in_pos, long * _buf_len, long _data_length, unsigned int _data_tag, _RealizationParameter * _out_data);
static void _dp_RealizationParameter(OssGlobal * _g, _RealizationParameter * _out_data);
#ifdef OSSPRINT
static void _p_RealizationParameter(OssGlobal * _g, _RealizationParameter * _data_ptr);
#endif

struct _RTABapdu {
    OSS_UINT32 bit_mask;
    OSS_INT32  abortReason;
    OSSC::COssBitString  reflectedParameter;
    OSSC::COssOpen  userdataAB;
};
static void _eTeller(OssGlobal * _g, void * _inbuf, char ** _outbuf, long * _outlen, unsigned int _flags);
static void _epTeller(OssGlobal * _g, void * _inbuf);
static void * _dTeller(OssGlobal * _g);
static void * _dpTeller(OssGlobal * _g);
#if (OSS_TOED_API_LEVEL < 22 ) || !defined(OSSNOFREEPDU)
static void _fTeller(OssGlobal * _g, void * _data);
#endif
#ifdef OSSPRINT
static int _pTeller(OssGlobal * _g, void * _data);
#endif
static void _eDecimal(OssGlobal * _g, void * _inbuf, char ** _outbuf, long * _outlen, unsigned int _flags);
static void _epDecimal(OssGlobal * _g, void * _inbuf);
static void * _dDecimal(OssGlobal * _g);
static void * _dpDecimal(OssGlobal * _g);
#if (OSS_TOED_API_LEVEL < 22 ) || !defined(OSSNOFREEPDU)
static void _fDecimal(OssGlobal * _g, void * _data);
#endif
#ifdef OSSPRINT
static int _pDecimal(OssGlobal * _g, void * _data);
#endif
static void _eSecurityProblem(OssGlobal * _g, void * _inbuf, char ** _outbuf, long * _outlen, unsigned int _flags);
static void _epSecurityProblem(OssGlobal * _g, void * _inbuf);
static void * _dSecurityProblem(OssGlobal * _g);
static void * _dpSecurityProblem(OssGlobal * _g);
#if (OSS_TOED_API_LEVEL < 22 ) || !defined(OSSNOFREEPDU)
static void _fSecurityProblem(OssGlobal * _g, void * _data);
#endif
#ifdef OSSPRINT
static int _pSecurityProblem(OssGlobal * _g, void * _data);
#endif
static void _eNoInvokeId(OssGlobal * _g, void * _inbuf, char ** _outbuf, long * _outlen, unsigned int _flags);
static void _epNoInvokeId(OssGlobal * _g, void * _inbuf);
static void * _dNoInvokeId(OssGlobal * _g);
static void * _dpNoInvokeId(OssGlobal * _g);
#if (OSS_TOED_API_LEVEL < 22 ) || !defined(OSSNOFREEPDU)
static void _fNoInvokeId(OssGlobal * _g, void * _data);
#endif
#ifdef OSSPRINT
static int _pNoInvokeId(OssGlobal * _g, void * _data);
#endif
static void _eROSEInvokeIds(OssGlobal * _g, void * _inbuf, char ** _outbuf, long * _outlen, unsigned int _flags);
static void _epROSEInvokeIds(OssGlobal * _g, void * _inbuf);
static void * _dROSEInvokeIds(OssGlobal * _g);
static void * _dpROSEInvokeIds(OssGlobal * _g);
#if (OSS_TOED_API_LEVEL < 22 ) || !defined(OSSNOFREEPDU)
static void _fROSEInvokeIds(OssGlobal * _g, void * _data);
#endif
#ifdef OSSPRINT
static int _pROSEInvokeIds(OssGlobal * _g, void * _data);
#endif
static void _eAcse_RealizationParameter(OssGlobal * _g, void * _inbuf, char ** _outbuf, long * _outlen, unsigned int _flags);
static void _epAcse_RealizationParameter(OssGlobal * _g, void * _inbuf);
static void * _dAcse_RealizationParameter(OssGlobal * _g);
static void * _dpAcse_RealizationParameter(OssGlobal * _g);
#if (OSS_TOED_API_LEVEL < 22 ) || !defined(OSSNOFREEPDU)
static void _fAcse_RealizationParameter(OssGlobal * _g, void * _data);
#endif
#ifdef OSSPRINT
static int _pAcse_RealizationParameter(OssGlobal * _g, void * _data);
#endif
static void _e0Acse_with_concatenation_Rea(OssGlobal * _g, void * _inbuf, char ** _outbuf, long * _outlen, unsigned int _flags);
static void _ep0Acse_with_concatenation_Rea(OssGlobal * _g, void * _inbuf);
static void * _d0Acse_with_concatenation_Rea(OssGlobal * _g);
static void * _dp0Acse_with_concatenation_Rea(OssGlobal * _g);
#if (OSS_TOED_API_LEVEL < 22 ) || !defined(OSSNOFREEPDU)
static void _f0Acse_with_concatenation_Rea(OssGlobal * _g, void * _data);
#endif
#ifdef OSSPRINT
static int _p0Acse_with_concatenation_Rea(OssGlobal * _g, void * _data);
#endif
static void _e1Association_by_RTSE_Realiza(OssGlobal * _g, void * _inbuf, char ** _outbuf, long * _outlen, unsigned int _flags);
static void _ep1Association_by_RTSE_Realiza(OssGlobal * _g, void * _inbuf);
static void * _d1Association_by_RTSE_Realiza(OssGlobal * _g);
static void * _dp1Association_by_RTSE_Realiza(OssGlobal * _g);
#if (OSS_TOED_API_LEVEL < 22 ) || !defined(OSSNOFREEPDU)
static void _f1Association_by_RTSE_Realiza(OssGlobal * _g, void * _data);
#endif
#ifdef OSSPRINT
static int _p1Association_by_RTSE_Realiza(OssGlobal * _g, void * _data);
#endif
static void _ePData_RealizationParameter(OssGlobal * _g, void * _inbuf, char ** _outbuf, long * _outlen, unsigned int _flags);
static void _epPData_RealizationParameter(OssGlobal * _g, void * _inbuf);
static void * _dPData_RealizationParameter(OssGlobal * _g);
static void * _dpPData_RealizationParameter(OssGlobal * _g);
#if (OSS_TOED_API_LEVEL < 22 ) || !defined(OSSNOFREEPDU)
static void _fPData_RealizationParameter(OssGlobal * _g, void * _data);
#endif
#ifdef OSSPRINT
static int _pPData_RealizationParameter(OssGlobal * _g, void * _data);
#endif
static void _e2PData_with_concatenation_Re(OssGlobal * _g, void * _inbuf, char ** _outbuf, long * _outlen, unsigned int _flags);
static void _ep2PData_with_concatenation_Re(OssGlobal * _g, void * _inbuf);
static void * _d2PData_with_concatenation_Re(OssGlobal * _g);
static void * _dp2PData_with_concatenation_Re(OssGlobal * _g);
#if (OSS_TOED_API_LEVEL < 22 ) || !defined(OSSNOFREEPDU)
static void _f2PData_with_concatenation_Re(OssGlobal * _g, void * _data);
#endif
#ifdef OSSPRINT
static int _p2PData_with_concatenation_Re(OssGlobal * _g, void * _data);
#endif
static void _e3Transfer_by_RTSE_Realizatio(OssGlobal * _g, void * _inbuf, char ** _outbuf, long * _outlen, unsigned int _flags);
static void _ep3Transfer_by_RTSE_Realizatio(OssGlobal * _g, void * _inbuf);
static void * _d3Transfer_by_RTSE_Realizatio(OssGlobal * _g);
static void * _dp3Transfer_by_RTSE_Realizatio(OssGlobal * _g);
#if (OSS_TOED_API_LEVEL < 22 ) || !defined(OSSNOFREEPDU)
static void _f3Transfer_by_RTSE_Realizatio(OssGlobal * _g, void * _data);
#endif
#ifdef OSSPRINT
static int _p3Transfer_by_RTSE_Realizatio(OssGlobal * _g, void * _data);
#endif
void DLL_ENTRY _emRemote_Operations_Useful_Def(struct ossGlobal * _g, int _pdunum, void * _inbuf);
void DLL_ENTRY _peRemote_Operations_Useful_Def(struct ossGlobal * _g, int _pdunum, void * _inbuf);
void DLL_ENTRY _dmRemote_Operations_Useful_Def(struct ossGlobal * _g, int * _pdunum, void ** _outbuf);
void DLL_ENTRY _pdRemote_Operations_Useful_Def(struct ossGlobal * _g, int * _pdunum, void ** _outbuf);
#if (OSS_TOED_API_LEVEL < 22 ) || !defined(OSSNOFREEPDU)
int DLL_ENTRY _fmRemote_Operations_Useful_Def(struct ossGlobal * _g, int _pdunum, void * _data);
#endif
#ifdef OSSPRINT
int DLL_ENTRY _pmRemote_Operations_Useful_Def(struct ossGlobal * _g, int _pdunum, void * _data);
#endif



#ifdef OSS_COPY_VALUE
#endif /* OSS_COPY_VALUE */

#ifdef OSS_COMPARE_VALUE
static int _cmInvokeId(OssGlobal * _g, _InvokeId  * _odata, _InvokeId  * _cdata);
static int _cmRealizationParameter(OssGlobal * _g, _RealizationParameter  * _odata, _RealizationParameter  * _cdata);
#endif /* OSS_COMPARE_VALUE */

static void (*_Encoders[11])(OssGlobal *, void *, char **, long *, unsigned int) = {
    _eTeller,
    _eDecimal,
    _eSecurityProblem,
    _eNoInvokeId,
    _eROSEInvokeIds,
    _eAcse_RealizationParameter,
    _e0Acse_with_concatenation_Rea,
    _e1Association_by_RTSE_Realiza,
    _ePData_RealizationParameter,
    _e2PData_with_concatenation_Re,
    _e3Transfer_by_RTSE_Realizatio
};
static void (*_pEncoders[11])(OssGlobal *, void *) = {
    _epTeller,
    _epDecimal,
    _epSecurityProblem,
    _epNoInvokeId,
    _epROSEInvokeIds,
    _epAcse_RealizationParameter,
    _ep0Acse_with_concatenation_Rea,
    _ep1Association_by_RTSE_Realiza,
    _epPData_RealizationParameter,
    _ep2PData_with_concatenation_Re,
    _ep3Transfer_by_RTSE_Realizatio
};
static void *(*_Decoders[11])(OssGlobal *) = {
    _dTeller,
    _dDecimal,
    _dSecurityProblem,
    _dNoInvokeId,
    _dROSEInvokeIds,
    _dAcse_RealizationParameter,
    _d0Acse_with_concatenation_Rea,
    _d1Association_by_RTSE_Realiza,
    _dPData_RealizationParameter,
    _d2PData_with_concatenation_Re,
    _d3Transfer_by_RTSE_Realizatio
};
static void *(*_pDecoders[11])(OssGlobal *) = {
    _dpTeller,
    _dpDecimal,
    _dpSecurityProblem,
    _dpNoInvokeId,
    _dpROSEInvokeIds,
    _dpAcse_RealizationParameter,
    _dp0Acse_with_concatenation_Rea,
    _dp1Association_by_RTSE_Realiza,
    _dpPData_RealizationParameter,
    _dp2PData_with_concatenation_Re,
    _dp3Transfer_by_RTSE_Realizatio
};
#if (OSS_TOED_API_LEVEL < 22 ) || !defined(OSSNOFREEPDU)
static void (*_FreePDU[11])(OssGlobal *, void *) = {
    _fTeller,
    _fDecimal,
    _fSecurityProblem,
    _fNoInvokeId,
    _fROSEInvokeIds,
    _fAcse_RealizationParameter,
    _f0Acse_with_concatenation_Rea,
    _f1Association_by_RTSE_Realiza,
    _fPData_RealizationParameter,
    _f2PData_with_concatenation_Re,
    _f3Transfer_by_RTSE_Realizatio
};
#endif
#ifdef OSSPRINT
static _print_pdu_ _PrintPDU[11] = {
    { _pTeller, (char *)"Teller" },
    { _pDecimal, (char *)"Decimal" },
    { _pSecurityProblem, (char *)"SecurityProblem" },
    { _pNoInvokeId, (char *)"NoInvokeId" },
    { _pROSEInvokeIds, (char *)"ROSEInvokeIds" },
    { _pAcse_RealizationParameter, (char *)"Acse-RealizationParameter" },
    { _p0Acse_with_concatenation_Rea, (char *)"Acse-with-concatenation-RealizationParameter" },
    { _p1Association_by_RTSE_Realiza, (char *)"Association-by-RTSE-RealizationParameter" },
    { _pPData_RealizationParameter, (char *)"PData-RealizationParameter" },
    { _p2PData_with_concatenation_Re, (char *)"PData-with-concatenation-RealizationParameter" },
    { _p3Transfer_by_RTSE_Realizatio, (char *)"Transfer-by-RTSE-RealizationParameter" }
};
#endif

/* TOED internal function implementations */

#if OSSDEBUG > 1
static const _Context_Id _context_id[] = {
    {(char *)"present", (char *)"INTEGER", _integer_type},
    {(char *)"absent", (char *)"NULL", _null_type},
    {(char *)"concatenation", (char *)"BOOLEAN", _boolean_type},
    {(char *)"realization-type", (char *)"ENUMERATED", _enumerated_type},
    {(char *)"Teller", (char *)"INTEGER", _integer_type},
    {(char *)"Decimal", (char *)"SEQUENCE", _sequence_type},
    {(char *)"decimal", (char *)"INTEGER", _integer_type},
    {(char *)"mantisse", (char *)"INTEGER", _integer_type},
    {(char *)"SecurityProblem", (char *)"INTEGER", _integer_type},
    {(char *)"NoInvokeId", (char *)"CHOICE", _choice_type},
    {(char *)"ROSEInvokeIds", (char *)"CHOICE", _choice_type},
    {(char *)"Acse-RealizationParameter", (char *)"SEQUENCE", _sequence_type},
    {(char *)"Acse-with-concatenation-RealizationParameter", (char *)"SEQUENCE", _sequence_type},
    {(char *)"Association-by-RTSE-RealizationParameter", (char *)"SEQUENCE", _sequence_type},
    {(char *)"PData-RealizationParameter", (char *)"SEQUENCE", _sequence_type},
    {(char *)"PData-with-concatenation-RealizationParameter", (char *)"SEQUENCE", _sequence_type},
    {(char *)"Transfer-by-RTSE-RealizationParameter", (char *)"SEQUENCE", _sequence_type}
};
#endif


static OSS_INT32 const _v35[2] = {0, 1};

static struct _enum_data const _enums[] = {
	    { 2, (OSS_INT32 *)_v35 }
};

#ifdef OSSPRINT
static struct _string_data const _sd1[] = {
    {"association-service", 19, 0x02, 0},
    {"transfer-service", 16, 0x02, 1}
};

#endif

#ifdef OSSPRINT
static struct _string_search_data const _ssd[] = {
    {2, 0, _sd1, NULL}
};
#endif

#if OSS_TOED_API_LEVEL >= 31
void DLL_ENTRY_FDEF _oeRemote_Operations_Useful_Def(OssGlobal * _g, int _pdunum, void * _inbuf)
{
    _oss_toed_api_error(_g, _null_fcn, 0);
    _pdunum = _pdunum;	/* to avoid C-compilation warning */
    _inbuf = _inbuf;	/* to avoid C-compilation warning */
}

void * DLL_ENTRY_FDEF _odRemote_Operations_Useful_Def(OssGlobal * _g, int _pdunum)
{
    _oss_toed_api_error(_g, _null_fcn, 0);
    _pdunum = _pdunum;	/* to avoid C-compilation warning */
    return NULL;
}

#endif
static long _edInvokeId(OssGlobal * _g, char ** _out_pos, long * _max_len, _InvokeId * _in_data)
{
#if OSSDEBUG > 1
    _EncDecGlobals *_oss_c = (_EncDecGlobals *)_g->encDecVar;
#endif
    long _out_len = *_max_len;
    long _data_len = 0;
    {
	OSS_CNTX_INIT

	switch (_in_data->choice) {
	case 1:
	    OSS_CNTX_PUSH(_oss_c, 0)
	    _data_len = _oss_encd_int_tl(_g, _out_pos, &_out_len, _in_data->u.present, 0x2);
	    break;
	case 2:
	    OSS_CNTX_PUSH(_oss_c, 1)
	    _data_len = 0;
	    _data_len += _oss_encd_tag_length(_g, _out_pos, &_out_len, _data_len, 0x5);
	    break;
	default:
	    _oss_enc_error(_g, _bad_choice, _in_data->choice);	/* Bad choice selector. */
	}
	OSS_CNTX_POP(_oss_c)
    }
    *_max_len = _out_len;
    return _data_len;
}

static void _ep_InvokeId(OssGlobal * _g, _InvokeId * _in_data)
{
#if OSSDEBUG > 1
    _EncDecGlobals *_oss_c = (_EncDecGlobals *)_g->encDecVar;
#endif
    {
	OSS_CNTX_INIT

	if (_in_data->choice <= 2) {

	    _oss_penc_nonneg_1int(_g, _in_data->choice - 1);
	}
	switch (_in_data->choice) {
	case 1:
	    OSS_CNTX_PUSH(_oss_c, 0)
	    _oss_penc_unconstr_int_l(_g, _in_data->u.present);
	    break;
	case 2:
	    OSS_CNTX_PUSH(_oss_c, 1)
	    break;
	default:
	    _oss_enc_error(_g, _bad_choice, _in_data->choice);	/* Bad choice selector. */
	}
	OSS_CNTX_POP(_oss_c)
    }

}

static long _edRealizationParameter(OssGlobal * _g, char ** _out_pos, long * _max_len, _RealizationParameter * _in_data)
{
#if OSSDEBUG > 1
    _EncDecGlobals *_oss_c = (_EncDecGlobals *)_g->encDecVar;
#endif
    long _out_len = *_max_len;
    long _data_len = 0;
    {
	long _total_len = 0;
	OSS_CNTX_INIT

	OSS_CNTX_PUSH(_oss_c, 2)
	if (_in_data->bit_mask & 0x80000000 &&
	    _oss_not_dflt_ia(_g, &_in_data->concatenation, (ossBoolean  *)&__shared5::default_concatenation, sizeof(ossBoolean ), 0, -1, 8)) {
	    _data_len = _oss_encd_bool_tl(_g, _out_pos, &_out_len, 0x1, _in_data->concatenation);
	    _total_len += _data_len;
	}
	OSS_CNTX_SET(3)
	_data_len = _oss_encd_uint_tl(_g, _out_pos, &_out_len, _in_data->realization_type, 0xA);
	_total_len += _data_len;
	OSS_CNTX_POP(_oss_c)
	_data_len = _total_len;
    }
    *_max_len = _out_len;
    return _data_len;
}

static void _ep_RealizationParameter(OssGlobal * _g, _RealizationParameter * _in_data)
{
#if OSSDEBUG > 1
    _EncDecGlobals *_oss_c = (_EncDecGlobals *)_g->encDecVar;
#endif
    {
	OSS_UINT32 _bitmask = _in_data->bit_mask;
	OSS_CNTX_INIT

#ifdef OSS_STRICT_PER_ENCODING_OF_DEFAULT_VALUES
	if (_g->encodingFlags & STRICT_PER_ENCODING_OF_DEFAULT_VALUES) {
	    if ((_bitmask & 0x80000000) &&
		!_oss_not_dflt_ia(_g, &_in_data->concatenation, (ossBoolean  *)&__shared5::default_concatenation, sizeof(ossBoolean ), 0, -1, 8))
		_bitmask ^= 0x80000000;
	}
#endif /* OSS_STRICT_PER_ENCODING_OF_DEFAULT_VALUES */
	_oss_append_1bit_unaligned(_g, (unsigned char)(_bitmask >> 24));
	OSS_CNTX_PUSH(_oss_c, 3)
	_oss_penc_uenum(_g, _in_data->realization_type, (struct _enum_data *)&_enums[0], NULL);
	OSS_CNTX_SET(2)
	if (_bitmask & 0x80000000) {
	    _oss_append_1bit_unaligned(_g, (unsigned char)((_in_data->concatenation) ? 0x80 : 0x00) );
	}
	OSS_CNTX_POP(_oss_c)
    }
}

static void _eTeller(OssGlobal * _g, void * _inbuf, char ** _outbuf, long * _outlen, unsigned int _flags)
{
    _EncDecGlobals *_oss_c = (_EncDecGlobals *)_g->encDecVar;
    OSS_INT32	*_in_data;
    char *_out_buf;
    char **_out_pos = &_out_buf;
    long _out_len;
    long _data_len = 0;
    OSS_CNTX_INITZERO

    _in_data = (OSS_INT32 *) _inbuf;
    if (!_oss_c->_buffer_provided) *_outbuf = NULL;
    _out_buf = *_outbuf;
    _out_len = _oss_c->_oss_outbuflen = (_oss_c->_buffer_provided) ? *_outlen : 0;
    _out_buf += _out_len;
    OSS_CNTX_ANCHOR_SET(1,4)
    _data_len = _oss_encd_int_tl(_g, _out_pos, &_out_len, *_in_data, 0x2);
    if (!_oss_c->_buffer_provided)
	_oss_set_outmem_d(_g, _out_len, _outlen, _outbuf);
    else {
	if (_flags & FRONT_ALIGN)
	    memmove(*_outbuf, *_out_pos, (size_t) _data_len);
	else
	    *_outbuf = *_out_pos;
	*_outlen = _data_len;
    }

    OSS_CNTX_POP(_oss_c)
}

static void _epTeller(OssGlobal * _g, void * _inbuf)
{
    _EncDecGlobals *_oss_c = (_EncDecGlobals *)_g->encDecVar;
    OSS_INT32	*_in_data;
    OSS_CNTX_INITZERO

    _in_data = (OSS_INT32 *) _inbuf;
    OSS_CNTX_ANCHOR_SET(1,4)
    _oss_penc_unconstr_int_l(_g, *_in_data);
    OSS_CNTX_POP(_oss_c)
}

static void _eDecimal(OssGlobal * _g, void * _inbuf, char ** _outbuf, long * _outlen, unsigned int _flags)
{
    _EncDecGlobals *_oss_c = (_EncDecGlobals *)_g->encDecVar;
    _Decimal	*_in_data;
    char *_out_buf;
    char **_out_pos = &_out_buf;
    long _out_len;
    long _data_len = 0;
    OSS_CNTX_INITZERO

    _in_data = (_Decimal *) _inbuf;
    if (!_oss_c->_buffer_provided) *_outbuf = NULL;
    _out_buf = *_outbuf;
    _out_len = _oss_c->_oss_outbuflen = (_oss_c->_buffer_provided) ? *_outlen : 0;
    _out_buf += _out_len;
    OSS_CNTX_ANCHOR_SET(2,5)
    {
	long _total_len = 0;
	OSS_CNTX_INIT

	OSS_CNTX_PUSH(_oss_c, 6)
	_data_len = _oss_encd_int_tl(_g, _out_pos, &_out_len, _in_data->decimal, 0x2);
	_total_len += _data_len;
	OSS_CNTX_SET(7)
	_data_len = _oss_encd_int_tl(_g, _out_pos, &_out_len, _in_data->mantisse, 0x2);
	_total_len += _data_len;
	OSS_CNTX_POP(_oss_c)
	_data_len = _total_len;
    }
    _data_len += _oss_encd_tag_length(_g, _out_pos, &_out_len, _data_len, 0x30);
    if (!_oss_c->_buffer_provided)
	_oss_set_outmem_d(_g, _out_len, _outlen, _outbuf);
    else {
	if (_flags & FRONT_ALIGN)
	    memmove(*_outbuf, *_out_pos, (size_t) _data_len);
	else
	    *_outbuf = *_out_pos;
	*_outlen = _data_len;
    }

    OSS_CNTX_POP(_oss_c)
}

static void _epDecimal(OssGlobal * _g, void * _inbuf)
{
    _EncDecGlobals *_oss_c = (_EncDecGlobals *)_g->encDecVar;
    _Decimal	*_in_data;
    OSS_CNTX_INITZERO

    _in_data = (_Decimal *) _inbuf;
    OSS_CNTX_ANCHOR_SET(2,5)
    {
	OSS_CNTX_INIT

	OSS_CNTX_PUSH(_oss_c, 7)
	_oss_penc_unconstr_int_l(_g, _in_data->mantisse);
	OSS_CNTX_SET(6)
	_oss_penc_unconstr_int_l(_g, _in_data->decimal);
	OSS_CNTX_POP(_oss_c)
    }
    OSS_CNTX_POP(_oss_c)
}

static void _eSecurityProblem(OssGlobal * _g, void * _inbuf, char ** _outbuf, long * _outlen, unsigned int _flags)
{
    _EncDecGlobals *_oss_c = (_EncDecGlobals *)_g->encDecVar;
    OSS_INT32	*_in_data;
    char *_out_buf;
    char **_out_pos = &_out_buf;
    long _out_len;
    long _data_len = 0;
    OSS_CNTX_INITZERO

    _in_data = (OSS_INT32 *) _inbuf;
    if (!_oss_c->_buffer_provided) *_outbuf = NULL;
    _out_buf = *_outbuf;
    _out_len = _oss_c->_oss_outbuflen = (_oss_c->_buffer_provided) ? *_outlen : 0;
    _out_buf += _out_len;
    OSS_CNTX_ANCHOR_SET(3,8)
    _data_len = _oss_encd_int_tl(_g, _out_pos, &_out_len, *_in_data, 0x2);
    if (!_oss_c->_buffer_provided)
	_oss_set_outmem_d(_g, _out_len, _outlen, _outbuf);
    else {
	if (_flags & FRONT_ALIGN)
	    memmove(*_outbuf, *_out_pos, (size_t) _data_len);
	else
	    *_outbuf = *_out_pos;
	*_outlen = _data_len;
    }

    OSS_CNTX_POP(_oss_c)
}

static void _epSecurityProblem(OssGlobal * _g, void * _inbuf)
{
    _EncDecGlobals *_oss_c = (_EncDecGlobals *)_g->encDecVar;
    OSS_INT32	*_in_data;
    OSS_CNTX_INITZERO

    _in_data = (OSS_INT32 *) _inbuf;
    OSS_CNTX_ANCHOR_SET(3,8)
    _oss_penc_unconstr_int_l(_g, *_in_data);
    OSS_CNTX_POP(_oss_c)
}

static void _eNoInvokeId(OssGlobal * _g, void * _inbuf, char ** _outbuf, long * _outlen, unsigned int _flags)
{
    _EncDecGlobals *_oss_c = (_EncDecGlobals *)_g->encDecVar;
    _InvokeId	*_in_data;
    char *_out_buf;
    char **_out_pos = &_out_buf;
    long _out_len;
    long _data_len = 0;
    OSS_CNTX_INITZERO

    _in_data = (_InvokeId *) _inbuf;
    if (!_oss_c->_buffer_provided) *_outbuf = NULL;
    _out_buf = *_outbuf;
    _out_len = _oss_c->_oss_outbuflen = (_oss_c->_buffer_provided) ? *_outlen : 0;
    _out_buf += _out_len;
    OSS_CNTX_ANCHOR_SET(4,9)
    _data_len = _edInvokeId(_g, _out_pos, &_out_len, _in_data);
    if (!_oss_c->_buffer_provided)
	_oss_set_outmem_d(_g, _out_len, _outlen, _outbuf);
    else {
	if (_flags & FRONT_ALIGN)
	    memmove(*_outbuf, *_out_pos, (size_t) _data_len);
	else
	    *_outbuf = *_out_pos;
	*_outlen = _data_len;
    }

    OSS_CNTX_POP(_oss_c)
}

static void _epNoInvokeId(OssGlobal * _g, void * _inbuf)
{
    _EncDecGlobals *_oss_c = (_EncDecGlobals *)_g->encDecVar;
    _InvokeId	*_in_data;
    OSS_CNTX_INITZERO

    _in_data = (_InvokeId *) _inbuf;
    OSS_CNTX_ANCHOR_SET(4,9)
    _ep_InvokeId(_g, _in_data);
    OSS_CNTX_POP(_oss_c)
}

static void _eROSEInvokeIds(OssGlobal * _g, void * _inbuf, char ** _outbuf, long * _outlen, unsigned int _flags)
{
    _EncDecGlobals *_oss_c = (_EncDecGlobals *)_g->encDecVar;
    _InvokeId	*_in_data;
    char *_out_buf;
    char **_out_pos = &_out_buf;
    long _out_len;
    long _data_len = 0;
    OSS_CNTX_INITZERO

    _in_data = (_InvokeId *) _inbuf;
    if (!_oss_c->_buffer_provided) *_outbuf = NULL;
    _out_buf = *_outbuf;
    _out_len = _oss_c->_oss_outbuflen = (_oss_c->_buffer_provided) ? *_outlen : 0;
    _out_buf += _out_len;
    OSS_CNTX_ANCHOR_SET(5,10)
    _data_len = _edInvokeId(_g, _out_pos, &_out_len, _in_data);
    if (!_oss_c->_buffer_provided)
	_oss_set_outmem_d(_g, _out_len, _outlen, _outbuf);
    else {
	if (_flags & FRONT_ALIGN)
	    memmove(*_outbuf, *_out_pos, (size_t) _data_len);
	else
	    *_outbuf = *_out_pos;
	*_outlen = _data_len;
    }

    OSS_CNTX_POP(_oss_c)
}

static void _epROSEInvokeIds(OssGlobal * _g, void * _inbuf)
{
    _EncDecGlobals *_oss_c = (_EncDecGlobals *)_g->encDecVar;
    _InvokeId	*_in_data;
    OSS_CNTX_INITZERO

    _in_data = (_InvokeId *) _inbuf;
    OSS_CNTX_ANCHOR_SET(5,10)
    _ep_InvokeId(_g, _in_data);
    OSS_CNTX_POP(_oss_c)
}

static void _eAcse_RealizationParameter(OssGlobal * _g, void * _inbuf, char ** _outbuf, long * _outlen, unsigned int _flags)
{
    _EncDecGlobals *_oss_c = (_EncDecGlobals *)_g->encDecVar;
    _RealizationParameter	*_in_data;
    char *_out_buf;
    char **_out_pos = &_out_buf;
    long _out_len;
    long _data_len = 0;
    OSS_CNTX_INITZERO

    _in_data = (_RealizationParameter *) _inbuf;
    if (!_oss_c->_buffer_provided) *_outbuf = NULL;
    _out_buf = *_outbuf;
    _out_len = _oss_c->_oss_outbuflen = (_oss_c->_buffer_provided) ? *_outlen : 0;
    _out_buf += _out_len;
    OSS_CNTX_ANCHOR_SET(6,11)
    _data_len = _edRealizationParameter(_g, _out_pos, &_out_len, _in_data);
    _data_len += _oss_encd_tag_length(_g, _out_pos, &_out_len, _data_len, 0x30);
    if (!_oss_c->_buffer_provided)
	_oss_set_outmem_d(_g, _out_len, _outlen, _outbuf);
    else {
	if (_flags & FRONT_ALIGN)
	    memmove(*_outbuf, *_out_pos, (size_t) _data_len);
	else
	    *_outbuf = *_out_pos;
	*_outlen = _data_len;
    }

    OSS_CNTX_POP(_oss_c)
}

static void _epAcse_RealizationParameter(OssGlobal * _g, void * _inbuf)
{
    _EncDecGlobals *_oss_c = (_EncDecGlobals *)_g->encDecVar;
    _RealizationParameter	*_in_data;
    OSS_CNTX_INITZERO

    _in_data = (_RealizationParameter *) _inbuf;
    OSS_CNTX_ANCHOR_SET(6,11)
    _ep_RealizationParameter(_g, _in_data);
    OSS_CNTX_POP(_oss_c)
}

static void _e0Acse_with_concatenation_Rea(OssGlobal * _g, void * _inbuf, char ** _outbuf, long * _outlen, unsigned int _flags)
{
    _EncDecGlobals *_oss_c = (_EncDecGlobals *)_g->encDecVar;
    _RealizationParameter	*_in_data;
    char *_out_buf;
    char **_out_pos = &_out_buf;
    long _out_len;
    long _data_len = 0;
    OSS_CNTX_INITZERO

    _in_data = (_RealizationParameter *) _inbuf;
    if (!_oss_c->_buffer_provided) *_outbuf = NULL;
    _out_buf = *_outbuf;
    _out_len = _oss_c->_oss_outbuflen = (_oss_c->_buffer_provided) ? *_outlen : 0;
    _out_buf += _out_len;
    OSS_CNTX_ANCHOR_SET(7,12)
    _data_len = _edRealizationParameter(_g, _out_pos, &_out_len, _in_data);
    _data_len += _oss_encd_tag_length(_g, _out_pos, &_out_len, _data_len, 0x30);
    if (!_oss_c->_buffer_provided)
	_oss_set_outmem_d(_g, _out_len, _outlen, _outbuf);
    else {
	if (_flags & FRONT_ALIGN)
	    memmove(*_outbuf, *_out_pos, (size_t) _data_len);
	else
	    *_outbuf = *_out_pos;
	*_outlen = _data_len;
    }

    OSS_CNTX_POP(_oss_c)
}

static void _ep0Acse_with_concatenation_Rea(OssGlobal * _g, void * _inbuf)
{
    _EncDecGlobals *_oss_c = (_EncDecGlobals *)_g->encDecVar;
    _RealizationParameter	*_in_data;
    OSS_CNTX_INITZERO

    _in_data = (_RealizationParameter *) _inbuf;
    OSS_CNTX_ANCHOR_SET(7,12)
    _ep_RealizationParameter(_g, _in_data);
    OSS_CNTX_POP(_oss_c)
}

static void _e1Association_by_RTSE_Realiza(OssGlobal * _g, void * _inbuf, char ** _outbuf, long * _outlen, unsigned int _flags)
{
    _EncDecGlobals *_oss_c = (_EncDecGlobals *)_g->encDecVar;
    _RealizationParameter	*_in_data;
    char *_out_buf;
    char **_out_pos = &_out_buf;
    long _out_len;
    long _data_len = 0;
    OSS_CNTX_INITZERO

    _in_data = (_RealizationParameter *) _inbuf;
    if (!_oss_c->_buffer_provided) *_outbuf = NULL;
    _out_buf = *_outbuf;
    _out_len = _oss_c->_oss_outbuflen = (_oss_c->_buffer_provided) ? *_outlen : 0;
    _out_buf += _out_len;
    OSS_CNTX_ANCHOR_SET(8,13)
    _data_len = _edRealizationParameter(_g, _out_pos, &_out_len, _in_data);
    _data_len += _oss_encd_tag_length(_g, _out_pos, &_out_len, _data_len, 0x30);
    if (!_oss_c->_buffer_provided)
	_oss_set_outmem_d(_g, _out_len, _outlen, _outbuf);
    else {
	if (_flags & FRONT_ALIGN)
	    memmove(*_outbuf, *_out_pos, (size_t) _data_len);
	else
	    *_outbuf = *_out_pos;
	*_outlen = _data_len;
    }

    OSS_CNTX_POP(_oss_c)
}

static void _ep1Association_by_RTSE_Realiza(OssGlobal * _g, void * _inbuf)
{
    _EncDecGlobals *_oss_c = (_EncDecGlobals *)_g->encDecVar;
    _RealizationParameter	*_in_data;
    OSS_CNTX_INITZERO

    _in_data = (_RealizationParameter *) _inbuf;
    OSS_CNTX_ANCHOR_SET(8,13)
    _ep_RealizationParameter(_g, _in_data);
    OSS_CNTX_POP(_oss_c)
}

static void _ePData_RealizationParameter(OssGlobal * _g, void * _inbuf, char ** _outbuf, long * _outlen, unsigned int _flags)
{
    _EncDecGlobals *_oss_c = (_EncDecGlobals *)_g->encDecVar;
    _RealizationParameter	*_in_data;
    char *_out_buf;
    char **_out_pos = &_out_buf;
    long _out_len;
    long _data_len = 0;
    OSS_CNTX_INITZERO

    _in_data = (_RealizationParameter *) _inbuf;
    if (!_oss_c->_buffer_provided) *_outbuf = NULL;
    _out_buf = *_outbuf;
    _out_len = _oss_c->_oss_outbuflen = (_oss_c->_buffer_provided) ? *_outlen : 0;
    _out_buf += _out_len;
    OSS_CNTX_ANCHOR_SET(9,14)
    _data_len = _edRealizationParameter(_g, _out_pos, &_out_len, _in_data);
    _data_len += _oss_encd_tag_length(_g, _out_pos, &_out_len, _data_len, 0x30);
    if (!_oss_c->_buffer_provided)
	_oss_set_outmem_d(_g, _out_len, _outlen, _outbuf);
    else {
	if (_flags & FRONT_ALIGN)
	    memmove(*_outbuf, *_out_pos, (size_t) _data_len);
	else
	    *_outbuf = *_out_pos;
	*_outlen = _data_len;
    }

    OSS_CNTX_POP(_oss_c)
}

static void _epPData_RealizationParameter(OssGlobal * _g, void * _inbuf)
{
    _EncDecGlobals *_oss_c = (_EncDecGlobals *)_g->encDecVar;
    _RealizationParameter	*_in_data;
    OSS_CNTX_INITZERO

    _in_data = (_RealizationParameter *) _inbuf;
    OSS_CNTX_ANCHOR_SET(9,14)
    _ep_RealizationParameter(_g, _in_data);
    OSS_CNTX_POP(_oss_c)
}

static void _e2PData_with_concatenation_Re(OssGlobal * _g, void * _inbuf, char ** _outbuf, long * _outlen, unsigned int _flags)
{
    _EncDecGlobals *_oss_c = (_EncDecGlobals *)_g->encDecVar;
    _RealizationParameter	*_in_data;
    char *_out_buf;
    char **_out_pos = &_out_buf;
    long _out_len;
    long _data_len = 0;
    OSS_CNTX_INITZERO

    _in_data = (_RealizationParameter *) _inbuf;
    if (!_oss_c->_buffer_provided) *_outbuf = NULL;
    _out_buf = *_outbuf;
    _out_len = _oss_c->_oss_outbuflen = (_oss_c->_buffer_provided) ? *_outlen : 0;
    _out_buf += _out_len;
    OSS_CNTX_ANCHOR_SET(10,15)
    _data_len = _edRealizationParameter(_g, _out_pos, &_out_len, _in_data);
    _data_len += _oss_encd_tag_length(_g, _out_pos, &_out_len, _data_len, 0x30);
    if (!_oss_c->_buffer_provided)
	_oss_set_outmem_d(_g, _out_len, _outlen, _outbuf);
    else {
	if (_flags & FRONT_ALIGN)
	    memmove(*_outbuf, *_out_pos, (size_t) _data_len);
	else
	    *_outbuf = *_out_pos;
	*_outlen = _data_len;
    }

    OSS_CNTX_POP(_oss_c)
}

static void _ep2PData_with_concatenation_Re(OssGlobal * _g, void * _inbuf)
{
    _EncDecGlobals *_oss_c = (_EncDecGlobals *)_g->encDecVar;
    _RealizationParameter	*_in_data;
    OSS_CNTX_INITZERO

    _in_data = (_RealizationParameter *) _inbuf;
    OSS_CNTX_ANCHOR_SET(10,15)
    _ep_RealizationParameter(_g, _in_data);
    OSS_CNTX_POP(_oss_c)
}

static void _e3Transfer_by_RTSE_Realizatio(OssGlobal * _g, void * _inbuf, char ** _outbuf, long * _outlen, unsigned int _flags)
{
    _EncDecGlobals *_oss_c = (_EncDecGlobals *)_g->encDecVar;
    _RealizationParameter	*_in_data;
    char *_out_buf;
    char **_out_pos = &_out_buf;
    long _out_len;
    long _data_len = 0;
    OSS_CNTX_INITZERO

    _in_data = (_RealizationParameter *) _inbuf;
    if (!_oss_c->_buffer_provided) *_outbuf = NULL;
    _out_buf = *_outbuf;
    _out_len = _oss_c->_oss_outbuflen = (_oss_c->_buffer_provided) ? *_outlen : 0;
    _out_buf += _out_len;
    OSS_CNTX_ANCHOR_SET(11,16)
    _data_len = _edRealizationParameter(_g, _out_pos, &_out_len, _in_data);
    _data_len += _oss_encd_tag_length(_g, _out_pos, &_out_len, _data_len, 0x30);
    if (!_oss_c->_buffer_provided)
	_oss_set_outmem_d(_g, _out_len, _outlen, _outbuf);
    else {
	if (_flags & FRONT_ALIGN)
	    memmove(*_outbuf, *_out_pos, (size_t) _data_len);
	else
	    *_outbuf = *_out_pos;
	*_outlen = _data_len;
    }

    OSS_CNTX_POP(_oss_c)
}

static void _ep3Transfer_by_RTSE_Realizatio(OssGlobal * _g, void * _inbuf)
{
    _EncDecGlobals *_oss_c = (_EncDecGlobals *)_g->encDecVar;
    _RealizationParameter	*_in_data;
    OSS_CNTX_INITZERO

    _in_data = (_RealizationParameter *) _inbuf;
    OSS_CNTX_ANCHOR_SET(11,16)
    _ep_RealizationParameter(_g, _in_data);
    OSS_CNTX_POP(_oss_c)
}

void DLL_ENTRY_FDEF _emRemote_Operations_Useful_Def(struct ossGlobal * _g, int _pdunum, void * _inbuf)
{
    _EncDecGlobals *_oss_c = (_EncDecGlobals *)_g->encDecVar;
    char **_outbuf = &_oss_c->_oss_outbufpos;
    long *_outlen = &_oss_c->_oss_outbuflen;
    unsigned int _flags = _g->encodingFlags;
    _oss_c->_oss_context_anchor._state = _encoding_data;
    _oss_c->_oss_context_anchor._pdu_number = 0;
#if OSSDEBUG > 0
    if (_oss_c->reserved.fields.ext->debug_flags)
	_oss_db_e_pre(_g, _pdunum, _inbuf, NULL, _oss_c->_oss_outbufpos, _oss_c->_oss_outbuflen);
#else
    _oss_c->_oss_err_msg = NULL;
#endif

    if (_pdunum < 1 || _pdunum > 11)
	_oss_enc_error(_g, _pdu_range, _pdunum);
    else
	_Encoders[_pdunum - 1](_g, _inbuf, _outbuf, _outlen, _flags);
#if OSSDEBUG > 0
    _oss_c->_oss_err_msg = NULL;
    if (_oss_c->reserved.fields.ext->debug_flags)
	_oss_db_e_post(_g, 0, *_outbuf, *_outlen);
#endif
}

void DLL_ENTRY_FDEF _peRemote_Operations_Useful_Def(struct ossGlobal * _g, int _pdunum, void * _inbuf)
{
    _EncDecGlobals *_oss_c = (_EncDecGlobals *)_g->encDecVar;
    _oss_c->_oss_context_anchor._state = _encoding_data;
    _oss_c->_oss_context_anchor._pdu_number = 0;
#if OSSDEBUG > 0
    if (_oss_c->reserved.fields.ext->debug_flags)
	_oss_db_e_pre(_g, _pdunum, _inbuf, NULL, _oss_c->_oss_outbufpos, _oss_c->_oss_outbuflen);
#else
    _oss_c->_oss_err_msg = NULL;
#endif

    if (_g->encRules == OSS_PER_ALIGNED)
	_oss_c->_aligned = 1;
    else
	_oss_toed_error(_g, _toed_rules_not_supp_err, "UNALIGNED PER");

    if (_pdunum < 1 || _pdunum > 11)
	_oss_enc_error(_g, _pdu_range, _pdunum);
    else
	_pEncoders[_pdunum - 1](_g, _inbuf);

#if OSSDEBUG > 0
    _oss_c->_oss_err_msg = NULL;
    if (_oss_c->reserved.fields.ext->debug_flags)
	_oss_db_e_post(_g, 0, _oss_c->_oss_outbufpos, _oss_c->_oss_outbuflen);
#endif
}

static void _d_InvokeId(OssGlobal * _g, char ** _in_pos, long * _buf_len, long _data_length, unsigned int _data_tag, _InvokeId * _out_data)
{
    _EncDecGlobals *_oss_c = (_EncDecGlobals *)_g->encDecVar;
    char *_bufpos = *_in_pos;
    long _buflen = *_buf_len;

#ifndef OSS_NO_NESTING_CONTROL
    if (_oss_c->reserved.fields.ext->seqSetNestingLimit &&
	    ++_oss_c->reserved.fields.ext->seqSetNestingCounter >
	    _oss_c->reserved.fields.ext->seqSetNestingLimit)
	_oss_dec_error(_g, _seq_set_nesting_limit_exceeded, 0L);
#endif
    {
	OSS_CNTX_INIT

	if (!_oss_c->_tag_decoded) {
	    if (_buflen >= 1 && ((_bufpos[0]+1) & 0x1F)) {
		_buflen--;
		_oss_c->_bitpos = _bufpos[0] & 0x20;
		_data_tag = (_bufpos[0] & 0x1F) + (((unsigned int)(_bufpos[0] & 0xC0))<<8);
		_bufpos++;
	    } else
		_data_tag = _oss_dec_tag(_g, &_bufpos, &_buflen);
	    _oss_c->_tag_decoded = TRUE;
	}
	switch (_data_tag) {
	case 0x2: {
	    OSS_CNTX_PUSH(_oss_c, 0)
	    _out_data->choice = 1;
	    _oss_c->_tag_decoded = FALSE;
	    if (_buflen >= 1 && (_data_length = (unsigned char)_bufpos[0]) < 0x80) {
		_buflen--;
		_bufpos++;
	    } else
		_data_length = _oss_dec_length(_g, &_bufpos, &_buflen);
	    _out_data->u.present = _oss_dec_iint(_g, &_bufpos, &_buflen, _data_length);
	}   break;
	case 0x5: {
	    OSS_CNTX_PUSH(_oss_c, 1)
	    _out_data->choice = 2;
	    _oss_c->_tag_decoded = FALSE;
	    if (_buflen >= 1 && (_data_length = (unsigned char)_bufpos[0]) < 0x80) {
		_buflen--;
		_bufpos++;
	    } else
		_data_length = _oss_dec_length(_g, &_bufpos, &_buflen);
	    _out_data->u.absent = 0;
	    if (_data_length != 0)
		_oss_dec_error(_g, _inval_enc, 0L);
	}   break;
	default:
	    _oss_dec_error(_g, _unknown_field, _data_tag);
	}
	OSS_CNTX_POP(_oss_c)
    }
#ifndef OSS_NO_NESTING_CONTROL
    if (_oss_c->reserved.fields.ext->seqSetNestingLimit)
	_oss_c->reserved.fields.ext->seqSetNestingCounter--;
#endif
    *_in_pos = _bufpos;
    *_buf_len = _buflen;
}

static void _dp_InvokeId(OssGlobal * _g, _InvokeId * _out_data)
{
#if OSSDEBUG > 1 || !defined(OSS_NO_NESTING_CONTROL)
    _EncDecGlobals *_oss_c = (_EncDecGlobals *)_g->encDecVar;
#endif
#ifndef OSS_NO_NESTING_CONTROL
    if (_oss_c->reserved.fields.ext->seqSetNestingLimit &&
	    ++_oss_c->reserved.fields.ext->seqSetNestingCounter >
	    _oss_c->reserved.fields.ext->seqSetNestingLimit)
	_oss_dec_error(_g, _seq_set_nesting_limit_exceeded, 0L);
#endif
    {
	OSS_CNTX_INIT

	{

	    _out_data->choice = (int)_oss_pdec_nonneg_1int(_g) + 1;
	}
	switch (_out_data->choice) {
	case 1:
	    OSS_CNTX_PUSH(_oss_c, 0)
	    _out_data->u.present = (OSS_INT32)_oss_pdec_unconstr_limited_int_l(_g, INT_MIN, INT_MAX);
	    break;
	case 2:
	    OSS_CNTX_PUSH(_oss_c, 1)
	    break;
	default:
	    _oss_enc_error(_g, _bad_choice, _out_data->choice);	/* Bad choice selector. */
	}
	OSS_CNTX_POP(_oss_c)
    }
#ifndef OSS_NO_NESTING_CONTROL
    if (_oss_c->reserved.fields.ext->seqSetNestingLimit)
	_oss_c->reserved.fields.ext->seqSetNestingCounter--;
#endif
}

static void _d_RealizationParameter(OssGlobal * _g, char ** _in_pos, long * _buf_len, long _data_length, unsigned int _data_tag, _RealizationParameter * _out_data)
{
    _EncDecGlobals *_oss_c = (_EncDecGlobals *)_g->encDecVar;
    char *_bufpos = *_in_pos;
    long _buflen = *_buf_len;

#ifndef OSS_NO_NESTING_CONTROL
    if (_oss_c->reserved.fields.ext->seqSetNestingLimit &&
	    ++_oss_c->reserved.fields.ext->seqSetNestingCounter >
	    _oss_c->reserved.fields.ext->seqSetNestingLimit)
	_oss_dec_error(_g, _seq_set_nesting_limit_exceeded, 0L);
#endif
    {
	long _total_len = _data_length;
	char *_end_pos = _total_len < 0 ? (char *)OSS_PTR_MAX : _bufpos + _total_len;
	OSS_CNTX_INIT

	_out_data->bit_mask = 0;
	OSS_CNTX_PUSH(_oss_c, 3)
	if (!_oss_c->_tag_decoded && _buflen >= 2 && (unsigned char)_bufpos[0] == 10 && (_data_length = (unsigned char)_bufpos[1]) < 0x80) {
	    _buflen -= 2;
	    _bufpos += 2;
	} else {
	    if (!_oss_c->_tag_decoded || _data_tag == 0xA) {
		_data_length = _oss_dec_tag_length(_g, &_bufpos, &_buflen, !_oss_c->_tag_decoded ? 0xA : 0);
	    } else
		_oss_dec_error(_g, _tag_mismatch, _data_tag | 0xA0000);
	    _oss_c->_tag_decoded = FALSE;
	}
	_data_tag = 0xA;
	_out_data->realization_type = (enum _enum1 )_oss_dec_uiint(_g, &_bufpos, &_buflen, _data_length);
	OSS_CNTX_POP(_oss_c)
	if (_bufpos < _end_pos) {
	    if (_buflen >= 1 && ((_bufpos[0]+1) & 0x1F)) {
		_buflen--;
		_oss_c->_bitpos = _bufpos[0] & 0x20;
		_data_tag = (_bufpos[0] & 0x1F) + (((unsigned int)(_bufpos[0] & 0xC0))<<8);
		_bufpos++;
	    } else
		_data_tag = _oss_dec_tag(_g, &_bufpos, &_buflen);
	    _oss_c->_tag_decoded = TRUE;
	}
	if (_data_tag != 0x1 || _bufpos >= _end_pos)
	 {
	    _out_data->bit_mask &= ~0x80000000;
#ifndef OSS_DO_NOT_SET_DEFAULT_VALUES
	    memcpy(&_out_data->concatenation, &__shared5::default_concatenation, sizeof(__shared5::default_concatenation));
#else
	    _out_data->concatenation = 0;
#endif
	}
else {
	    _out_data->bit_mask |= 0x80000000;
	    OSS_CNTX_PUSH(_oss_c, 2)
	    if (!_oss_c->_tag_decoded && _buflen >= 2 && (unsigned char)_bufpos[0] == 1 && (_data_length = (unsigned char)_bufpos[1]) < 0x80) {
		_buflen -= 2;
		_bufpos += 2;
	    } else {
		if (!_oss_c->_tag_decoded || _data_tag == 0x1) {
		    _data_length = _oss_dec_tag_length(_g, &_bufpos, &_buflen, !_oss_c->_tag_decoded ? 0x1 : 0);
		} else
		    _oss_dec_error(_g, _tag_mismatch, _data_tag | 0x10000);
		_oss_c->_tag_decoded = FALSE;
	    }
	    _data_tag = 0x1;
	    _out_data->concatenation = _oss_dec_bool(_g, &_bufpos, &_buflen, _data_length);
	    OSS_CNTX_POP(_oss_c)
	}
	if (_bufpos != _end_pos) {
	    if (_total_len < 0) {
		if (!_oss_c->_tag_decoded)
		    _data_tag = _oss_dec_tag(_g, &_bufpos, &_buflen);

		if (_data_tag)
		    _oss_dec_error(_g, _expec_eoc, 0L);
		if (_oss_dec_length(_g, &_bufpos, &_buflen))
		    _oss_dec_error(_g, _non_std_eoc, 0L);
		_oss_c->_tag_decoded = FALSE;
	    } else
		_oss_dec_error(_g, _inconsis_len, 0L);
	}
    }
#ifndef OSS_NO_NESTING_CONTROL
    if (_oss_c->reserved.fields.ext->seqSetNestingLimit)
	_oss_c->reserved.fields.ext->seqSetNestingCounter--;
#endif
    *_in_pos = _bufpos;
    *_buf_len = _buflen;
}

static void _dp_RealizationParameter(OssGlobal * _g, _RealizationParameter * _out_data)
{
#if OSSDEBUG > 1 || !defined(OSS_NO_NESTING_CONTROL)
    _EncDecGlobals *_oss_c = (_EncDecGlobals *)_g->encDecVar;
#endif
#ifndef OSS_NO_NESTING_CONTROL
    if (_oss_c->reserved.fields.ext->seqSetNestingLimit &&
	    ++_oss_c->reserved.fields.ext->seqSetNestingCounter >
	    _oss_c->reserved.fields.ext->seqSetNestingLimit)
	_oss_dec_error(_g, _seq_set_nesting_limit_exceeded, 0L);
#endif
    {
	OSS_CNTX_INIT

	_out_data->bit_mask = (OSS_UINT32)_oss_get_1bit_unaligned(_g) << 24;
	OSS_CNTX_PUSH(_oss_c, 3)
	_out_data->realization_type = (enum _enum1)_oss_pdec_uenum(_g, (struct _enum_data*)&_enums[0], NULL);
	OSS_CNTX_SET(2)
	if (_out_data->bit_mask & 0x80000000) {
	    _out_data->concatenation = _oss_get_1bit_unaligned(_g) ? TRUE : FALSE;
	} else {
#ifndef OSS_DO_NOT_SET_DEFAULT_VALUES
	    memcpy(&_out_data->concatenation, &__shared5::default_concatenation, sizeof(__shared5::default_concatenation));
#else
	    _out_data->concatenation = 0;
#endif
	}
	OSS_CNTX_POP(_oss_c)
    }
#ifndef OSS_NO_NESTING_CONTROL
    if (_oss_c->reserved.fields.ext->seqSetNestingLimit)
	_oss_c->reserved.fields.ext->seqSetNestingCounter--;
#endif
}

static void * _dTeller(OssGlobal * _g)
{
    _EncDecGlobals *_oss_c = (_EncDecGlobals *)_g->encDecVar;
    OSS_INT32 *_out_data;
    char *_bufpos = _oss_c->_oss_inbufpos;
    long _buflen = _oss_c->_oss_inbuflen;
    long _data_length;
    unsigned int _data_tag;
    OSS_CNTX_INITZERO

    OSS_CNTX_ANCHOR_SET(1,4)
    _out_data = (OSS_INT32 *)_oss_dec_const_alloc(_g, sizeof(OSS_INT32));
    _oss_c->_tag_decoded = FALSE;
    if (_buflen >= 2 && (unsigned char)_bufpos[0] == 2 && (_data_length = (unsigned char)_bufpos[1]) < 0x80) {
	_buflen -= 2;
	_bufpos += 2;
    } else
	_data_length = _oss_dec_tag_length(_g, &_bufpos, &_buflen, 0x2);
    _data_tag = 0x2;
    *_out_data = _oss_dec_iint(_g, &_bufpos, &_buflen, _data_length);
    OSS_CNTX_POP(_oss_c)
    _oss_c->_oss_inbufpos = _bufpos;
    _oss_c->_oss_inbuflen = _buflen;
    return _out_data;
}

static void * _dpTeller(OssGlobal * _g)
{
    _EncDecGlobals *_oss_c = (_EncDecGlobals *)_g->encDecVar;
    OSS_INT32	*_out_data;
    OSS_CNTX_INITZERO

    OSS_CNTX_ANCHOR_SET(1,4)
    _out_data = (OSS_INT32 *)_oss_dec_const_alloc(_g, sizeof(OSS_INT32));
    *_out_data = (OSS_INT32)_oss_pdec_unconstr_limited_int_l(_g, INT_MIN, INT_MAX);
    OSS_CNTX_POP(_oss_c)
    return _out_data;
}

static void * _dDecimal(OssGlobal * _g)
{
    _EncDecGlobals *_oss_c = (_EncDecGlobals *)_g->encDecVar;
    _Decimal *_out_data;
    char *_bufpos = _oss_c->_oss_inbufpos;
    long _buflen = _oss_c->_oss_inbuflen;
    long _data_length;
    unsigned int _data_tag;
    OSS_CNTX_INITZERO

    OSS_CNTX_ANCHOR_SET(2,5)
    _out_data = (_Decimal *)_oss_dec_const_alloc(_g, sizeof(_Decimal));
    _oss_c->_tag_decoded = FALSE;
    if (_buflen >= 2 && (unsigned char)_bufpos[0] == 48 && (_data_length = (signed char)_bufpos[1]) - 1 >= 0) {
	_buflen -= 2;
	_bufpos += 2;
    } else
	_data_length = _oss_dec_tag_length(_g, &_bufpos, &_buflen, 0x10);
    _data_tag = 0x10;
#ifndef OSS_NO_NESTING_CONTROL
    if (_oss_c->reserved.fields.ext->seqSetNestingLimit &&
	    ++_oss_c->reserved.fields.ext->seqSetNestingCounter >
	    _oss_c->reserved.fields.ext->seqSetNestingLimit)
	_oss_dec_error(_g, _seq_set_nesting_limit_exceeded, 0L);
#endif
    {
	long _total_len = _data_length;
	char *_end_pos = _total_len < 0 ? (char *)OSS_PTR_MAX : _bufpos + _total_len;
	OSS_CNTX_INIT

	OSS_CNTX_PUSH(_oss_c, 7)
	if (_buflen >= 2 && (unsigned char)_bufpos[0] == 2 && (_data_length = (unsigned char)_bufpos[1]) < 0x80) {
	    _buflen -= 2;
	    _bufpos += 2;
	} else
	    _data_length = _oss_dec_tag_length(_g, &_bufpos, &_buflen, 0x2);
	_data_tag = 0x2;
	_out_data->mantisse = _oss_dec_iint(_g, &_bufpos, &_buflen, _data_length);
	OSS_CNTX_SET(6)
	if (_buflen >= 2 && (unsigned char)_bufpos[0] == 2 && (_data_length = (unsigned char)_bufpos[1]) < 0x80) {
	    _buflen -= 2;
	    _bufpos += 2;
	} else
	    _data_length = _oss_dec_tag_length(_g, &_bufpos, &_buflen, 0x2);
	_data_tag = 0x2;
	_out_data->decimal = _oss_dec_iint(_g, &_bufpos, &_buflen, _data_length);
	OSS_CNTX_POP(_oss_c)
	if (_bufpos != _end_pos) {
	    if (_total_len < 0) {
		if (_buflen >= 1 && (_data_tag = _bufpos[0]) == 0) {
		    _buflen--;
		    _bufpos++;
		} else
		    _data_tag = _oss_dec_tag(_g, &_bufpos, &_buflen);

		if (_data_tag)
		    _oss_dec_error(_g, _expec_eoc, 0L);
		if (_oss_dec_length(_g, &_bufpos, &_buflen))
		    _oss_dec_error(_g, _non_std_eoc, 0L);
		_oss_c->_tag_decoded = FALSE;
	    } else
		_oss_dec_error(_g, _inconsis_len, 0L);
	}
    }
#ifndef OSS_NO_NESTING_CONTROL
    if (_oss_c->reserved.fields.ext->seqSetNestingLimit)
	_oss_c->reserved.fields.ext->seqSetNestingCounter--;
#endif
    OSS_CNTX_POP(_oss_c)
    _oss_c->_oss_inbufpos = _bufpos;
    _oss_c->_oss_inbuflen = _buflen;
    return _out_data;
}

static void * _dpDecimal(OssGlobal * _g)
{
    _EncDecGlobals *_oss_c = (_EncDecGlobals *)_g->encDecVar;
    _Decimal	*_out_data;
    OSS_CNTX_INITZERO

    OSS_CNTX_ANCHOR_SET(2,5)
    _out_data = (_Decimal *)_oss_dec_const_alloc(_g, sizeof(_Decimal));
#ifndef OSS_NO_NESTING_CONTROL
    if (_oss_c->reserved.fields.ext->seqSetNestingLimit &&
	    ++_oss_c->reserved.fields.ext->seqSetNestingCounter >
	    _oss_c->reserved.fields.ext->seqSetNestingLimit)
	_oss_dec_error(_g, _seq_set_nesting_limit_exceeded, 0L);
#endif
    {
	OSS_CNTX_INIT

	OSS_CNTX_PUSH(_oss_c, 7)
	_out_data->mantisse = (OSS_INT32)_oss_pdec_unconstr_limited_int_l(_g, INT_MIN, INT_MAX);
	OSS_CNTX_SET(6)
	_out_data->decimal = (OSS_INT32)_oss_pdec_unconstr_limited_int_l(_g, INT_MIN, INT_MAX);
	OSS_CNTX_POP(_oss_c)
    }
#ifndef OSS_NO_NESTING_CONTROL
    if (_oss_c->reserved.fields.ext->seqSetNestingLimit)
	_oss_c->reserved.fields.ext->seqSetNestingCounter--;
#endif
    OSS_CNTX_POP(_oss_c)
    return _out_data;
}

static void * _dSecurityProblem(OssGlobal * _g)
{
    _EncDecGlobals *_oss_c = (_EncDecGlobals *)_g->encDecVar;
    OSS_INT32 *_out_data;
    char *_bufpos = _oss_c->_oss_inbufpos;
    long _buflen = _oss_c->_oss_inbuflen;
    long _data_length;
    unsigned int _data_tag;
    OSS_CNTX_INITZERO

    OSS_CNTX_ANCHOR_SET(3,8)
    _out_data = (OSS_INT32 *)_oss_dec_const_alloc(_g, sizeof(OSS_INT32));
    _oss_c->_tag_decoded = FALSE;
    if (_buflen >= 2 && (unsigned char)_bufpos[0] == 2 && (_data_length = (unsigned char)_bufpos[1]) < 0x80) {
	_buflen -= 2;
	_bufpos += 2;
    } else
	_data_length = _oss_dec_tag_length(_g, &_bufpos, &_buflen, 0x2);
    _data_tag = 0x2;
    *_out_data = _oss_dec_iint(_g, &_bufpos, &_buflen, _data_length);
    OSS_CNTX_POP(_oss_c)
    _oss_c->_oss_inbufpos = _bufpos;
    _oss_c->_oss_inbuflen = _buflen;
    return _out_data;
}

static void * _dpSecurityProblem(OssGlobal * _g)
{
    _EncDecGlobals *_oss_c = (_EncDecGlobals *)_g->encDecVar;
    OSS_INT32	*_out_data;
    OSS_CNTX_INITZERO

    OSS_CNTX_ANCHOR_SET(3,8)
    _out_data = (OSS_INT32 *)_oss_dec_const_alloc(_g, sizeof(OSS_INT32));
    *_out_data = (OSS_INT32)_oss_pdec_unconstr_limited_int_l(_g, INT_MIN, INT_MAX);
    OSS_CNTX_POP(_oss_c)
    return _out_data;
}

static void * _dNoInvokeId(OssGlobal * _g)
{
    _EncDecGlobals *_oss_c = (_EncDecGlobals *)_g->encDecVar;
    _InvokeId *_out_data;
    char *_bufpos = _oss_c->_oss_inbufpos;
    long _buflen = _oss_c->_oss_inbuflen;
    OSS_CNTX_INITZERO

    OSS_CNTX_ANCHOR_SET(4,9)
    _out_data = (_InvokeId *)_oss_dec_const_alloc(_g, sizeof(_InvokeId));
    _oss_c->_tag_decoded = FALSE;
    _d_InvokeId(_g, &_bufpos, &_buflen, 0, 0, _out_data);
    OSS_CNTX_POP(_oss_c)
    _oss_c->_oss_inbufpos = _bufpos;
    _oss_c->_oss_inbuflen = _buflen;
    return _out_data;
}

static void * _dpNoInvokeId(OssGlobal * _g)
{
    _EncDecGlobals *_oss_c = (_EncDecGlobals *)_g->encDecVar;
    _InvokeId	*_out_data;
    OSS_CNTX_INITZERO

    OSS_CNTX_ANCHOR_SET(4,9)
    _out_data = (_InvokeId *)_oss_dec_const_alloc(_g, sizeof(_InvokeId));
    _dp_InvokeId(_g, _out_data);
    OSS_CNTX_POP(_oss_c)
    return _out_data;
}

static void * _dROSEInvokeIds(OssGlobal * _g)
{
    _EncDecGlobals *_oss_c = (_EncDecGlobals *)_g->encDecVar;
    _InvokeId *_out_data;
    char *_bufpos = _oss_c->_oss_inbufpos;
    long _buflen = _oss_c->_oss_inbuflen;
    OSS_CNTX_INITZERO

    OSS_CNTX_ANCHOR_SET(5,10)
    _out_data = (_InvokeId *)_oss_dec_const_alloc(_g, sizeof(_InvokeId));
    _oss_c->_tag_decoded = FALSE;
    _d_InvokeId(_g, &_bufpos, &_buflen, 0, 0, _out_data);
    OSS_CNTX_POP(_oss_c)
    _oss_c->_oss_inbufpos = _bufpos;
    _oss_c->_oss_inbuflen = _buflen;
    return _out_data;
}

static void * _dpROSEInvokeIds(OssGlobal * _g)
{
    _EncDecGlobals *_oss_c = (_EncDecGlobals *)_g->encDecVar;
    _InvokeId	*_out_data;
    OSS_CNTX_INITZERO

    OSS_CNTX_ANCHOR_SET(5,10)
    _out_data = (_InvokeId *)_oss_dec_const_alloc(_g, sizeof(_InvokeId));
    _dp_InvokeId(_g, _out_data);
    OSS_CNTX_POP(_oss_c)
    return _out_data;
}

static void * _dAcse_RealizationParameter(OssGlobal * _g)
{
    _EncDecGlobals *_oss_c = (_EncDecGlobals *)_g->encDecVar;
    _RealizationParameter *_out_data;
    char *_bufpos = _oss_c->_oss_inbufpos;
    long _buflen = _oss_c->_oss_inbuflen;
    long _data_length;
    unsigned int _data_tag;
    OSS_CNTX_INITZERO

    OSS_CNTX_ANCHOR_SET(6,11)
    _out_data = (_RealizationParameter *)_oss_dec_const_alloc(_g, sizeof(_RealizationParameter));
    _oss_c->_tag_decoded = FALSE;
    if (_buflen >= 2 && (unsigned char)_bufpos[0] == 48 && (_data_length = (signed char)_bufpos[1]) - 1 >= 0) {
	_buflen -= 2;
	_bufpos += 2;
    } else
	_data_length = _oss_dec_tag_length(_g, &_bufpos, &_buflen, 0x10);
    _data_tag = 0x10;
    _d_RealizationParameter(_g, &_bufpos, &_buflen, _data_length, _data_tag, _out_data);
    OSS_CNTX_POP(_oss_c)
    _oss_c->_oss_inbufpos = _bufpos;
    _oss_c->_oss_inbuflen = _buflen;
    return _out_data;
}

static void * _dpAcse_RealizationParameter(OssGlobal * _g)
{
    _EncDecGlobals *_oss_c = (_EncDecGlobals *)_g->encDecVar;
    _RealizationParameter	*_out_data;
    OSS_CNTX_INITZERO

    OSS_CNTX_ANCHOR_SET(6,11)
    _out_data = (_RealizationParameter *)_oss_dec_const_alloc(_g, sizeof(_RealizationParameter));
    _dp_RealizationParameter(_g, _out_data);
    OSS_CNTX_POP(_oss_c)
    return _out_data;
}

static void * _d0Acse_with_concatenation_Rea(OssGlobal * _g)
{
    _EncDecGlobals *_oss_c = (_EncDecGlobals *)_g->encDecVar;
    _RealizationParameter *_out_data;
    char *_bufpos = _oss_c->_oss_inbufpos;
    long _buflen = _oss_c->_oss_inbuflen;
    long _data_length;
    unsigned int _data_tag;
    OSS_CNTX_INITZERO

    OSS_CNTX_ANCHOR_SET(7,12)
    _out_data = (_RealizationParameter *)_oss_dec_const_alloc(_g, sizeof(_RealizationParameter));
    _oss_c->_tag_decoded = FALSE;
    if (_buflen >= 2 && (unsigned char)_bufpos[0] == 48 && (_data_length = (signed char)_bufpos[1]) - 1 >= 0) {
	_buflen -= 2;
	_bufpos += 2;
    } else
	_data_length = _oss_dec_tag_length(_g, &_bufpos, &_buflen, 0x10);
    _data_tag = 0x10;
    _d_RealizationParameter(_g, &_bufpos, &_buflen, _data_length, _data_tag, _out_data);
    OSS_CNTX_POP(_oss_c)
    _oss_c->_oss_inbufpos = _bufpos;
    _oss_c->_oss_inbuflen = _buflen;
    return _out_data;
}

static void * _dp0Acse_with_concatenation_Rea(OssGlobal * _g)
{
    _EncDecGlobals *_oss_c = (_EncDecGlobals *)_g->encDecVar;
    _RealizationParameter	*_out_data;
    OSS_CNTX_INITZERO

    OSS_CNTX_ANCHOR_SET(7,12)
    _out_data = (_RealizationParameter *)_oss_dec_const_alloc(_g, sizeof(_RealizationParameter));
    _dp_RealizationParameter(_g, _out_data);
    OSS_CNTX_POP(_oss_c)
    return _out_data;
}

static void * _d1Association_by_RTSE_Realiza(OssGlobal * _g)
{
    _EncDecGlobals *_oss_c = (_EncDecGlobals *)_g->encDecVar;
    _RealizationParameter *_out_data;
    char *_bufpos = _oss_c->_oss_inbufpos;
    long _buflen = _oss_c->_oss_inbuflen;
    long _data_length;
    unsigned int _data_tag;
    OSS_CNTX_INITZERO

    OSS_CNTX_ANCHOR_SET(8,13)
    _out_data = (_RealizationParameter *)_oss_dec_const_alloc(_g, sizeof(_RealizationParameter));
    _oss_c->_tag_decoded = FALSE;
    if (_buflen >= 2 && (unsigned char)_bufpos[0] == 48 && (_data_length = (signed char)_bufpos[1]) - 1 >= 0) {
	_buflen -= 2;
	_bufpos += 2;
    } else
	_data_length = _oss_dec_tag_length(_g, &_bufpos, &_buflen, 0x10);
    _data_tag = 0x10;
    _d_RealizationParameter(_g, &_bufpos, &_buflen, _data_length, _data_tag, _out_data);
    OSS_CNTX_POP(_oss_c)
    _oss_c->_oss_inbufpos = _bufpos;
    _oss_c->_oss_inbuflen = _buflen;
    return _out_data;
}

static void * _dp1Association_by_RTSE_Realiza(OssGlobal * _g)
{
    _EncDecGlobals *_oss_c = (_EncDecGlobals *)_g->encDecVar;
    _RealizationParameter	*_out_data;
    OSS_CNTX_INITZERO

    OSS_CNTX_ANCHOR_SET(8,13)
    _out_data = (_RealizationParameter *)_oss_dec_const_alloc(_g, sizeof(_RealizationParameter));
    _dp_RealizationParameter(_g, _out_data);
    OSS_CNTX_POP(_oss_c)
    return _out_data;
}

static void * _dPData_RealizationParameter(OssGlobal * _g)
{
    _EncDecGlobals *_oss_c = (_EncDecGlobals *)_g->encDecVar;
    _RealizationParameter *_out_data;
    char *_bufpos = _oss_c->_oss_inbufpos;
    long _buflen = _oss_c->_oss_inbuflen;
    long _data_length;
    unsigned int _data_tag;
    OSS_CNTX_INITZERO

    OSS_CNTX_ANCHOR_SET(9,14)
    _out_data = (_RealizationParameter *)_oss_dec_const_alloc(_g, sizeof(_RealizationParameter));
    _oss_c->_tag_decoded = FALSE;
    if (_buflen >= 2 && (unsigned char)_bufpos[0] == 48 && (_data_length = (signed char)_bufpos[1]) - 1 >= 0) {
	_buflen -= 2;
	_bufpos += 2;
    } else
	_data_length = _oss_dec_tag_length(_g, &_bufpos, &_buflen, 0x10);
    _data_tag = 0x10;
    _d_RealizationParameter(_g, &_bufpos, &_buflen, _data_length, _data_tag, _out_data);
    OSS_CNTX_POP(_oss_c)
    _oss_c->_oss_inbufpos = _bufpos;
    _oss_c->_oss_inbuflen = _buflen;
    return _out_data;
}

static void * _dpPData_RealizationParameter(OssGlobal * _g)
{
    _EncDecGlobals *_oss_c = (_EncDecGlobals *)_g->encDecVar;
    _RealizationParameter	*_out_data;
    OSS_CNTX_INITZERO

    OSS_CNTX_ANCHOR_SET(9,14)
    _out_data = (_RealizationParameter *)_oss_dec_const_alloc(_g, sizeof(_RealizationParameter));
    _dp_RealizationParameter(_g, _out_data);
    OSS_CNTX_POP(_oss_c)
    return _out_data;
}

static void * _d2PData_with_concatenation_Re(OssGlobal * _g)
{
    _EncDecGlobals *_oss_c = (_EncDecGlobals *)_g->encDecVar;
    _RealizationParameter *_out_data;
    char *_bufpos = _oss_c->_oss_inbufpos;
    long _buflen = _oss_c->_oss_inbuflen;
    long _data_length;
    unsigned int _data_tag;
    OSS_CNTX_INITZERO

    OSS_CNTX_ANCHOR_SET(10,15)
    _out_data = (_RealizationParameter *)_oss_dec_const_alloc(_g, sizeof(_RealizationParameter));
    _oss_c->_tag_decoded = FALSE;
    if (_buflen >= 2 && (unsigned char)_bufpos[0] == 48 && (_data_length = (signed char)_bufpos[1]) - 1 >= 0) {
	_buflen -= 2;
	_bufpos += 2;
    } else
	_data_length = _oss_dec_tag_length(_g, &_bufpos, &_buflen, 0x10);
    _data_tag = 0x10;
    _d_RealizationParameter(_g, &_bufpos, &_buflen, _data_length, _data_tag, _out_data);
    OSS_CNTX_POP(_oss_c)
    _oss_c->_oss_inbufpos = _bufpos;
    _oss_c->_oss_inbuflen = _buflen;
    return _out_data;
}

static void * _dp2PData_with_concatenation_Re(OssGlobal * _g)
{
    _EncDecGlobals *_oss_c = (_EncDecGlobals *)_g->encDecVar;
    _RealizationParameter	*_out_data;
    OSS_CNTX_INITZERO

    OSS_CNTX_ANCHOR_SET(10,15)
    _out_data = (_RealizationParameter *)_oss_dec_const_alloc(_g, sizeof(_RealizationParameter));
    _dp_RealizationParameter(_g, _out_data);
    OSS_CNTX_POP(_oss_c)
    return _out_data;
}

static void * _d3Transfer_by_RTSE_Realizatio(OssGlobal * _g)
{
    _EncDecGlobals *_oss_c = (_EncDecGlobals *)_g->encDecVar;
    _RealizationParameter *_out_data;
    char *_bufpos = _oss_c->_oss_inbufpos;
    long _buflen = _oss_c->_oss_inbuflen;
    long _data_length;
    unsigned int _data_tag;
    OSS_CNTX_INITZERO

    OSS_CNTX_ANCHOR_SET(11,16)
    _out_data = (_RealizationParameter *)_oss_dec_const_alloc(_g, sizeof(_RealizationParameter));
    _oss_c->_tag_decoded = FALSE;
    if (_buflen >= 2 && (unsigned char)_bufpos[0] == 48 && (_data_length = (signed char)_bufpos[1]) - 1 >= 0) {
	_buflen -= 2;
	_bufpos += 2;
    } else
	_data_length = _oss_dec_tag_length(_g, &_bufpos, &_buflen, 0x10);
    _data_tag = 0x10;
    _d_RealizationParameter(_g, &_bufpos, &_buflen, _data_length, _data_tag, _out_data);
    OSS_CNTX_POP(_oss_c)
    _oss_c->_oss_inbufpos = _bufpos;
    _oss_c->_oss_inbuflen = _buflen;
    return _out_data;
}

static void * _dp3Transfer_by_RTSE_Realizatio(OssGlobal * _g)
{
    _EncDecGlobals *_oss_c = (_EncDecGlobals *)_g->encDecVar;
    _RealizationParameter	*_out_data;
    OSS_CNTX_INITZERO

    OSS_CNTX_ANCHOR_SET(11,16)
    _out_data = (_RealizationParameter *)_oss_dec_const_alloc(_g, sizeof(_RealizationParameter));
    _dp_RealizationParameter(_g, _out_data);
    OSS_CNTX_POP(_oss_c)
    return _out_data;
}

void DLL_ENTRY_FDEF _dmRemote_Operations_Useful_Def(struct ossGlobal * _g, int * _pdunum, void ** _outbuf)
{
    _EncDecGlobals *_oss_c = (_EncDecGlobals *)_g->encDecVar;

    _oss_c->_oss_context_anchor._state = _decoding_data;
    _oss_c->_oss_context_anchor._pdu_number = 0;
#if OSSDEBUG > 0
    if (_oss_c->reserved.fields.ext->debug_flags)
	_oss_db_d_pre(_g, _oss_c->_oss_inbufpos, _oss_c->_oss_inbuflen, NULL);
#else
    _oss_c->_oss_err_msg = NULL;
#endif

    if (*_pdunum < 1 || *_pdunum > 11)
	_oss_dec_error(_g, _pdu_range, *_pdunum);
    *_outbuf = _Decoders[*_pdunum - 1](_g);

#if OSSDEBUG > 0
    _oss_c->_oss_err_msg = NULL;
    if (_oss_c->reserved.fields.ext->debug_flags)
	_oss_db_d_post(_g, 0, *_pdunum, _outbuf);
#endif
}

void DLL_ENTRY_FDEF _pdRemote_Operations_Useful_Def(struct ossGlobal * _g, int * _pdunum, void ** _outbuf)
{
    _EncDecGlobals *_oss_c = (_EncDecGlobals *)_g->encDecVar;
    _oss_c->_oss_context_anchor._state = _decoding_data;
    _oss_c->_oss_context_anchor._pdu_number = 0;
#if OSSDEBUG > 0
    if (_oss_c->reserved.fields.ext->debug_flags)
	_oss_db_d_pre(_g, _oss_c->_oss_inbufpos, _oss_c->_oss_inbuflen, NULL);
#else
    _oss_c->_oss_err_msg = NULL;
#endif

    if (_g->encRules == OSS_PER_ALIGNED)
	_oss_c->_aligned = 1;
    else
	_oss_toed_error(_g, _toed_rules_not_supp_err, "UNALIGNED PER");

    if (*_pdunum < 1 || *_pdunum > 11)
	_oss_dec_error(_g, _pdu_range, *_pdunum);
#ifndef OSS_NO_STRICT_ENCODING_DECODING_CHECKING
    if (!_oss_c->_oss_inbuflen && (_g->decodingFlags & STRICT_ENCODING_DECODING_RULES)) {
	_oss_c->_oss_context_anchor._pdu_number = *_pdunum;
	_oss_dec_error(_g, _more_input, 0L);
    }
#endif
    *_outbuf = _pDecoders[*_pdunum - 1](_g);

#if OSSDEBUG > 0
    _oss_c->_oss_err_msg = NULL;
    if (_oss_c->reserved.fields.ext->debug_flags)
	_oss_db_d_post(_g, 0, *_pdunum, _outbuf);
#endif
}

#if (OSS_TOED_API_LEVEL < 22) || !defined(OSSNOFREEPDU)
static void _fTeller(OssGlobal * _g, void * _data)
{
    OSS_INT32	*_data_ptr;
    _data_ptr = (OSS_INT32 *)_data;
    _oss_dec_free(_g, _data_ptr);
}

static void _fDecimal(OssGlobal * _g, void * _data)
{
    _Decimal	*_data_ptr;
    _data_ptr = (_Decimal *)_data;
    _oss_dec_free(_g, _data_ptr);
}

static void _fSecurityProblem(OssGlobal * _g, void * _data)
{
    OSS_INT32	*_data_ptr;
    _data_ptr = (OSS_INT32 *)_data;
    _oss_dec_free(_g, _data_ptr);
}

static void _fNoInvokeId(OssGlobal * _g, void * _data)
{
    _InvokeId	*_data_ptr;
    _data_ptr = (_InvokeId *)_data;
    _oss_dec_free(_g, _data_ptr);
}

static void _fROSEInvokeIds(OssGlobal * _g, void * _data)
{
    _InvokeId	*_data_ptr;
    _data_ptr = (_InvokeId *)_data;
    _oss_dec_free(_g, _data_ptr);
}

static void _fAcse_RealizationParameter(OssGlobal * _g, void * _data)
{
    _RealizationParameter	*_data_ptr;
    _data_ptr = (_RealizationParameter *)_data;
    _oss_dec_free(_g, _data_ptr);
}

static void _f0Acse_with_concatenation_Rea(OssGlobal * _g, void * _data)
{
    _RealizationParameter	*_data_ptr;
    _data_ptr = (_RealizationParameter *)_data;
    _oss_dec_free(_g, _data_ptr);
}

static void _f1Association_by_RTSE_Realiza(OssGlobal * _g, void * _data)
{
    _RealizationParameter	*_data_ptr;
    _data_ptr = (_RealizationParameter *)_data;
    _oss_dec_free(_g, _data_ptr);
}

static void _fPData_RealizationParameter(OssGlobal * _g, void * _data)
{
    _RealizationParameter	*_data_ptr;
    _data_ptr = (_RealizationParameter *)_data;
    _oss_dec_free(_g, _data_ptr);
}

static void _f2PData_with_concatenation_Re(OssGlobal * _g, void * _data)
{
    _RealizationParameter	*_data_ptr;
    _data_ptr = (_RealizationParameter *)_data;
    _oss_dec_free(_g, _data_ptr);
}

static void _f3Transfer_by_RTSE_Realizatio(OssGlobal * _g, void * _data)
{
    _RealizationParameter	*_data_ptr;
    _data_ptr = (_RealizationParameter *)_data;
    _oss_dec_free(_g, _data_ptr);
}

int DLL_ENTRY_FDEF _fmRemote_Operations_Useful_Def(struct ossGlobal * _g, int _pdunum, void * _data)
{
    if (_pdunum < 1 || _pdunum > 11)
	return PDU_RANGE;
    else
	_FreePDU[_pdunum - 1](_g, _data);

    return PDU_FREED;
}

#endif
#ifdef OSSPRINT
static void _p_InvokeId(OssGlobal * _g, _InvokeId * _data_ptr)
{
    switch (_data_ptr->choice) {
    case 1:
	ossPrint(_g, "present : ");
	{
	    LONG_LONG value = _data_ptr->u.present;

	    ossPrint(_g, LLONG_FMT, value);
	}
	break;
    case 2:
	ossPrint(_g, "absent : ");
	ossPrint(_g, "NULL");
	break;
    default:
	ossPrint(_g, "<unknown choice>");
    }

}

static void _p_RealizationParameter(OssGlobal * _g, _RealizationParameter * _data_ptr)
{
    {
	_oss_indent(_g, 1);
	ossPrint(_g, "{");
	_oss_indent(_g, 0);
	ossPrint(_g, "realization-type ");
	{
	    ULONG_LONG value = _data_ptr->realization_type;
	    _oss_prt_enum(_g, value, _ssd[0].sa, (int)_ssd[0].alen);
	}
	if (_data_ptr->bit_mask & 0x80000000) {
	    ossPrint(_g, ",");
	    _oss_indent(_g, 0);
	    ossPrint(_g, "concatenation ");
	    ossPrint(_g, _data_ptr->concatenation ? "TRUE" : "FALSE");
	}
	_oss_indent(_g, -1);
	ossPrint(_g, "}");
    }

}

static int _pTeller(OssGlobal * _g, void * _data)
{
    OSS_INT32	*_data_ptr;
    _data_ptr = (OSS_INT32 *)_data;
    {
	LONG_LONG value = *_data_ptr;

	ossPrint(_g, LLONG_FMT, value);
    }

    return PDU_PRINTED;
}

static int _pDecimal(OssGlobal * _g, void * _data)
{
    _Decimal	*_data_ptr;
    _data_ptr = (_Decimal *)_data;
    {
	_oss_indent(_g, 1);
	ossPrint(_g, "{");
	_oss_indent(_g, 0);
	ossPrint(_g, "mantisse ");
	{
	    LONG_LONG value = _data_ptr->mantisse;

	    ossPrint(_g, LLONG_FMT, value);
	}
	ossPrint(_g, ",");
	_oss_indent(_g, 0);
	ossPrint(_g, "decimal ");
	{
	    LONG_LONG value = _data_ptr->decimal;

	    ossPrint(_g, LLONG_FMT, value);
	}
	_oss_indent(_g, -1);
	ossPrint(_g, "}");
    }

    return PDU_PRINTED;
}

static int _pSecurityProblem(OssGlobal * _g, void * _data)
{
    OSS_INT32	*_data_ptr;
    _data_ptr = (OSS_INT32 *)_data;
    {
	LONG_LONG value = *_data_ptr;

	ossPrint(_g, LLONG_FMT, value);
    }

    return PDU_PRINTED;
}

static int _pNoInvokeId(OssGlobal * _g, void * _data)
{
    _InvokeId	*_data_ptr;
    _data_ptr = (_InvokeId *)_data;
    _p_InvokeId(_g, _data_ptr);

    return PDU_PRINTED;
}

static int _pROSEInvokeIds(OssGlobal * _g, void * _data)
{
    _InvokeId	*_data_ptr;
    _data_ptr = (_InvokeId *)_data;
    _p_InvokeId(_g, _data_ptr);

    return PDU_PRINTED;
}

static int _pAcse_RealizationParameter(OssGlobal * _g, void * _data)
{
    _RealizationParameter	*_data_ptr;
    _data_ptr = (_RealizationParameter *)_data;
    _p_RealizationParameter(_g, _data_ptr);

    return PDU_PRINTED;
}

static int _p0Acse_with_concatenation_Rea(OssGlobal * _g, void * _data)
{
    _RealizationParameter	*_data_ptr;
    _data_ptr = (_RealizationParameter *)_data;
    _p_RealizationParameter(_g, _data_ptr);

    return PDU_PRINTED;
}

static int _p1Association_by_RTSE_Realiza(OssGlobal * _g, void * _data)
{
    _RealizationParameter	*_data_ptr;
    _data_ptr = (_RealizationParameter *)_data;
    _p_RealizationParameter(_g, _data_ptr);

    return PDU_PRINTED;
}

static int _pPData_RealizationParameter(OssGlobal * _g, void * _data)
{
    _RealizationParameter	*_data_ptr;
    _data_ptr = (_RealizationParameter *)_data;
    _p_RealizationParameter(_g, _data_ptr);

    return PDU_PRINTED;
}

static int _p2PData_with_concatenation_Re(OssGlobal * _g, void * _data)
{
    _RealizationParameter	*_data_ptr;
    _data_ptr = (_RealizationParameter *)_data;
    _p_RealizationParameter(_g, _data_ptr);

    return PDU_PRINTED;
}

static int _p3Transfer_by_RTSE_Realizatio(OssGlobal * _g, void * _data)
{
    _RealizationParameter	*_data_ptr;
    _data_ptr = (_RealizationParameter *)_data;
    _p_RealizationParameter(_g, _data_ptr);

    return PDU_PRINTED;
}

int DLL_ENTRY_FDEF _pmRemote_Operations_Useful_Def(struct ossGlobal * _g, int _pdunum, void * _data)
{
    int _rc = _pdunum < 0;

    if (_rc)
	_pdunum = -_pdunum;
    if (_pdunum < 1 || _pdunum > 11 || !_PrintPDU[_pdunum - 1]._pf)
	return PDU_RANGE;
    else {
	if (_rc) {
	    ossPrint(_g, "%s : ", _PrintPDU[_pdunum - 1]._name);
	    _rc = _PrintPDU[_pdunum - 1]._pf(_g, _data);
	} else {
	    ossPrint(_g, "value %s ::= ", _PrintPDU[_pdunum - 1]._name);
	    _rc = _PrintPDU[_pdunum - 1]._pf(_g, _data);
	    ossPrint(_g, "\n");
	}
    }

    return _rc;
}

#endif

#ifdef OSS_COPY_VALUE
#define _oss_c ((_EncDecGlobals*)_g->encDecVar)

int DLL_ENTRY_FDEF _CPRemote_Operations_Useful_Def(struct ossGlobal * _g, int pduNum, void * src, void ** pdst)
{
    int res = 0;
    void *pdVal = NULL;

    if (pduNum <= 0 || pduNum > 12)
	return PDU_RANGE;
    switch (pduNum) {
	case 1: {
	    pdVal = (OSS_INT32  *)_oss_dec_const_alloc(_g, sizeof(OSS_INT32 ));
	    *(OSS_INT32  *)pdVal = *(OSS_INT32  *)src;
	} break;
	case 2: {
	    pdVal = (_Decimal  *)_oss_dec_const_alloc(_g, sizeof(_Decimal ));
	    memcpy((_Decimal  *)pdVal, (_Decimal  *)src, sizeof(*(_Decimal  *)pdVal));
	} break;
	case 3: {
	    pdVal = (OSS_INT32  *)_oss_dec_const_alloc(_g, sizeof(OSS_INT32 ));
	    *(OSS_INT32  *)pdVal = *(OSS_INT32  *)src;
	} break;
	case 4: {
	    pdVal = (_InvokeId  *)_oss_dec_const_alloc(_g, sizeof(_InvokeId ));
	    memcpy((_InvokeId  *)pdVal, (_InvokeId  *)src, sizeof(*(_InvokeId  *)pdVal));
	} break;
	case 5: {
	    pdVal = (_InvokeId  *)_oss_dec_const_alloc(_g, sizeof(_InvokeId ));
	    memcpy((_InvokeId  *)pdVal, (_InvokeId  *)src, sizeof(*(_InvokeId  *)pdVal));
	} break;
	case 6: {
	    pdVal = (_RealizationParameter  *)_oss_dec_const_alloc(_g, sizeof(_RealizationParameter ));
	    memcpy((_RealizationParameter  *)pdVal, (_RealizationParameter  *)src, sizeof(*(_RealizationParameter  *)pdVal));
	} break;
	case 7: {
	    pdVal = (_RealizationParameter  *)_oss_dec_const_alloc(_g, sizeof(_RealizationParameter ));
	    memcpy((_RealizationParameter  *)pdVal, (_RealizationParameter  *)src, sizeof(*(_RealizationParameter  *)pdVal));
	} break;
	case 8: {
	    pdVal = (_RealizationParameter  *)_oss_dec_const_alloc(_g, sizeof(_RealizationParameter ));
	    memcpy((_RealizationParameter  *)pdVal, (_RealizationParameter  *)src, sizeof(*(_RealizationParameter  *)pdVal));
	} break;
	case 9: {
	    pdVal = (_RealizationParameter  *)_oss_dec_const_alloc(_g, sizeof(_RealizationParameter ));
	    memcpy((_RealizationParameter  *)pdVal, (_RealizationParameter  *)src, sizeof(*(_RealizationParameter  *)pdVal));
	} break;
	case 10: {
	    pdVal = (_RealizationParameter  *)_oss_dec_const_alloc(_g, sizeof(_RealizationParameter ));
	    memcpy((_RealizationParameter  *)pdVal, (_RealizationParameter  *)src, sizeof(*(_RealizationParameter  *)pdVal));
	} break;
	case 11: {
	    pdVal = (_RealizationParameter  *)_oss_dec_const_alloc(_g, sizeof(_RealizationParameter ));
	    memcpy((_RealizationParameter  *)pdVal, (_RealizationParameter  *)src, sizeof(*(_RealizationParameter  *)pdVal));
	} break;
	default:
	    res = PDU_RANGE;
    }
    *pdst = pdVal;
    return res;
}
#undef _oss_c
#endif /* OSS_COPY_VALUE */

#ifdef OSS_COMPARE_VALUE
static int _cmInvokeId(OssGlobal * _g, _InvokeId  * _odata, _InvokeId  * _cdata)
{
    int _res = 0;

    if ((*_odata).choice != (*_cdata).choice)
	return 1;
    switch ((*_odata).choice) {
	case 1: {
	    if ((*_cdata).u.present != (*_odata).u.present)
		return 1;
	}   break;
	case 2: {
	}   break;
	case 0:
	    break;
	default:
	    return 1;
    }

    return _res;
}


static int _cmRealizationParameter(OssGlobal * _g, _RealizationParameter  * _odata, _RealizationParameter  * _cdata)
{
    int _res = 0;

    if ((*_cdata).realization_type != (*_odata).realization_type)
	return 1;
    if (((*_odata).bit_mask & (*_cdata).bit_mask) & 0x80000000) {
	if (((*_cdata).concatenation ^ (*_odata).concatenation) & 0x01)
	    return 1;
    } else {
	if ((*_odata).bit_mask & 0x80000000) {
	    if ((__shared5::default_concatenation ^ (*_odata).concatenation) & 0x01)
		return 1;
	}
	if ((*_cdata).bit_mask & 0x80000000) {
	    if (((*_cdata).concatenation ^ __shared5::default_concatenation) & 0x01)
		return 1;
	}
    }

    return _res;
}


int DLL_ENTRY_FDEF _CMRemote_Operations_Useful_Def(struct ossGlobal * _g, int _pduNum, void * _odata, void * _cdata)
{
    int _res = 0;

    if (_pduNum <= 0 || _pduNum > 12)
	return PDU_RANGE;
    switch (_pduNum) {
	case 1: {
	    if (*(OSS_INT32  *)_cdata != *(OSS_INT32  *)_odata)
		return 1;
	} break;
	case 2: {
	    if ((*(_Decimal  *)_cdata).mantisse != (*(_Decimal  *)_odata).mantisse)
		return 1;
	    if ((*(_Decimal  *)_cdata).decimal != (*(_Decimal  *)_odata).decimal)
		return 1;
	} break;
	case 3: {
	    if (*(OSS_INT32  *)_cdata != *(OSS_INT32  *)_odata)
		return 1;
	} break;
	case 4: {
	    _res = _cmInvokeId(_g, (_InvokeId  *)_odata, (_InvokeId  *)_cdata);
	    if (_res)
		return _res;
	} break;
	case 5: {
	    _res = _cmInvokeId(_g, (_InvokeId  *)_odata, (_InvokeId  *)_cdata);
	    if (_res)
		return _res;
	} break;
	case 6: {
	    _res = _cmRealizationParameter(_g, (_RealizationParameter  *)_odata, (_RealizationParameter  *)_cdata);
	    if (_res)
		return _res;
	} break;
	case 7: {
	    _res = _cmRealizationParameter(_g, (_RealizationParameter  *)_odata, (_RealizationParameter  *)_cdata);
	    if (_res)
		return _res;
	} break;
	case 8: {
	    _res = _cmRealizationParameter(_g, (_RealizationParameter  *)_odata, (_RealizationParameter  *)_cdata);
	    if (_res)
		return _res;
	} break;
	case 9: {
	    _res = _cmRealizationParameter(_g, (_RealizationParameter  *)_odata, (_RealizationParameter  *)_cdata);
	    if (_res)
		return _res;
	} break;
	case 10: {
	    _res = _cmRealizationParameter(_g, (_RealizationParameter  *)_odata, (_RealizationParameter  *)_cdata);
	    if (_res)
		return _res;
	} break;
	case 11: {
	    _res = _cmRealizationParameter(_g, (_RealizationParameter  *)_odata, (_RealizationParameter  *)_cdata);
	    if (_res)
		return _res;
	} break;
	default:
	    return PDU_RANGE;
    }
    return _res;
}
#endif /* OSS_COMPARE_VALUE */

/* Entry points */
static const _entry_point_struct _entry_points = {_ossinit_Remote_Operations_Useful_Definitions, _emRemote_Operations_Useful_Def, _dmRemote_Operations_Useful_Def, 
#if (OSS_TOED_API_LEVEL < 22 ) || !defined(OSSNOFREEPDU)
_fmRemote_Operations_Useful_Def,
#else
NULL, 
#endif
117,
_peRemote_Operations_Useful_Def, _pdRemote_Operations_Useful_Def, 116, 0, NULL,
#ifdef OSSPRINT
_pmRemote_Operations_Useful_Def
#else
NULL
#endif
};
static void _oss_post_init(struct ossGlobal *world) {
    static const unsigned char _oss_typeinfo[] = {
        0x00, 0x5a, 0x34, 0x4d, 0x36, 0x34, 0xf6, 0x54, 0x6c, 0xe7,
        0xda, 0x56, 0x6c, 0xe4, 0xda, 0x22, 0x92, 0xd8, 0x61, 0x56,
        0x7a, 0x22, 0x18, 0xae, 0xd2, 0x2e, 0xf5, 0xed, 0xd2, 0x20,
        0xc4, 0xd9, 0x52, 0xf0, 0xab, 0x47, 0x6b, 0xf8, 0xb8, 0x88,
        0x5d, 0x90, 0xc5, 0x9d, 0x41, 0x85, 0x07, 0xd5, 0xce, 0xe0,
        0x0a, 0x1d, 0xd0, 0xef, 0xaa, 0x15, 0x77, 0x7a, 0xc3, 0x94,
        0xf3, 0x0e, 0x3b, 0x24, 0xab, 0x78, 0xc8, 0x23, 0xe3, 0x1f,
        0xc0, 0xdd, 0xe3, 0x15, 0xf4, 0xe9, 0x65, 0x69, 0xb2, 0x1d,
        0xf2, 0x2b, 0x94, 0x8a, 0x5d, 0x09, 0xc6, 0x9d, 0x9c, 0x9c,
        0x83, 0x9c
    };
    ossInitRootContext1(world, (unsigned char *)_oss_typeinfo);
}

} /* extern "C" */

void *Remote_Operations_Useful_Definitions_TableType::internal = (void *)&_entry_points;
} // namespace BankAccount
