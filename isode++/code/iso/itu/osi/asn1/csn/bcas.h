/*************************************************************/
/* Copyright (C) 2014 OSS Nokalva, Inc.  All rights reserved.*/
/*************************************************************/

/* THIS FILE IS PROPRIETARY MATERIAL OF OSS NOKALVA, INC.
 * AND MAY BE USED ONLY BY DIRECT LICENSEES OF OSS NOKALVA, INC.
 * THIS FILE MAY NOT BE DISTRIBUTED. */

/* This file was generated by a TRIAL version of the OSS ASN.1 Tools.
 * Applications built using this file can be executed only on the machine
 * on which you run the OSS ASN.1 compiler. */

/* Generated for: Kampbell (Trial), License: 70040Z. */
/* Abstract syntax: bcas */
/* Created: Mon Dec 22 12:04:12 2014 */
/* ASN.1/C++ compiler version: 6.0 */
/* Code generated for runtime version 6.0 or later */
/* Compiler operating system: Windows */
/* Compiler machine type: Intel x86 */
/* Target operating system: Windows */
/* Target machine type: Intel x86 */
/* C++ compiler options required: -Zp8 (Microsoft) */
/* ASN.1 compiler options and file names specified:
 * -soed -output Z:/git/ISO.ITU.OSI/cpp/src/iso/itu/osi/asn1\csn -ber
 * -messageFormat msvc -allow universaltags
 * C:/ProgramData/OSS Nokalva/asn1cpp/win32.trial/6.0.0/samples/basic/encode/bcas.asn
 */

#ifndef OSS_bcas
#define OSS_bcas

#include "oss.h"
#include "asn1.h"

/* Representation types */

class OSS_PUBLIC CareerEntry   /* SEQUENCE */
{
public:
    void * operator new(size_t size);
    void operator delete(void *ptr);

    typedef unsigned int from;
    typedef unsigned int to;
    typedef OssString team;

    CareerEntry();
    CareerEntry(const CareerEntry &);
    CareerEntry(from, to, const team &);
    CareerEntry(from, const team &);

    CareerEntry & operator = (const CareerEntry &);
    int operator == (const CareerEntry &) const;
    int operator != (const CareerEntry &) const;

    from & get_from();
    from get_from() const;
    void set_from(from);

    to *get_to();
    const to *get_to() const;
    void set_to(to);
    int to_is_present() const;
    void omit_to();

    team & get_team();
    const team & get_team() const;
    void set_team(const team &);
private:
    unsigned char bit_mask;
    from from_field;
    to to_field;
    team team_field;
};

class OSS_PUBLIC __seqof1 : public OssList  /* SEQUENCE OF */
{
public:
    typedef CareerEntry component;

    __seqof1();
    __seqof1(const __seqof1 &);
    ~__seqof1();

    __seqof1 & operator = (const __seqof1 &);
    int operator == (const __seqof1 &) const;
    int operator != (const __seqof1 &) const;

    component *at(OssIndex);
    const component *at(OssIndex) const;

    OssIndex prepend(const component & );
    OssIndex prepend(__seqof1 *);
    OssIndex insert_after(OssIndex, const component & );
    OssIndex insert_after(OssIndex, __seqof1 *);

    int remove_front();
    int remove_after(OssIndex);

    __seqof1 *extract_after(OssIndex, OssIndex);
};

class OSS_PUBLIC BBCard   /* SEQUENCE */
{
public:
    void * operator new(size_t size);
    void operator delete(void *ptr);

    typedef OssString name;
    typedef unsigned short int age;
    typedef OssString position;
    typedef __seqof1 career;

    BBCard();
    BBCard(const BBCard &);
    BBCard(const name &, age, const position &, const career &);

    BBCard & operator = (const BBCard &);
    int operator == (const BBCard &) const;
    int operator != (const BBCard &) const;

    name & get_name();
    const name & get_name() const;
    void set_name(const name &);

    age & get_age();
    age get_age() const;
    void set_age(age);

    position & get_position();
    const position & get_position() const;
    void set_position(const position &);

    career & get_career();
    const career & get_career() const;
    void set_career(const career &);
private:
    name name_field;
    age age_field;
    position position_field;
    career career_field;
};

/* Universal PDU class */

class OSS_PUBLIC bcas_PDU : public UniversalPDU {
public:
    bcas_PDU();
    void set_BBCard(BBCard &);
    BBCard *get_BBCard() const;
#ifdef OSS_PREALLOCATED_BUFFER_DECODE_SUPPORTED
    void set_const_BBCard(const BBCard &);
    const BBCard *get_const_BBCard() const;
#endif
};

/* Specific PDU classes */

class OSS_PUBLIC BBCard_PDU : public ConcretePDU {
public:
    BBCard_PDU();
    void set_data(BBCard &);
    BBCard *get_data() const;
#ifdef OSS_PREALLOCATED_BUFFER_DECODE_SUPPORTED
    void set_const_data(const BBCard & d);
    const BBCard *get_const_data() const;
#endif
protected:
    OssTypeIndex get_index() const;
};

/* Control object class */

class OSS_PUBLIC bcas_Control : public OssControl {
public:
    bcas_Control();
    bcas_Control(const bcas_Control &);
};

#endif // OSS_bcas
