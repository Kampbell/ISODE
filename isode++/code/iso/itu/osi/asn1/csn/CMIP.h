/*************************************************************/
/* Copyright (C) 2015 OSS Nokalva, Inc.  All rights reserved.*/
/*************************************************************/

/* THIS FILE IS PROPRIETARY MATERIAL OF OSS NOKALVA, INC.
 * AND MAY BE USED ONLY BY DIRECT LICENSEES OF OSS NOKALVA, INC.
 * THIS FILE MAY NOT BE DISTRIBUTED. */

/* This file was generated by a TRIAL version of the OSS ASN.1 Tools.
 * Applications built using this file can be executed only on the machine
 * on which you run the OSS ASN.1 compiler. */

/* Generated for: Kampbell (Trial), License: 70040Z. */
/* Abstract syntax: SMASE_A_ASSOCIATE_Information */
/* Created: Fri Jan 02 07:11:58 2015 */
/* ASN.1/C++ compiler version: 6.0 */
/* Code generated for runtime version 6.0 or later */
/* Compiler operating system: Windows */
/* Compiler machine type: Intel x86 */
/* Target operating system: Windows */
/* Target machine type: Intel x86 */
/* C++ compiler options required: -Zp8 (Microsoft) */
/* ASN.1 compiler options and file names specified:
 * -output Z:/git/ISO.ITU.OSI/cpp/src/iso/itu/osi/asn1/csn\CMIP -modlistingfile
 * Z:/git/ISO.ITU.OSI/cpp/src/iso/itu/osi/asn1/csn\CMIP.lst -gendirectives
 * Z:/git/ISO.ITU.OSI/cpp/src/iso/itu/osi/asn1/csn\CMIP.gen -per -uper -ber
 * -der -root -messageFormat msvc -namespace CMIP -allow universaltags
 * Z:/git/ISO.ITU.OSI/cpp/src/iso/itu/osi/asn1/asn/CMIP-1.asn
 * Z:/git/ISO.ITU.OSI/cpp/src/iso/itu/osi/asn1/asn/CMIP-A-ABORT-Information.asn
 * Z:/git/ISO.ITU.OSI/cpp/src/iso/itu/osi/asn1/asn/CMIP-A-ASSOCIATE-Information.asn
 * Z:/git/ISO.ITU.OSI/cpp/src/iso/itu/osi/asn1/asn/CMISE-ROSE-SMASE-ASN1Module.asn
 * Z:/git/ISO.ITU.OSI/cpp/src/iso/itu/osi/asn1/asn/Remote-Operations-Abstract-Syntaxes.asn
 * Z:/git/ISO.ITU.OSI/cpp/src/iso/itu/osi/asn1/asn/Remote-Operations-Generic-ROS-PDUs.asn
 * Z:/git/ISO.ITU.OSI/cpp/src/iso/itu/osi/asn1/asn/Remote-Operations-Information-Objects.asn
 * Z:/git/ISO.ITU.OSI/cpp/src/iso/itu/osi/asn1/asn/Remote-Operations-Information-Objects-extensions.asn
 * Z:/git/ISO.ITU.OSI/cpp/src/iso/itu/osi/asn1/asn/Remote-Operations-Realizations.asn
 * Z:/git/ISO.ITU.OSI/cpp/src/iso/itu/osi/asn1/asn/Remote-Operations-Useful-Definitions.asn
 * Z:/git/ISO.ITU.OSI/cpp/src/iso/itu/osi/asn1/asn/SMASE-A-ASSOCIATE-Information.asn
 */

#ifndef OSS_SMASE_A_ASSOCIATE_Information
#define OSS_SMASE_A_ASSOCIATE_Information

#include "oss.h"
#include "asn1.h"

namespace CMIP {

/* Representation types */

enum CMISSync {
    bestEffort = 0,
    atomic = 1
};

enum _enum1 {
    association_service = 0,
    transfer_service = 1
};

enum _enum2 {
    ActionErrorInfo_errorStatus_accessDenied = 2,
    errorStatus_noSuchAction = 9,
    errorStatus_noSuchArgument = 14,
    errorStatus_invalidArgumentValue = 15
};

enum _enum3 {
    AttributeError_errorStatus_accessDenied = 2,
    AttributeError_errorStatus_noSuchAttribute = 5,
    errorStatus_invalidAttributeValue = 6,
    invalidOperation = 24,
    invalidOperator = 25
};

enum _enum4 {
    AttributeIdError_errorStatus_accessDenied = 2,
    AttributeIdError_errorStatus_noSuchAttribute = 5
};

enum _enum5 {
    deleteErrorInfo_accessDenied = 2
};

enum CMIPAbortSource {
    cmiseServiceUser = 0,
    cmiseServiceProvider = 1
};


const OSS_INT32 baseObject = 0;
const OSS_INT32 firstLevelOnly = 1;
const OSS_INT32 wholeSubtree = 2;

const OSS_UINT32 m_get_invoke = 1;
const OSS_UINT32 m_get_rors = 2;
const OSS_UINT32 m_get_linked_reply = 3;
const OSS_UINT32 m_set_invoke = 4;
const OSS_UINT32 m_setconf_invoke = 5;
const OSS_UINT32 m_setconf_rors = 6;
const OSS_UINT32 m_setconf_linked_reply = 7;
const OSS_UINT32 m_action_invoke = 8;
const OSS_UINT32 m_actionconf_invoke = 9;
const OSS_UINT32 m_actionconf_rors = 10;
const OSS_UINT32 m_actionconf_linked_reply = 11;
const OSS_UINT32 m_delete_invoke = 12;
const OSS_UINT32 m_delete_rors = 13;
const OSS_UINT32 m_delete_linked_reply = 14;
const OSS_UINT32 m_create_invoke = 15;
const OSS_UINT32 m_create_rors = 16;
const OSS_UINT32 m_eventReport_invoke = 17;
const OSS_UINT32 m_eventReportConf_invoke = 18;
const OSS_UINT32 m_eventReportConf_rors = 19;
const OSS_UINT32 m_cancelGet_invoke = 20;
const OSS_UINT32 m_cancelGet_rors = 21;
const OSS_UINT32 noSuchObjectClass_roer = 22;
const OSS_UINT32 noSuchObjectlnstance_roer = 23;
const OSS_UINT32 accessDenied_roer = 24;
const OSS_UINT32 syncNotSupported_roer = 25;
const OSS_UINT32 invalidFilter_roer = 26;
const OSS_UINT32 noSuchAttribute_roer = 27;
const OSS_UINT32 invalidAttributeValue_roer = 28;
const OSS_UINT32 getListError_roer = 29;
const OSS_UINT32 setListError_roer = 30;
const OSS_UINT32 noSuchAction_roer = 31;
const OSS_UINT32 processingfailure_roer = 32;
const OSS_UINT32 duplicateManagedObjectlnstance_roer = 33;
const OSS_UINT32 noSuchReferenceObject_roer = 34;
const OSS_UINT32 noSuchEventType_roer = 35;
const OSS_UINT32 noSuchArgument_roer = 36;
const OSS_UINT32 invalidArgumentValue_roer = 37;
const OSS_UINT32 invalidscope_roer = 38;
const OSS_UINT32 invalidObjectInstance_roer = 39;
const OSS_UINT32 missingAttributeValue_roer = 40;
const OSS_UINT32 classlnstanceConflict_roer = 41;
const OSS_UINT32 complexityLimitation_roer = 42;
const OSS_UINT32 misstypedOperation_roer = 43;
const OSS_UINT32 noSuchlnvokeID_roer = 44;
const OSS_UINT32 operationCanceled_roer = 45;
const OSS_UINT32 rosReject = 46;

const OSS_UINT32 multipleObjectSelection = 0;
const OSS_UINT32 FunctionalUnits_filter = 1;
const OSS_UINT32 multipleReply = 2;
const OSS_UINT32 extendedService = 3;
const OSS_UINT32 cancelGet = 4;

const OSS_UINT32 version1 = 0;
const OSS_UINT32 version2 = 1;

const OSS_INT32 replace = 0;
const OSS_INT32 addValues = 1;
const OSS_INT32 removeValues = 2;
const OSS_INT32 setToDefault = 3;

const OSS_INT32 localSystemProblem = 0;
const OSS_INT32 invalidParameter = 1;
const OSS_INT32 unrecognizedActivity = 2;
const OSS_INT32 temporaryProblem = 3;
const OSS_INT32 protocolError = 4;
const OSS_INT32 permanentProblem = 5;
const OSS_INT32 userError = 6;
const OSS_INT32 transferCompleted = 7;

const OSS_INT32 unrecognizedPDU = 0;
const OSS_INT32 mistypedPDU = 1;
const OSS_INT32 badlyStructuredPDU = 2;

const OSS_INT32 duplicateInvocation = 0;
const OSS_INT32 unrecognizedOperation = 1;
const OSS_INT32 mistypedArgument = 2;
const OSS_INT32 resourceLimitation = 3;
const OSS_INT32 releaseInProgress = 4;
const OSS_INT32 unrecognizedLinkedId = 5;
const OSS_INT32 linkedResponseUnexpected = 6;
const OSS_INT32 unexpectedLinkedOperation = 7;

const OSS_INT32 ReturnResultProblem_unrecognizedInvocation = 0;
const OSS_INT32 resultResponseUnexpected = 1;
const OSS_INT32 mistypedResult = 2;

const OSS_INT32 ReturnErrorProblem_unrecognizedInvocation = 0;
const OSS_INT32 errorResponseUnexpected = 1;
const OSS_INT32 unrecognizedError = 2;
const OSS_INT32 unexpectedError = 3;
const OSS_INT32 mistypedParameter = 4;

const OSS_INT32 smfusNotSupported = 0;
const OSS_INT32 smfuCombinationNotSupported = 1;
const OSS_INT32 smfusRequiredNotAvailable = 2;
const OSS_INT32 smfuNegotiationRefused = 3;
class OSS_PUBLIC __choice1  : public OssChoice   /* CHOICE */
{
public:
    enum Id {
	unselected,
	single_ASN1_type_chosen = 1,
	octet_aligned_chosen = 2,
	arbitrary_chosen = 3
    };
    typedef OssOpen single_ASN1_type;
    typedef OssString octet_aligned;
    typedef OssBitString arbitrary;

    __choice1();
    __choice1(const __choice1 &);
    ~__choice1();

    __choice1 & operator = (const __choice1 &);
    int operator == (const __choice1 &) const;
    int operator != (const __choice1 &) const;

    single_ASN1_type *get_single_ASN1_type();
    const single_ASN1_type *get_single_ASN1_type() const;
    void set_single_ASN1_type(const single_ASN1_type &);

    octet_aligned *get_octet_aligned();
    const octet_aligned *get_octet_aligned() const;
    void set_octet_aligned(const octet_aligned &);

    arbitrary *get_arbitrary();
    const arbitrary *get_arbitrary() const;
    void set_arbitrary(const arbitrary &);
private:
    union {
	OSSC::COssOpen single_ASN1_type_field;
	OSSC::COssString octet_aligned_field;
	OSSC::COssBitString arbitrary_field;
    };
    void cleanup();
};

class OSS_PUBLIC __shared2   /* SEQUENCE */
{
public:
    void * operator new(size_t size);
    void operator delete(void *ptr);

    typedef OssEncOID direct_reference;
    typedef OSS_INT32 indirect_reference;
    typedef OssString data_value_descriptor;
    typedef __choice1 encoding;

    __shared2();
    __shared2(const __shared2 &);
    __shared2(const direct_reference &, indirect_reference, const data_value_descriptor &, 
	const encoding &);
    __shared2(const encoding &);

    __shared2 & operator = (const __shared2 &);
    int operator == (const __shared2 &) const;
    int operator != (const __shared2 &) const;

    direct_reference *get_direct_reference();
    const direct_reference *get_direct_reference() const;
    void set_direct_reference(const direct_reference &);
    int direct_reference_is_present() const;
    void omit_direct_reference();

    indirect_reference *get_indirect_reference();
    const indirect_reference *get_indirect_reference() const;
    void set_indirect_reference(indirect_reference);
    int indirect_reference_is_present() const;
    void omit_indirect_reference();

    data_value_descriptor *get_data_value_descriptor();
    const data_value_descriptor *get_data_value_descriptor() const;
    void set_data_value_descriptor(const data_value_descriptor &);
    int data_value_descriptor_is_present() const;
    void omit_data_value_descriptor();

    encoding & get_encoding();
    const encoding & get_encoding() const;
    void set_encoding(const encoding &);
private:
    OSS_UINT32 bit_mask;
    direct_reference direct_reference_field;
    indirect_reference indirect_reference_field;
    data_value_descriptor data_value_descriptor_field;
    encoding encoding_field;
};

typedef __shared2 External;

class OSS_PUBLIC __shared3  : public OssChoice   /* CHOICE */
{
public:
    enum Id {
	unselected,
	globalForm_chosen = 1,
	localForm_chosen = 2
    };
    typedef OssEncOID globalForm;
    typedef OSS_INT32 localForm;

    __shared3();
    __shared3(const __shared3 &);
    ~__shared3();

    __shared3 & operator = (const __shared3 &);
    int operator == (const __shared3 &) const;
    int operator != (const __shared3 &) const;

    globalForm *get_globalForm();
    const globalForm *get_globalForm() const;
    void set_globalForm(const globalForm &);

    localForm *get_localForm();
    const localForm *get_localForm() const;
    void set_localForm(localForm);
private:
    union {
	OSSC::COssEncOID globalForm_field;
	localForm localForm_field;
    };
    void cleanup();
};

typedef __shared3 ActionTypeId;

typedef __shared3 AttributeId;

typedef __shared3 EventTypeId;

typedef __shared2 AccessControl;

typedef __shared3 ObjectClass;

class OSS_PUBLIC RelativeDistinguishedName;

class OSS_PUBLIC __shared6 : public OssList  /* SEQUENCE OF */
{
public:
    typedef RelativeDistinguishedName component;

    __shared6();
    __shared6(const __shared6 &);
    ~__shared6();

    __shared6 & operator = (const __shared6 &);
    int operator == (const __shared6 &) const;
    int operator != (const __shared6 &) const;

    component *at(OssIndex);
    const component *at(OssIndex) const;

    OssIndex prepend(const component & );
    OssIndex prepend(__shared6 *);
    OssIndex insert_after(OssIndex, const component & );
    OssIndex insert_after(OssIndex, __shared6 *);

    int remove_front();
    int remove_after(OssIndex);

    __shared6 *extract_after(OssIndex, OssIndex);
};

typedef __shared6 RDNSequence;

typedef __shared6 DistinguishedName;

class OSS_PUBLIC ObjectInstance  : public OssChoice   /* CHOICE */
{
public:
    enum Id {
	unselected,
	distinguishedName_chosen = 1,
	nonSpecificForm_chosen = 2,
	localDistinguishedName_chosen = 3
    };
    typedef __shared6 distinguishedName;
    typedef OssString nonSpecificForm;
    typedef __shared6 localDistinguishedName;

    ObjectInstance();
    ObjectInstance(const ObjectInstance &);
    ~ObjectInstance();

    ObjectInstance & operator = (const ObjectInstance &);
    int operator == (const ObjectInstance &) const;
    int operator != (const ObjectInstance &) const;

    distinguishedName *get_distinguishedName();
    const distinguishedName *get_distinguishedName() const;
    void set_distinguishedName(const distinguishedName &);

    nonSpecificForm *get_nonSpecificForm();
    const nonSpecificForm *get_nonSpecificForm() const;
    void set_nonSpecificForm(const nonSpecificForm &);

    localDistinguishedName *get_localDistinguishedName();
    const localDistinguishedName *get_localDistinguishedName() const;
    void set_localDistinguishedName(const localDistinguishedName &);
private:
    union {
	void *distinguishedName_field;
	OSSC::COssString nonSpecificForm_field;
	void *localDistinguishedName_field;
    };
    void cleanup();
};

class OSS_PUBLIC Scope  : public OssChoice   /* CHOICE */
{
public:
    enum Id {
	unselected,
	namedNumbers_chosen = 1,
	individualLevels_chosen = 2,
	baseToNthLevel_chosen = 3
    };
    typedef OSS_INT32 namedNumbers;
    typedef OSS_INT32 individualLevels;
    typedef OSS_INT32 baseToNthLevel;

    Scope();
    Scope(const Scope &);

    Scope & operator = (const Scope &);
    int operator == (const Scope &) const;
    int operator != (const Scope &) const;

    namedNumbers *get_namedNumbers();
    const namedNumbers *get_namedNumbers() const;
    void set_namedNumbers(namedNumbers);

    individualLevels *get_individualLevels();
    const individualLevels *get_individualLevels() const;
    void set_individualLevels(individualLevels);

    baseToNthLevel *get_baseToNthLevel();
    const baseToNthLevel *get_baseToNthLevel() const;
    void set_baseToNthLevel(baseToNthLevel);
private:
    union {
	namedNumbers namedNumbers_field;
	individualLevels individualLevels_field;
	baseToNthLevel baseToNthLevel_field;
    };
};

class OSS_PUBLIC AvaSet_Value : public OssConstrainedOpenType
{
public:
    AvaSet_Value();
    AvaSet_Value(const AvaSet_Value &);
    ~AvaSet_Value();
    AvaSet_Value & operator = (const AvaSet_Value &);
    int operator == (const AvaSet_Value &) const;
    int operator != (const AvaSet_Value &) const;
    int set_decoded(PDU &);
    int grab_decoded(PDU &);
    int set_encoded(const EncodedBuffer &);
    int grab_encoded(EncodedBuffer &);
    int encode(OssControl &);
private:
    void cleanup_decoded();
};

class OSS_PUBLIC Attribute   /* SEQUENCE */
{
public:
    void * operator new(size_t size);
    void operator delete(void *ptr);

    typedef __shared3 id;
    typedef AvaSet_Value value;

    Attribute();
    Attribute(const Attribute &);
    Attribute(const id &, const value &);

    Attribute & operator = (const Attribute &);
    int operator == (const Attribute &) const;
    int operator != (const Attribute &) const;

    id & get_id();
    const id & get_id() const;
    void set_id(const id &);

    value & get_value();
    const value & get_value() const;
    void set_value(const value &);
private:
    id id_field;
    value value_field;
};

class OSS_PUBLIC __choice4;

class OSS_PUBLIC __seqof1 : public OssList  /* SEQUENCE OF */
{
public:
    typedef __choice4 component;

    __seqof1();
    __seqof1(const __seqof1 &);
    ~__seqof1();

    __seqof1 & operator = (const __seqof1 &);
    int operator == (const __seqof1 &) const;
    int operator != (const __seqof1 &) const;

    component *at(OssIndex);
    const component *at(OssIndex) const;

    OssIndex prepend(const component & );
    OssIndex prepend(__seqof1 *);
    OssIndex insert_after(OssIndex, const component & );
    OssIndex insert_after(OssIndex, __seqof1 *);

    int remove_front();
    int remove_after(OssIndex);

    __seqof1 *extract_after(OssIndex, OssIndex);
};

class OSS_PUBLIC FilterItem  : public OssChoice   /* CHOICE */
{
public:
    enum Id {
	unselected,
	equality_chosen = 1,
	substrings_chosen = 2,
	greaterOrEqual_chosen = 3,
	lessOrEqual_chosen = 4,
	present_chosen = 5,
	subsetOf_chosen = 6,
	supersetOf_chosen = 7,
	nonNullSetIntersection_chosen = 8
    };
    typedef Attribute equality;
    typedef __seqof1 substrings;
    typedef Attribute greaterOrEqual;
    typedef Attribute lessOrEqual;
    typedef __shared3 present;
    typedef Attribute subsetOf;
    typedef Attribute supersetOf;
    typedef Attribute nonNullSetIntersection;

    FilterItem();
    FilterItem(const FilterItem &);
    ~FilterItem();

    FilterItem & operator = (const FilterItem &);
    int operator == (const FilterItem &) const;
    int operator != (const FilterItem &) const;

    equality *get_equality();
    const equality *get_equality() const;
    void set_equality(const equality &);

    substrings *get_substrings();
    const substrings *get_substrings() const;
    void set_substrings(const substrings &);

    greaterOrEqual *get_greaterOrEqual();
    const greaterOrEqual *get_greaterOrEqual() const;
    void set_greaterOrEqual(const greaterOrEqual &);

    lessOrEqual *get_lessOrEqual();
    const lessOrEqual *get_lessOrEqual() const;
    void set_lessOrEqual(const lessOrEqual &);

    present *get_present();
    const present *get_present() const;
    void set_present(const present &);

    subsetOf *get_subsetOf();
    const subsetOf *get_subsetOf() const;
    void set_subsetOf(const subsetOf &);

    supersetOf *get_supersetOf();
    const supersetOf *get_supersetOf() const;
    void set_supersetOf(const supersetOf &);

    nonNullSetIntersection *get_nonNullSetIntersection();
    const nonNullSetIntersection *get_nonNullSetIntersection() const;
    void set_nonNullSetIntersection(const nonNullSetIntersection &);
private:
    union {
	equality *equality_field;
	void *substrings_field;
	greaterOrEqual *greaterOrEqual_field;
	lessOrEqual *lessOrEqual_field;
	present *present_field;
	subsetOf *subsetOf_field;
	supersetOf *supersetOf_field;
	nonNullSetIntersection *nonNullSetIntersection_field;
    };
    void cleanup();
};

class OSS_PUBLIC CMISFilter;

class OSS_PUBLIC __shared7 : public OssList  /* SET OF */
{
public:
    typedef CMISFilter component;

    __shared7();
    __shared7(const __shared7 &);
    ~__shared7();

    __shared7 & operator = (const __shared7 &);
    int operator == (const __shared7 &) const;
    int operator != (const __shared7 &) const;

    component *at(OssIndex);
    const component *at(OssIndex) const;

    OssIndex prepend(const component & );
    OssIndex prepend(__shared7 *);
    OssIndex insert_after(OssIndex, const component & );
    OssIndex insert_after(OssIndex, __shared7 *);

    int remove_front();
    int remove_after(OssIndex);

    __shared7 *extract_after(OssIndex, OssIndex);
};

class OSS_PUBLIC CMISFilter  : public OssChoice   /* CHOICE */
{
public:
    enum Id {
	unselected,
	item_chosen = 1,
	CMISFilter_and_chosen = 2,
	CMISFilter_or_chosen = 3,
	CMISFilter_not_chosen = 4
    };
    typedef FilterItem item;
    typedef __shared7 CMISFilter_and;
    typedef __shared7 CMISFilter_or;
    typedef CMISFilter CMISFilter_not;

    CMISFilter();
    CMISFilter(const CMISFilter &);
    ~CMISFilter();

    CMISFilter & operator = (const CMISFilter &);
    int operator == (const CMISFilter &) const;
    int operator != (const CMISFilter &) const;

    item *get_item();
    const item *get_item() const;
    void set_item(const item &);

    CMISFilter_and *get_CMISFilter_and();
    const CMISFilter_and *get_CMISFilter_and() const;
    void set_CMISFilter_and(const CMISFilter_and &);

    CMISFilter_or *get_CMISFilter_or();
    const CMISFilter_or *get_CMISFilter_or() const;
    void set_CMISFilter_or(const CMISFilter_or &);

    CMISFilter_not *get_CMISFilter_not();
    const CMISFilter_not *get_CMISFilter_not() const;
    void set_CMISFilter_not(const CMISFilter_not &);
private:
    union {
	item *item_field;
	void *CMISFilter_and_field;
	void *CMISFilter_or_field;
	CMISFilter_not *CMISFilter_not_field;
    };
    void cleanup();
};

typedef OssBitString CmipPduType;

typedef OssBitString FunctionalUnits;

typedef OSS_UINT32 MaxEncodedCmipPduReceiveSize;

typedef OssBitString ProtocolVersion;

typedef OSS_UINT32 Priority;

typedef OSS_UINT32 AccessDenied_PRIORITY;

typedef OSS_UINT32 ClassInstanceConflict_PRIORITY;

typedef OSS_UINT32 ComplexityLimitation_PRIORITY;

typedef OSS_UINT32 InvalidScope_PRIORITY;

typedef OSS_UINT32 InvalidArgumentValue_PRIORITY;

typedef OSS_UINT32 InvalidFilter_PRIORITY;

typedef OSS_UINT32 NoSuchAction_PRIORITY;

typedef OSS_UINT32 NoSuchArgument_PRIORITY;

typedef OSS_UINT32 NoSuchObjectClass_PRIORITY;

typedef OSS_UINT32 NoSuchObjectInstance_PRIORITY;

typedef OSS_UINT32 ProcessingFailure_PRIORITY;

typedef OSS_UINT32 SyncNotSupported_PRIORITY;

typedef OSS_UINT32 MistypedOperation_PRIORITY;

typedef OSS_UINT32 NoSuchInvokeId_PRIORITY;

typedef OSS_UINT32 DuplicateManagedObjectInstance_PRIORITY;

typedef OSS_UINT32 InvalidAttributeValue_PRIORITY;

typedef OSS_UINT32 InvalidObjectInstance_PRIORITY;

typedef OSS_UINT32 MissingAttributeValue_PRIORITY;

typedef OSS_UINT32 NoSuchAttribute_PRIORITY;

typedef OSS_UINT32 NoSuchReferenceObject_PRIORITY;

typedef OSS_UINT32 NoSuchEventType_PRIORITY;

typedef OSS_UINT32 GetListError_PRIORITY;

typedef OSS_UINT32 OperationCancelled_PRIORITY;

typedef OSS_UINT32 SetListError_PRIORITY;

class OSS_PUBLIC __shared8   /* SEQUENCE */
{
public:
    void * operator new(size_t size);
    void operator delete(void *ptr);

    typedef enum _enum1 realization_type;
    typedef ossBoolean concatenation;

    static const concatenation default_concatenation;

    static concatenation get_default_concatenation();

    __shared8();
    __shared8(const __shared8 &);
    __shared8(realization_type, concatenation);
    __shared8(realization_type);

    __shared8 & operator = (const __shared8 &);
    int operator == (const __shared8 &) const;
    int operator != (const __shared8 &) const;

    realization_type & get_realization_type();
    realization_type get_realization_type() const;
    void set_realization_type(realization_type);

    concatenation *get_concatenation();
    const concatenation *get_concatenation() const;
    void set_concatenation(concatenation);
    int concatenation_is_default() const;
    void set_default_concatenation();
private:
    OSS_UINT32 bit_mask;
    realization_type realization_type_field;
    concatenation concatenation_field;
};

typedef __shared8 RealizationParameter;

typedef OssBitString CmipPduReceivingSupport;

typedef OssBitString CmipPduSendingSupport;

typedef OssBitString CmiseFunctionalUnitsSelected;

typedef OssBitString CmiseFunctionalUnitsSupported;

typedef OssBitString ProtocolVersionSupported;

class OSS_PUBLIC __shared9 : public OssList  /* SET OF */
{
public:
    typedef __shared3 component;

    __shared9();
    __shared9(const __shared9 &);
    ~__shared9();

    __shared9 & operator = (const __shared9 &);
    int operator == (const __shared9 &) const;
    int operator != (const __shared9 &) const;

    component *at(OssIndex);
    const component *at(OssIndex) const;

    OssIndex prepend(const component & );
    OssIndex prepend(__shared9 *);
    OssIndex insert_after(OssIndex, const component & );
    OssIndex insert_after(OssIndex, __shared9 *);

    int remove_front();
    int remove_after(OssIndex);

    __shared9 *extract_after(OssIndex, OssIndex);
};

typedef __shared9 MissingAttributeValue_PARAMETER;

typedef __shared8 Acse_RealizationParameter;

typedef __shared8 Acse_with_concatenation_RealizationParameter;

typedef __shared8 Association_by_RTSE_RealizationParameter;

typedef __shared8 PData_RealizationParameter;

typedef __shared8 PData_with_concatenation_RealizationParameter;

typedef __shared8 Transfer_by_RTSE_RealizationParameter;

class OSS_PUBLIC ActionInfo   /* SEQUENCE */
{
public:
    void * operator new(size_t size);
    void operator delete(void *ptr);

    typedef __shared3 actionType;
    typedef AvaSet_Value actionInfoArg;

    ActionInfo();
    ActionInfo(const ActionInfo &);
    ActionInfo(const actionType &, const actionInfoArg &);
    ActionInfo(const actionType &);

    ActionInfo & operator = (const ActionInfo &);
    int operator == (const ActionInfo &) const;
    int operator != (const ActionInfo &) const;

    actionType & get_actionType();
    const actionType & get_actionType() const;
    void set_actionType(const actionType &);

    actionInfoArg *get_actionInfoArg();
    const actionInfoArg *get_actionInfoArg() const;
    void set_actionInfoArg(const actionInfoArg &);
    int actionInfoArg_is_present() const;
    void omit_actionInfoArg();
private:
    OSS_UINT32 bit_mask;
    actionType actionType_field;
    actionInfoArg actionInfoArg_field;
};

class OSS_PUBLIC ActionArgument   /* SEQUENCE */
{
public:
    void * operator new(size_t size);
    void operator delete(void *ptr);

    typedef __shared3 baseManagedObjectClass;
    typedef ObjectInstance baseManagedObjectInstance;
    typedef __shared2 accessControl;
    typedef enum CMISSync synchronization;
    typedef Scope scope;
    typedef CMISFilter filter;
    typedef ActionInfo actionInfo;

    static const synchronization default_synchronization;
    static const scope & default_scope;
    static const filter & default_filter;

    static synchronization get_default_synchronization();
    static const scope& get_default_scope();
    static const filter& get_default_filter();

    ActionArgument();
    ActionArgument(const ActionArgument &);
    ActionArgument(const baseManagedObjectClass &, const baseManagedObjectInstance &, 
	const accessControl &, synchronization, const scope &, const filter &, const actionInfo &);
    ActionArgument(const baseManagedObjectClass &, const baseManagedObjectInstance &, 
	const actionInfo &);
    ~ActionArgument();

    ActionArgument & operator = (const ActionArgument &);
    int operator == (const ActionArgument &) const;
    int operator != (const ActionArgument &) const;

    baseManagedObjectClass & get_baseManagedObjectClass();
    const baseManagedObjectClass & get_baseManagedObjectClass() const;
    void set_baseManagedObjectClass(const baseManagedObjectClass &);

    baseManagedObjectInstance & get_baseManagedObjectInstance();
    const baseManagedObjectInstance & get_baseManagedObjectInstance() const;
    void set_baseManagedObjectInstance(const baseManagedObjectInstance &);

    accessControl *get_accessControl();
    const accessControl *get_accessControl() const;
    void set_accessControl(const accessControl &);
    int accessControl_is_present() const;
    void omit_accessControl();

    synchronization *get_synchronization();
    const synchronization *get_synchronization() const;
    void set_synchronization(synchronization);
    int synchronization_is_default() const;
    void set_default_synchronization();

    scope *get_scope();
    const scope *get_scope() const;
    void set_scope(const scope &);
    int scope_is_default() const;
    void set_default_scope();

    filter *get_filter();
    const filter *get_filter() const;
    void set_filter(const filter &);
    int filter_is_default() const;
    void set_default_filter();

    actionInfo & get_actionInfo();
    const actionInfo & get_actionInfo() const;
    void set_actionInfo(const actionInfo &);
private:
    OSS_UINT32 bit_mask;
    baseManagedObjectClass baseManagedObjectClass_field;
    baseManagedObjectInstance baseManagedObjectInstance_field;
    accessControl accessControl_field;
    synchronization synchronization_field;
    scope scope_field;
    filter filter_field;
    actionInfo actionInfo_field;
};

class OSS_PUBLIC __seq2   /* SEQUENCE */
{
public:
    void * operator new(size_t size);
    void operator delete(void *ptr);

    typedef __shared3 managedObjectClass;
    typedef __shared3 actionType;

    __seq2();
    __seq2(const __seq2 &);
    __seq2(const managedObjectClass &, const actionType &);
    __seq2(const actionType &);

    __seq2 & operator = (const __seq2 &);
    int operator == (const __seq2 &) const;
    int operator != (const __seq2 &) const;

    managedObjectClass *get_managedObjectClass();
    const managedObjectClass *get_managedObjectClass() const;
    void set_managedObjectClass(const managedObjectClass &);
    int managedObjectClass_is_present() const;
    void omit_managedObjectClass();

    actionType & get_actionType();
    const actionType & get_actionType() const;
    void set_actionType(const actionType &);
private:
    OSS_UINT32 bit_mask;
    managedObjectClass managedObjectClass_field;
    actionType actionType_field;
};

class OSS_PUBLIC __seq3   /* SEQUENCE */
{
public:
    void * operator new(size_t size);
    void operator delete(void *ptr);

    typedef __shared3 managedObjectClass;
    typedef __shared3 eventType;

    __seq3();
    __seq3(const __seq3 &);
    __seq3(const managedObjectClass &, const eventType &);
    __seq3(const eventType &);

    __seq3 & operator = (const __seq3 &);
    int operator == (const __seq3 &) const;
    int operator != (const __seq3 &) const;

    managedObjectClass *get_managedObjectClass();
    const managedObjectClass *get_managedObjectClass() const;
    void set_managedObjectClass(const managedObjectClass &);
    int managedObjectClass_is_present() const;
    void omit_managedObjectClass();

    eventType & get_eventType();
    const eventType & get_eventType() const;
    void set_eventType(const eventType &);
private:
    OSS_UINT32 bit_mask;
    managedObjectClass managedObjectClass_field;
    eventType eventType_field;
};

class OSS_PUBLIC NoSuchArgument  : public OssChoice   /* CHOICE */
{
public:
    enum Id {
	unselected,
	actionId_chosen = 1,
	eventId_chosen = 2
    };
    typedef __seq2 actionId;
    typedef __seq3 eventId;

    NoSuchArgument();
    NoSuchArgument(const NoSuchArgument &);
    ~NoSuchArgument();

    NoSuchArgument & operator = (const NoSuchArgument &);
    int operator == (const NoSuchArgument &) const;
    int operator != (const NoSuchArgument &) const;

    actionId *get_actionId();
    const actionId *get_actionId() const;
    void set_actionId(const actionId &);

    eventId *get_eventId();
    const eventId *get_eventId() const;
    void set_eventId(const eventId &);
private:
    union {
	actionId *actionId_field;
	eventId *eventId_field;
    };
    void cleanup();
};

class OSS_PUBLIC __seq1   /* SEQUENCE */
{
public:
    void * operator new(size_t size);
    void operator delete(void *ptr);

    typedef __shared3 eventType;
    typedef AvaSet_Value eventInfo;

    __seq1();
    __seq1(const __seq1 &);
    __seq1(const eventType &, const eventInfo &);
    __seq1(const eventType &);

    __seq1 & operator = (const __seq1 &);
    int operator == (const __seq1 &) const;
    int operator != (const __seq1 &) const;

    eventType & get_eventType();
    const eventType & get_eventType() const;
    void set_eventType(const eventType &);

    eventInfo *get_eventInfo();
    const eventInfo *get_eventInfo() const;
    void set_eventInfo(const eventInfo &);
    int eventInfo_is_present() const;
    void omit_eventInfo();
private:
    OSS_UINT32 bit_mask;
    eventType eventType_field;
    eventInfo eventInfo_field;
};

class OSS_PUBLIC InvalidArgumentValue  : public OssChoice   /* CHOICE */
{
public:
    enum Id {
	unselected,
	actionValue_chosen = 1,
	eventValue_chosen = 2
    };
    typedef ActionInfo actionValue;
    typedef __seq1 eventValue;

    InvalidArgumentValue();
    InvalidArgumentValue(const InvalidArgumentValue &);
    ~InvalidArgumentValue();

    InvalidArgumentValue & operator = (const InvalidArgumentValue &);
    int operator == (const InvalidArgumentValue &) const;
    int operator != (const InvalidArgumentValue &) const;

    actionValue *get_actionValue();
    const actionValue *get_actionValue() const;
    void set_actionValue(const actionValue &);

    eventValue *get_eventValue();
    const eventValue *get_eventValue() const;
    void set_eventValue(const eventValue &);
private:
    union {
	actionValue *actionValue_field;
	eventValue *eventValue_field;
    };
    void cleanup();
};

class OSS_PUBLIC __choice2  : public OssChoice   /* CHOICE */
{
public:
    enum Id {
	unselected,
	actionType_chosen = 3,
	actionArgument_chosen = 1,
	argumentValue_chosen = 2
    };
    typedef __shared3 actionType;
    typedef NoSuchArgument actionArgument;
    typedef InvalidArgumentValue argumentValue;

    __choice2();
    __choice2(const __choice2 &);
    ~__choice2();

    __choice2 & operator = (const __choice2 &);
    int operator == (const __choice2 &) const;
    int operator != (const __choice2 &) const;

    actionType *get_actionType();
    const actionType *get_actionType() const;
    void set_actionType(const actionType &);

    actionArgument *get_actionArgument();
    const actionArgument *get_actionArgument() const;
    void set_actionArgument(const actionArgument &);

    argumentValue *get_argumentValue();
    const argumentValue *get_argumentValue() const;
    void set_argumentValue(const argumentValue &);
private:
    union {
	actionType *actionType_field;
	actionArgument *actionArgument_field;
	argumentValue *argumentValue_field;
    };
    void cleanup();
};

class OSS_PUBLIC ActionErrorInfo   /* SEQUENCE */
{
public:
    void * operator new(size_t size);
    void operator delete(void *ptr);

    typedef enum _enum2 errorStatus;
    typedef __choice2 errorInfo;

    ActionErrorInfo();
    ActionErrorInfo(const ActionErrorInfo &);
    ActionErrorInfo(errorStatus, const errorInfo &);

    ActionErrorInfo & operator = (const ActionErrorInfo &);
    int operator == (const ActionErrorInfo &) const;
    int operator != (const ActionErrorInfo &) const;

    errorStatus & get_errorStatus();
    errorStatus get_errorStatus() const;
    void set_errorStatus(errorStatus);

    errorInfo & get_errorInfo();
    const errorInfo & get_errorInfo() const;
    void set_errorInfo(const errorInfo &);
private:
    errorStatus errorStatus_field;
    errorInfo errorInfo_field;
};

class OSS_PUBLIC ActionError   /* SEQUENCE */
{
public:
    void * operator new(size_t size);
    void operator delete(void *ptr);

    typedef __shared3 managedObjectClass;
    typedef ObjectInstance managedObjectInstance;
    typedef OssGeneralizedTime currentTime;
    typedef ActionErrorInfo actionErrorInfo;

    ActionError();
    ActionError(const ActionError &);
    ActionError(const managedObjectClass &, const managedObjectInstance &, const currentTime &, 
	const actionErrorInfo &);
    ActionError(const actionErrorInfo &);

    ActionError & operator = (const ActionError &);
    int operator == (const ActionError &) const;
    int operator != (const ActionError &) const;

    managedObjectClass *get_managedObjectClass();
    const managedObjectClass *get_managedObjectClass() const;
    void set_managedObjectClass(const managedObjectClass &);
    int managedObjectClass_is_present() const;
    void omit_managedObjectClass();

    managedObjectInstance *get_managedObjectInstance();
    const managedObjectInstance *get_managedObjectInstance() const;
    void set_managedObjectInstance(const managedObjectInstance &);
    int managedObjectInstance_is_present() const;
    void omit_managedObjectInstance();

    currentTime *get_currentTime();
    const currentTime *get_currentTime() const;
    void set_currentTime(const currentTime &);
    int currentTime_is_present() const;
    void omit_currentTime();

    actionErrorInfo & get_actionErrorInfo();
    const actionErrorInfo & get_actionErrorInfo() const;
    void set_actionErrorInfo(const actionErrorInfo &);
private:
    OSS_UINT32 bit_mask;
    managedObjectClass managedObjectClass_field;
    managedObjectInstance managedObjectInstance_field;
    currentTime currentTime_field;
    actionErrorInfo actionErrorInfo_field;
};

class OSS_PUBLIC ActionReply   /* SEQUENCE */
{
public:
    void * operator new(size_t size);
    void operator delete(void *ptr);

    typedef __shared3 actionType;
    typedef AvaSet_Value actionReplyInfo;

    ActionReply();
    ActionReply(const ActionReply &);
    ActionReply(const actionType &, const actionReplyInfo &);

    ActionReply & operator = (const ActionReply &);
    int operator == (const ActionReply &) const;
    int operator != (const ActionReply &) const;

    actionType & get_actionType();
    const actionType & get_actionType() const;
    void set_actionType(const actionType &);

    actionReplyInfo & get_actionReplyInfo();
    const actionReplyInfo & get_actionReplyInfo() const;
    void set_actionReplyInfo(const actionReplyInfo &);
private:
    actionType actionType_field;
    actionReplyInfo actionReplyInfo_field;
};

class OSS_PUBLIC ActionResult   /* SEQUENCE */
{
public:
    void * operator new(size_t size);
    void operator delete(void *ptr);

    typedef __shared3 managedObjectClass;
    typedef ObjectInstance managedObjectInstance;
    typedef OssGeneralizedTime currentTime;
    typedef ActionReply actionReply;

    ActionResult();
    ActionResult(const ActionResult &);
    ActionResult(const managedObjectClass &, const managedObjectInstance &, const currentTime &, 
	const actionReply &);

    ActionResult & operator = (const ActionResult &);
    int operator == (const ActionResult &) const;
    int operator != (const ActionResult &) const;

    managedObjectClass *get_managedObjectClass();
    const managedObjectClass *get_managedObjectClass() const;
    void set_managedObjectClass(const managedObjectClass &);
    int managedObjectClass_is_present() const;
    void omit_managedObjectClass();

    managedObjectInstance *get_managedObjectInstance();
    const managedObjectInstance *get_managedObjectInstance() const;
    void set_managedObjectInstance(const managedObjectInstance &);
    int managedObjectInstance_is_present() const;
    void omit_managedObjectInstance();

    currentTime *get_currentTime();
    const currentTime *get_currentTime() const;
    void set_currentTime(const currentTime &);
    int currentTime_is_present() const;
    void omit_currentTime();

    actionReply *get_actionReply();
    const actionReply *get_actionReply() const;
    void set_actionReply(const actionReply &);
    int actionReply_is_present() const;
    void omit_actionReply();
private:
    OSS_UINT32 bit_mask;
    managedObjectClass managedObjectClass_field;
    managedObjectInstance managedObjectInstance_field;
    currentTime currentTime_field;
    actionReply actionReply_field;
};

typedef OSS_INT32 ModifyOperator;

class OSS_PUBLIC AttributeError   /* SEQUENCE */
{
public:
    void * operator new(size_t size);
    void operator delete(void *ptr);

    typedef enum _enum3 errorStatus;
    typedef OSS_INT32 modifyOperator;
    typedef __shared3 attributeId;
    typedef AvaSet_Value attributeValue;

    AttributeError();
    AttributeError(const AttributeError &);
    AttributeError(errorStatus, modifyOperator, const attributeId &, const attributeValue &);
    AttributeError(errorStatus, const attributeId &);

    AttributeError & operator = (const AttributeError &);
    int operator == (const AttributeError &) const;
    int operator != (const AttributeError &) const;

    errorStatus & get_errorStatus();
    errorStatus get_errorStatus() const;
    void set_errorStatus(errorStatus);

    modifyOperator *get_modifyOperator();
    const modifyOperator *get_modifyOperator() const;
    void set_modifyOperator(modifyOperator);
    int modifyOperator_is_present() const;
    void omit_modifyOperator();

    attributeId & get_attributeId();
    const attributeId & get_attributeId() const;
    void set_attributeId(const attributeId &);

    attributeValue *get_attributeValue();
    const attributeValue *get_attributeValue() const;
    void set_attributeValue(const attributeValue &);
    int attributeValue_is_present() const;
    void omit_attributeValue();
private:
    OSS_UINT32 bit_mask;
    errorStatus errorStatus_field;
    modifyOperator modifyOperator_field;
    attributeId attributeId_field;
    attributeValue attributeValue_field;
};

class OSS_PUBLIC AttributeIdError   /* SEQUENCE */
{
public:
    void * operator new(size_t size);
    void operator delete(void *ptr);

    typedef enum _enum4 errorStatus;
    typedef __shared3 attributeId;

    AttributeIdError();
    AttributeIdError(const AttributeIdError &);
    AttributeIdError(errorStatus, const attributeId &);

    AttributeIdError & operator = (const AttributeIdError &);
    int operator == (const AttributeIdError &) const;
    int operator != (const AttributeIdError &) const;

    errorStatus & get_errorStatus();
    errorStatus get_errorStatus() const;
    void set_errorStatus(errorStatus);

    attributeId & get_attributeId();
    const attributeId & get_attributeId() const;
    void set_attributeId(const attributeId &);
private:
    errorStatus errorStatus_field;
    attributeId attributeId_field;
};

class OSS_PUBLIC AttributeValueAssertion   /* SEQUENCE */
{
public:
    void * operator new(size_t size);
    void operator delete(void *ptr);

    typedef OssEncOID id;
    typedef AvaSet_Value value;

    AttributeValueAssertion();
    AttributeValueAssertion(const AttributeValueAssertion &);
    AttributeValueAssertion(const id &, const value &);

    AttributeValueAssertion & operator = (const AttributeValueAssertion &);
    int operator == (const AttributeValueAssertion &) const;
    int operator != (const AttributeValueAssertion &) const;

    id & get_id();
    const id & get_id() const;
    void set_id(const id &);

    value & get_value();
    const value & get_value() const;
    void set_value(const value &);
private:
    id id_field;
    value value_field;
};

class OSS_PUBLIC BaseManagedObjectId   /* SEQUENCE */
{
public:
    void * operator new(size_t size);
    void operator delete(void *ptr);

    typedef __shared3 baseManagedObjectClass;
    typedef ObjectInstance baseManagedObjectInstance;

    BaseManagedObjectId();
    BaseManagedObjectId(const BaseManagedObjectId &);
    BaseManagedObjectId(const baseManagedObjectClass &, const baseManagedObjectInstance &);

    BaseManagedObjectId & operator = (const BaseManagedObjectId &);
    int operator == (const BaseManagedObjectId &) const;
    int operator != (const BaseManagedObjectId &) const;

    baseManagedObjectClass & get_baseManagedObjectClass();
    const baseManagedObjectClass & get_baseManagedObjectClass() const;
    void set_baseManagedObjectClass(const baseManagedObjectClass &);

    baseManagedObjectInstance & get_baseManagedObjectInstance();
    const baseManagedObjectInstance & get_baseManagedObjectInstance() const;
    void set_baseManagedObjectInstance(const baseManagedObjectInstance &);
private:
    baseManagedObjectClass baseManagedObjectClass_field;
    baseManagedObjectInstance baseManagedObjectInstance_field;
};

class OSS_PUBLIC ComplexityLimitation   /* SET */
{
public:
    void * operator new(size_t size);
    void operator delete(void *ptr);

    typedef Scope scope;
    typedef CMISFilter filter;
    typedef enum CMISSync sync;

    ComplexityLimitation();
    ComplexityLimitation(const ComplexityLimitation &);
    ComplexityLimitation(const scope &, const filter &, sync);

    ComplexityLimitation & operator = (const ComplexityLimitation &);
    int operator == (const ComplexityLimitation &) const;
    int operator != (const ComplexityLimitation &) const;

    scope *get_scope();
    const scope *get_scope() const;
    void set_scope(const scope &);
    int scope_is_present() const;
    void omit_scope();

    filter *get_filter();
    const filter *get_filter() const;
    void set_filter(const filter &);
    int filter_is_present() const;
    void omit_filter();

    sync *get_sync();
    const sync *get_sync() const;
    void set_sync(sync);
    int sync_is_present() const;
    void omit_sync();
private:
    OSS_UINT32 bit_mask;
    scope scope_field;
    filter filter_field;
    sync sync_field;
};

class OSS_PUBLIC __choice3  : public OssChoice   /* CHOICE */
{
public:
    enum Id {
	unselected,
	managedObjectInstance_chosen = 1,
	superiorObjectInstance_chosen = 2
    };
    typedef ObjectInstance managedObjectInstance;
    typedef ObjectInstance superiorObjectInstance;

    __choice3();
    __choice3(const __choice3 &);
    ~__choice3();

    __choice3 & operator = (const __choice3 &);
    int operator == (const __choice3 &) const;
    int operator != (const __choice3 &) const;

    managedObjectInstance *get_managedObjectInstance();
    const managedObjectInstance *get_managedObjectInstance() const;
    void set_managedObjectInstance(const managedObjectInstance &);

    superiorObjectInstance *get_superiorObjectInstance();
    const superiorObjectInstance *get_superiorObjectInstance() const;
    void set_superiorObjectInstance(const superiorObjectInstance &);
private:
    union {
	managedObjectInstance *managedObjectInstance_field;
	superiorObjectInstance *superiorObjectInstance_field;
    };
    void cleanup();
};

class OSS_PUBLIC __shared10 : public OssList  /* SET OF */
{
public:
    typedef Attribute component;

    __shared10();
    __shared10(const __shared10 &);
    ~__shared10();

    __shared10 & operator = (const __shared10 &);
    int operator == (const __shared10 &) const;
    int operator != (const __shared10 &) const;

    component *at(OssIndex);
    const component *at(OssIndex) const;

    OssIndex prepend(const component & );
    OssIndex prepend(__shared10 *);
    OssIndex insert_after(OssIndex, const component & );
    OssIndex insert_after(OssIndex, __shared10 *);

    int remove_front();
    int remove_after(OssIndex);

    __shared10 *extract_after(OssIndex, OssIndex);
};

class OSS_PUBLIC CreateArgument   /* SEQUENCE */
{
public:
    void * operator new(size_t size);
    void operator delete(void *ptr);

    typedef __shared3 managedObjectClass;
    typedef __choice3 managedOrSuperiorObjectInstance;
    typedef __shared2 accessControl;
    typedef ObjectInstance referenceObjectInstance;
    typedef __shared10 attributeList;

    CreateArgument();
    CreateArgument(const CreateArgument &);
    CreateArgument(const managedObjectClass &, const managedOrSuperiorObjectInstance &, 
	const accessControl &, const referenceObjectInstance &, const attributeList &);
    CreateArgument(const managedObjectClass &);

    CreateArgument & operator = (const CreateArgument &);
    int operator == (const CreateArgument &) const;
    int operator != (const CreateArgument &) const;

    managedObjectClass & get_managedObjectClass();
    const managedObjectClass & get_managedObjectClass() const;
    void set_managedObjectClass(const managedObjectClass &);

    managedOrSuperiorObjectInstance *get_managedOrSuperiorObjectInstance();
    const managedOrSuperiorObjectInstance *get_managedOrSuperiorObjectInstance() const;
    void set_managedOrSuperiorObjectInstance(const managedOrSuperiorObjectInstance &);
    int managedOrSuperiorObjectInstance_is_present() const;
    void omit_managedOrSuperiorObjectInstance();

    accessControl *get_accessControl();
    const accessControl *get_accessControl() const;
    void set_accessControl(const accessControl &);
    int accessControl_is_present() const;
    void omit_accessControl();

    referenceObjectInstance *get_referenceObjectInstance();
    const referenceObjectInstance *get_referenceObjectInstance() const;
    void set_referenceObjectInstance(const referenceObjectInstance &);
    int referenceObjectInstance_is_present() const;
    void omit_referenceObjectInstance();

    attributeList *get_attributeList();
    const attributeList *get_attributeList() const;
    void set_attributeList(const attributeList &);
    int attributeList_is_present() const;
    void omit_attributeList();
private:
    OSS_UINT32 bit_mask;
    managedObjectClass managedObjectClass_field;
    managedOrSuperiorObjectInstance managedOrSuperiorObjectInstance_field;
    accessControl accessControl_field;
    referenceObjectInstance referenceObjectInstance_field;
    attributeList attributeList_field;
};

class OSS_PUBLIC __shared11   /* SEQUENCE */
{
public:
    void * operator new(size_t size);
    void operator delete(void *ptr);

    typedef __shared3 managedObjectClass;
    typedef ObjectInstance managedObjectInstance;
    typedef OssGeneralizedTime currentTime;
    typedef __shared10 attributeList;

    __shared11();
    __shared11(const __shared11 &);
    __shared11(const managedObjectClass &, const managedObjectInstance &, const currentTime &, 
	const attributeList &);

    __shared11 & operator = (const __shared11 &);
    int operator == (const __shared11 &) const;
    int operator != (const __shared11 &) const;

    managedObjectClass *get_managedObjectClass();
    const managedObjectClass *get_managedObjectClass() const;
    void set_managedObjectClass(const managedObjectClass &);
    int managedObjectClass_is_present() const;
    void omit_managedObjectClass();

    managedObjectInstance *get_managedObjectInstance();
    const managedObjectInstance *get_managedObjectInstance() const;
    void set_managedObjectInstance(const managedObjectInstance &);
    int managedObjectInstance_is_present() const;
    void omit_managedObjectInstance();

    currentTime *get_currentTime();
    const currentTime *get_currentTime() const;
    void set_currentTime(const currentTime &);
    int currentTime_is_present() const;
    void omit_currentTime();

    attributeList *get_attributeList();
    const attributeList *get_attributeList() const;
    void set_attributeList(const attributeList &);
    int attributeList_is_present() const;
    void omit_attributeList();
private:
    OSS_UINT32 bit_mask;
    managedObjectClass managedObjectClass_field;
    managedObjectInstance managedObjectInstance_field;
    currentTime currentTime_field;
    attributeList attributeList_field;
};

typedef __shared11 CreateResult;

class OSS_PUBLIC DeleteArgument   /* SEQUENCE */
{
public:
    void * operator new(size_t size);
    void operator delete(void *ptr);

    typedef __shared3 baseManagedObjectClass;
    typedef ObjectInstance baseManagedObjectInstance;
    typedef __shared2 accessControl;
    typedef enum CMISSync synchronization;
    typedef Scope scope;
    typedef CMISFilter filter;

    static const synchronization default_synchronization;
    static const scope & default_scope;
    static const filter & default_filter;

    static synchronization get_default_synchronization();
    static const scope& get_default_scope();
    static const filter& get_default_filter();

    DeleteArgument();
    DeleteArgument(const DeleteArgument &);
    DeleteArgument(const baseManagedObjectClass &, const baseManagedObjectInstance &, 
	const accessControl &, synchronization, const scope &, const filter &);
    DeleteArgument(const baseManagedObjectClass &, const baseManagedObjectInstance &);
    ~DeleteArgument();

    DeleteArgument & operator = (const DeleteArgument &);
    int operator == (const DeleteArgument &) const;
    int operator != (const DeleteArgument &) const;

    baseManagedObjectClass & get_baseManagedObjectClass();
    const baseManagedObjectClass & get_baseManagedObjectClass() const;
    void set_baseManagedObjectClass(const baseManagedObjectClass &);

    baseManagedObjectInstance & get_baseManagedObjectInstance();
    const baseManagedObjectInstance & get_baseManagedObjectInstance() const;
    void set_baseManagedObjectInstance(const baseManagedObjectInstance &);

    accessControl *get_accessControl();
    const accessControl *get_accessControl() const;
    void set_accessControl(const accessControl &);
    int accessControl_is_present() const;
    void omit_accessControl();

    synchronization *get_synchronization();
    const synchronization *get_synchronization() const;
    void set_synchronization(synchronization);
    int synchronization_is_default() const;
    void set_default_synchronization();

    scope *get_scope();
    const scope *get_scope() const;
    void set_scope(const scope &);
    int scope_is_default() const;
    void set_default_scope();

    filter *get_filter();
    const filter *get_filter() const;
    void set_filter(const filter &);
    int filter_is_default() const;
    void set_default_filter();
private:
    OSS_UINT32 bit_mask;
    baseManagedObjectClass baseManagedObjectClass_field;
    baseManagedObjectInstance baseManagedObjectInstance_field;
    accessControl accessControl_field;
    synchronization synchronization_field;
    scope scope_field;
    filter filter_field;
};

class OSS_PUBLIC DeleteError   /* SEQUENCE */
{
public:
    void * operator new(size_t size);
    void operator delete(void *ptr);

    typedef __shared3 managedObjectClass;
    typedef ObjectInstance managedObjectInstance;
    typedef OssGeneralizedTime currentTime;
    typedef enum _enum5 deleteErrorInfo;

    DeleteError();
    DeleteError(const DeleteError &);
    DeleteError(const managedObjectClass &, const managedObjectInstance &, const currentTime &, 
	deleteErrorInfo);
    DeleteError(deleteErrorInfo);

    DeleteError & operator = (const DeleteError &);
    int operator == (const DeleteError &) const;
    int operator != (const DeleteError &) const;

    managedObjectClass *get_managedObjectClass();
    const managedObjectClass *get_managedObjectClass() const;
    void set_managedObjectClass(const managedObjectClass &);
    int managedObjectClass_is_present() const;
    void omit_managedObjectClass();

    managedObjectInstance *get_managedObjectInstance();
    const managedObjectInstance *get_managedObjectInstance() const;
    void set_managedObjectInstance(const managedObjectInstance &);
    int managedObjectInstance_is_present() const;
    void omit_managedObjectInstance();

    currentTime *get_currentTime();
    const currentTime *get_currentTime() const;
    void set_currentTime(const currentTime &);
    int currentTime_is_present() const;
    void omit_currentTime();

    deleteErrorInfo & get_deleteErrorInfo();
    deleteErrorInfo get_deleteErrorInfo() const;
    void set_deleteErrorInfo(deleteErrorInfo);
private:
    OSS_UINT32 bit_mask;
    managedObjectClass managedObjectClass_field;
    managedObjectInstance managedObjectInstance_field;
    currentTime currentTime_field;
    deleteErrorInfo deleteErrorInfo_field;
};

class OSS_PUBLIC DeleteResult   /* SEQUENCE */
{
public:
    void * operator new(size_t size);
    void operator delete(void *ptr);

    typedef __shared3 managedObjectClass;
    typedef ObjectInstance managedObjectInstance;
    typedef OssGeneralizedTime currentTime;

    DeleteResult();
    DeleteResult(const DeleteResult &);
    DeleteResult(const managedObjectClass &, const managedObjectInstance &, const currentTime &);

    DeleteResult & operator = (const DeleteResult &);
    int operator == (const DeleteResult &) const;
    int operator != (const DeleteResult &) const;

    managedObjectClass *get_managedObjectClass();
    const managedObjectClass *get_managedObjectClass() const;
    void set_managedObjectClass(const managedObjectClass &);
    int managedObjectClass_is_present() const;
    void omit_managedObjectClass();

    managedObjectInstance *get_managedObjectInstance();
    const managedObjectInstance *get_managedObjectInstance() const;
    void set_managedObjectInstance(const managedObjectInstance &);
    int managedObjectInstance_is_present() const;
    void omit_managedObjectInstance();

    currentTime *get_currentTime();
    const currentTime *get_currentTime() const;
    void set_currentTime(const currentTime &);
    int currentTime_is_present() const;
    void omit_currentTime();
private:
    OSS_UINT32 bit_mask;
    managedObjectClass managedObjectClass_field;
    managedObjectInstance managedObjectInstance_field;
    currentTime currentTime_field;
};

class OSS_PUBLIC EventReply   /* SEQUENCE */
{
public:
    void * operator new(size_t size);
    void operator delete(void *ptr);

    typedef __shared3 eventType;
    typedef AvaSet_Value eventReplyInfo;

    EventReply();
    EventReply(const EventReply &);
    EventReply(const eventType &, const eventReplyInfo &);
    EventReply(const eventType &);

    EventReply & operator = (const EventReply &);
    int operator == (const EventReply &) const;
    int operator != (const EventReply &) const;

    eventType & get_eventType();
    const eventType & get_eventType() const;
    void set_eventType(const eventType &);

    eventReplyInfo *get_eventReplyInfo();
    const eventReplyInfo *get_eventReplyInfo() const;
    void set_eventReplyInfo(const eventReplyInfo &);
    int eventReplyInfo_is_present() const;
    void omit_eventReplyInfo();
private:
    OSS_UINT32 bit_mask;
    eventType eventType_field;
    eventReplyInfo eventReplyInfo_field;
};

class OSS_PUBLIC EventReportArgument   /* SEQUENCE */
{
public:
    void * operator new(size_t size);
    void operator delete(void *ptr);

    typedef __shared3 managedObjectClass;
    typedef ObjectInstance managedObjectInstance;
    typedef OssGeneralizedTime eventTime;
    typedef __shared3 eventType;
    typedef AvaSet_Value eventInfo;

    EventReportArgument();
    EventReportArgument(const EventReportArgument &);
    EventReportArgument(const managedObjectClass &, const managedObjectInstance &, 
	const eventTime &, const eventType &, const eventInfo &);
    EventReportArgument(const managedObjectClass &, const managedObjectInstance &, 
	const eventType &);

    EventReportArgument & operator = (const EventReportArgument &);
    int operator == (const EventReportArgument &) const;
    int operator != (const EventReportArgument &) const;

    managedObjectClass & get_managedObjectClass();
    const managedObjectClass & get_managedObjectClass() const;
    void set_managedObjectClass(const managedObjectClass &);

    managedObjectInstance & get_managedObjectInstance();
    const managedObjectInstance & get_managedObjectInstance() const;
    void set_managedObjectInstance(const managedObjectInstance &);

    eventTime *get_eventTime();
    const eventTime *get_eventTime() const;
    void set_eventTime(const eventTime &);
    int eventTime_is_present() const;
    void omit_eventTime();

    eventType & get_eventType();
    const eventType & get_eventType() const;
    void set_eventType(const eventType &);

    eventInfo *get_eventInfo();
    const eventInfo *get_eventInfo() const;
    void set_eventInfo(const eventInfo &);
    int eventInfo_is_present() const;
    void omit_eventInfo();
private:
    OSS_UINT32 bit_mask;
    managedObjectClass managedObjectClass_field;
    managedObjectInstance managedObjectInstance_field;
    eventTime eventTime_field;
    eventType eventType_field;
    eventInfo eventInfo_field;
};

class OSS_PUBLIC EventReportResult   /* SEQUENCE */
{
public:
    void * operator new(size_t size);
    void operator delete(void *ptr);

    typedef __shared3 managedObjectClass;
    typedef ObjectInstance managedObjectInstance;
    typedef OssGeneralizedTime currentTime;
    typedef EventReply eventReply;

    EventReportResult();
    EventReportResult(const EventReportResult &);
    EventReportResult(const managedObjectClass &, const managedObjectInstance &, 
	const currentTime &, const eventReply &);

    EventReportResult & operator = (const EventReportResult &);
    int operator == (const EventReportResult &) const;
    int operator != (const EventReportResult &) const;

    managedObjectClass *get_managedObjectClass();
    const managedObjectClass *get_managedObjectClass() const;
    void set_managedObjectClass(const managedObjectClass &);
    int managedObjectClass_is_present() const;
    void omit_managedObjectClass();

    managedObjectInstance *get_managedObjectInstance();
    const managedObjectInstance *get_managedObjectInstance() const;
    void set_managedObjectInstance(const managedObjectInstance &);
    int managedObjectInstance_is_present() const;
    void omit_managedObjectInstance();

    currentTime *get_currentTime();
    const currentTime *get_currentTime() const;
    void set_currentTime(const currentTime &);
    int currentTime_is_present() const;
    void omit_currentTime();

    eventReply *get_eventReply();
    const eventReply *get_eventReply() const;
    void set_eventReply(const eventReply &);
    int eventReply_is_present() const;
    void omit_eventReply();
private:
    OSS_UINT32 bit_mask;
    managedObjectClass managedObjectClass_field;
    managedObjectInstance managedObjectInstance_field;
    currentTime currentTime_field;
    eventReply eventReply_field;
};

class OSS_PUBLIC __choice4  : public OssChoice   /* CHOICE */
{
public:
    enum Id {
	unselected,
	initialString_chosen = 1,
	anyString_chosen = 2,
	finalString_chosen = 3
    };
    typedef Attribute initialString;
    typedef Attribute anyString;
    typedef Attribute finalString;

    __choice4();
    __choice4(const __choice4 &);
    ~__choice4();

    __choice4 & operator = (const __choice4 &);
    int operator == (const __choice4 &) const;
    int operator != (const __choice4 &) const;

    initialString *get_initialString();
    const initialString *get_initialString() const;
    void set_initialString(const initialString &);

    anyString *get_anyString();
    const anyString *get_anyString() const;
    void set_anyString(const anyString &);

    finalString *get_finalString();
    const finalString *get_finalString() const;
    void set_finalString(const finalString &);
private:
    union {
	initialString *initialString_field;
	anyString *anyString_field;
	finalString *finalString_field;
    };
    void cleanup();
};

class OSS_PUBLIC GetArgument   /* SEQUENCE */
{
public:
    void * operator new(size_t size);
    void operator delete(void *ptr);

    typedef __shared3 baseManagedObjectClass;
    typedef ObjectInstance baseManagedObjectInstance;
    typedef __shared2 accessControl;
    typedef enum CMISSync synchronization;
    typedef Scope scope;
    typedef CMISFilter filter;
    typedef __shared9 attributeIdList;

    static const synchronization default_synchronization;
    static const scope & default_scope;
    static const filter & default_filter;

    static synchronization get_default_synchronization();
    static const scope& get_default_scope();
    static const filter& get_default_filter();

    GetArgument();
    GetArgument(const GetArgument &);
    GetArgument(const baseManagedObjectClass &, const baseManagedObjectInstance &, 
	const accessControl &, synchronization, const scope &, const filter &, const attributeIdList &);
    GetArgument(const baseManagedObjectClass &, const baseManagedObjectInstance &);
    ~GetArgument();

    GetArgument & operator = (const GetArgument &);
    int operator == (const GetArgument &) const;
    int operator != (const GetArgument &) const;

    baseManagedObjectClass & get_baseManagedObjectClass();
    const baseManagedObjectClass & get_baseManagedObjectClass() const;
    void set_baseManagedObjectClass(const baseManagedObjectClass &);

    baseManagedObjectInstance & get_baseManagedObjectInstance();
    const baseManagedObjectInstance & get_baseManagedObjectInstance() const;
    void set_baseManagedObjectInstance(const baseManagedObjectInstance &);

    accessControl *get_accessControl();
    const accessControl *get_accessControl() const;
    void set_accessControl(const accessControl &);
    int accessControl_is_present() const;
    void omit_accessControl();

    synchronization *get_synchronization();
    const synchronization *get_synchronization() const;
    void set_synchronization(synchronization);
    int synchronization_is_default() const;
    void set_default_synchronization();

    scope *get_scope();
    const scope *get_scope() const;
    void set_scope(const scope &);
    int scope_is_default() const;
    void set_default_scope();

    filter *get_filter();
    const filter *get_filter() const;
    void set_filter(const filter &);
    int filter_is_default() const;
    void set_default_filter();

    attributeIdList *get_attributeIdList();
    const attributeIdList *get_attributeIdList() const;
    void set_attributeIdList(const attributeIdList &);
    int attributeIdList_is_present() const;
    void omit_attributeIdList();
private:
    OSS_UINT32 bit_mask;
    baseManagedObjectClass baseManagedObjectClass_field;
    baseManagedObjectInstance baseManagedObjectInstance_field;
    accessControl accessControl_field;
    synchronization synchronization_field;
    scope scope_field;
    filter filter_field;
    attributeIdList attributeIdList_field;
};

class OSS_PUBLIC GetInfoStatus  : public OssChoice   /* CHOICE */
{
public:
    enum Id {
	unselected,
	attributeIdError_chosen = 1,
	attribute_chosen = 2
    };
    typedef AttributeIdError attributeIdError;
    typedef Attribute attribute;

    GetInfoStatus();
    GetInfoStatus(const GetInfoStatus &);
    ~GetInfoStatus();

    GetInfoStatus & operator = (const GetInfoStatus &);
    int operator == (const GetInfoStatus &) const;
    int operator != (const GetInfoStatus &) const;

    attributeIdError *get_attributeIdError();
    const attributeIdError *get_attributeIdError() const;
    void set_attributeIdError(const attributeIdError &);

    attribute *get_attribute();
    const attribute *get_attribute() const;
    void set_attribute(const attribute &);
private:
    union {
	attributeIdError *attributeIdError_field;
	attribute *attribute_field;
    };
    void cleanup();
};

class OSS_PUBLIC __setof6 : public OssList  /* SET OF */
{
public:
    typedef GetInfoStatus component;

    __setof6();
    __setof6(const __setof6 &);
    ~__setof6();

    __setof6 & operator = (const __setof6 &);
    int operator == (const __setof6 &) const;
    int operator != (const __setof6 &) const;

    component *at(OssIndex);
    const component *at(OssIndex) const;

    OssIndex prepend(const component & );
    OssIndex prepend(__setof6 *);
    OssIndex insert_after(OssIndex, const component & );
    OssIndex insert_after(OssIndex, __setof6 *);

    int remove_front();
    int remove_after(OssIndex);

    __setof6 *extract_after(OssIndex, OssIndex);
};

class OSS_PUBLIC GetListError   /* SEQUENCE */
{
public:
    void * operator new(size_t size);
    void operator delete(void *ptr);

    typedef __shared3 managedObjectClass;
    typedef ObjectInstance managedObjectInstance;
    typedef OssGeneralizedTime currentTime;
    typedef __setof6 getInfoList;

    GetListError();
    GetListError(const GetListError &);
    GetListError(const managedObjectClass &, const managedObjectInstance &, const currentTime &, 
	const getInfoList &);
    GetListError(const getInfoList &);

    GetListError & operator = (const GetListError &);
    int operator == (const GetListError &) const;
    int operator != (const GetListError &) const;

    managedObjectClass *get_managedObjectClass();
    const managedObjectClass *get_managedObjectClass() const;
    void set_managedObjectClass(const managedObjectClass &);
    int managedObjectClass_is_present() const;
    void omit_managedObjectClass();

    managedObjectInstance *get_managedObjectInstance();
    const managedObjectInstance *get_managedObjectInstance() const;
    void set_managedObjectInstance(const managedObjectInstance &);
    int managedObjectInstance_is_present() const;
    void omit_managedObjectInstance();

    currentTime *get_currentTime();
    const currentTime *get_currentTime() const;
    void set_currentTime(const currentTime &);
    int currentTime_is_present() const;
    void omit_currentTime();

    getInfoList & get_getInfoList();
    const getInfoList & get_getInfoList() const;
    void set_getInfoList(const getInfoList &);
private:
    OSS_UINT32 bit_mask;
    managedObjectClass managedObjectClass_field;
    managedObjectInstance managedObjectInstance_field;
    currentTime currentTime_field;
    getInfoList getInfoList_field;
};

typedef __shared11 GetResult;

class OSS_PUBLIC __shared12  : public OssChoice   /* CHOICE */
{
public:
    enum Id {
	unselected,
	present_chosen = 1,
	absent_chosen = 2
    };
    typedef OSS_INT32 present;
    typedef Nulltype absent;

    __shared12();
    __shared12(const __shared12 &);

    __shared12 & operator = (const __shared12 &);
    int operator == (const __shared12 &) const;
    int operator != (const __shared12 &) const;

    present *get_present();
    const present *get_present() const;
    void set_present(present);

    absent *get_absent();
    const absent *get_absent() const;
    void set_absent(absent);
private:
    union {
	present present_field;
	absent absent_field;
    };
};

typedef __shared12 InvokeId;

typedef __shared12 InvokeIDType;

typedef __shared11 SetResult;

class OSS_PUBLIC SetInfoStatus;

class OSS_PUBLIC __setof9 : public OssList  /* SET OF */
{
public:
    typedef SetInfoStatus component;

    __setof9();
    __setof9(const __setof9 &);
    ~__setof9();

    __setof9 & operator = (const __setof9 &);
    int operator == (const __setof9 &) const;
    int operator != (const __setof9 &) const;

    component *at(OssIndex);
    const component *at(OssIndex) const;

    OssIndex prepend(const component & );
    OssIndex prepend(__setof9 *);
    OssIndex insert_after(OssIndex, const component & );
    OssIndex insert_after(OssIndex, __setof9 *);

    int remove_front();
    int remove_after(OssIndex);

    __setof9 *extract_after(OssIndex, OssIndex);
};

class OSS_PUBLIC SetListError   /* SEQUENCE */
{
public:
    void * operator new(size_t size);
    void operator delete(void *ptr);

    typedef __shared3 managedObjectClass;
    typedef ObjectInstance managedObjectInstance;
    typedef OssGeneralizedTime currentTime;
    typedef __setof9 setInfoList;

    SetListError();
    SetListError(const SetListError &);
    SetListError(const managedObjectClass &, const managedObjectInstance &, const currentTime &, 
	const setInfoList &);
    SetListError(const setInfoList &);

    SetListError & operator = (const SetListError &);
    int operator == (const SetListError &) const;
    int operator != (const SetListError &) const;

    managedObjectClass *get_managedObjectClass();
    const managedObjectClass *get_managedObjectClass() const;
    void set_managedObjectClass(const managedObjectClass &);
    int managedObjectClass_is_present() const;
    void omit_managedObjectClass();

    managedObjectInstance *get_managedObjectInstance();
    const managedObjectInstance *get_managedObjectInstance() const;
    void set_managedObjectInstance(const managedObjectInstance &);
    int managedObjectInstance_is_present() const;
    void omit_managedObjectInstance();

    currentTime *get_currentTime();
    const currentTime *get_currentTime() const;
    void set_currentTime(const currentTime &);
    int currentTime_is_present() const;
    void omit_currentTime();

    setInfoList & get_setInfoList();
    const setInfoList & get_setInfoList() const;
    void set_setInfoList(const setInfoList &);
private:
    OSS_UINT32 bit_mask;
    managedObjectClass managedObjectClass_field;
    managedObjectInstance managedObjectInstance_field;
    currentTime currentTime_field;
    setInfoList setInfoList_field;
};

class OSS_PUBLIC SpecificErrorInfo   /* SEQUENCE */
{
public:
    void * operator new(size_t size);
    void operator delete(void *ptr);

    typedef OssEncOID errorId;
    typedef AvaSet_Value errorInfo;

    SpecificErrorInfo();
    SpecificErrorInfo(const SpecificErrorInfo &);
    SpecificErrorInfo(const errorId &, const errorInfo &);

    SpecificErrorInfo & operator = (const SpecificErrorInfo &);
    int operator == (const SpecificErrorInfo &) const;
    int operator != (const SpecificErrorInfo &) const;

    errorId & get_errorId();
    const errorId & get_errorId() const;
    void set_errorId(const errorId &);

    errorInfo & get_errorInfo();
    const errorInfo & get_errorInfo() const;
    void set_errorInfo(const errorInfo &);
private:
    errorId errorId_field;
    errorInfo errorInfo_field;
};

class OSS_PUBLIC ProcessingFailure   /* SEQUENCE */
{
public:
    void * operator new(size_t size);
    void operator delete(void *ptr);

    typedef __shared3 managedObjectClass;
    typedef ObjectInstance managedObjectInstance;
    typedef SpecificErrorInfo specificErrorInfo;

    ProcessingFailure();
    ProcessingFailure(const ProcessingFailure &);
    ProcessingFailure(const managedObjectClass &, const managedObjectInstance &, 
	const specificErrorInfo &);
    ProcessingFailure(const managedObjectClass &, const specificErrorInfo &);

    ProcessingFailure & operator = (const ProcessingFailure &);
    int operator == (const ProcessingFailure &) const;
    int operator != (const ProcessingFailure &) const;

    managedObjectClass & get_managedObjectClass();
    const managedObjectClass & get_managedObjectClass() const;
    void set_managedObjectClass(const managedObjectClass &);

    managedObjectInstance *get_managedObjectInstance();
    const managedObjectInstance *get_managedObjectInstance() const;
    void set_managedObjectInstance(const managedObjectInstance &);
    int managedObjectInstance_is_present() const;
    void omit_managedObjectInstance();

    specificErrorInfo & get_specificErrorInfo();
    const specificErrorInfo & get_specificErrorInfo() const;
    void set_specificErrorInfo(const specificErrorInfo &);
private:
    OSS_UINT32 bit_mask;
    managedObjectClass managedObjectClass_field;
    managedObjectInstance managedObjectInstance_field;
    specificErrorInfo specificErrorInfo_field;
};

class OSS_PUBLIC LinkedReplyArgument  : public OssChoice   /* CHOICE */
{
public:
    enum Id {
	unselected,
	getResult_chosen = 1,
	getListError_chosen = 2,
	setResult_chosen = 3,
	setListError_chosen = 4,
	actionResult_chosen = 5,
	processingFailure_chosen = 6,
	deleteResult_chosen = 7,
	actionError_chosen = 8,
	deleteError_chosen = 9
    };
    typedef __shared11 getResult;
    typedef GetListError getListError;
    typedef __shared11 setResult;
    typedef SetListError setListError;
    typedef ActionResult actionResult;
    typedef ProcessingFailure processingFailure;
    typedef DeleteResult deleteResult;
    typedef ActionError actionError;
    typedef DeleteError deleteError;

    LinkedReplyArgument();
    LinkedReplyArgument(const LinkedReplyArgument &);
    ~LinkedReplyArgument();

    LinkedReplyArgument & operator = (const LinkedReplyArgument &);
    int operator == (const LinkedReplyArgument &) const;
    int operator != (const LinkedReplyArgument &) const;

    getResult *get_getResult();
    const getResult *get_getResult() const;
    void set_getResult(const getResult &);

    getListError *get_getListError();
    const getListError *get_getListError() const;
    void set_getListError(const getListError &);

    setResult *get_setResult();
    const setResult *get_setResult() const;
    void set_setResult(const setResult &);

    setListError *get_setListError();
    const setListError *get_setListError() const;
    void set_setListError(const setListError &);

    actionResult *get_actionResult();
    const actionResult *get_actionResult() const;
    void set_actionResult(const actionResult &);

    processingFailure *get_processingFailure();
    const processingFailure *get_processingFailure() const;
    void set_processingFailure(const processingFailure &);

    deleteResult *get_deleteResult();
    const deleteResult *get_deleteResult() const;
    void set_deleteResult(const deleteResult &);

    actionError *get_actionError();
    const actionError *get_actionError() const;
    void set_actionError(const actionError &);

    deleteError *get_deleteError();
    const deleteError *get_deleteError() const;
    void set_deleteError(const deleteError &);
private:
    union {
	getResult *getResult_field;
	getListError *getListError_field;
	setResult *setResult_field;
	setListError *setListError_field;
	actionResult *actionResult_field;
	processingFailure *processingFailure_field;
	deleteResult *deleteResult_field;
	actionError *actionError_field;
	deleteError *deleteError_field;
    };
    void cleanup();
};

class OSS_PUBLIC NoSuchAction   /* SEQUENCE */
{
public:
    void * operator new(size_t size);
    void operator delete(void *ptr);

    typedef __shared3 managedObjectClass;
    typedef __shared3 actionType;

    NoSuchAction();
    NoSuchAction(const NoSuchAction &);
    NoSuchAction(const managedObjectClass &, const actionType &);

    NoSuchAction & operator = (const NoSuchAction &);
    int operator == (const NoSuchAction &) const;
    int operator != (const NoSuchAction &) const;

    managedObjectClass & get_managedObjectClass();
    const managedObjectClass & get_managedObjectClass() const;
    void set_managedObjectClass(const managedObjectClass &);

    actionType & get_actionType();
    const actionType & get_actionType() const;
    void set_actionType(const actionType &);
private:
    managedObjectClass managedObjectClass_field;
    actionType actionType_field;
};

class OSS_PUBLIC NoSuchEventType   /* SEQUENCE */
{
public:
    void * operator new(size_t size);
    void operator delete(void *ptr);

    typedef __shared3 managedObjectClass;
    typedef __shared3 eventType;

    NoSuchEventType();
    NoSuchEventType(const NoSuchEventType &);
    NoSuchEventType(const managedObjectClass &, const eventType &);

    NoSuchEventType & operator = (const NoSuchEventType &);
    int operator == (const NoSuchEventType &) const;
    int operator != (const NoSuchEventType &) const;

    managedObjectClass & get_managedObjectClass();
    const managedObjectClass & get_managedObjectClass() const;
    void set_managedObjectClass(const managedObjectClass &);

    eventType & get_eventType();
    const eventType & get_eventType() const;
    void set_eventType(const eventType &);
private:
    managedObjectClass managedObjectClass_field;
    eventType eventType_field;
};

class OSS_PUBLIC RelativeDistinguishedName : public OssList  /* SET OF */
{
public:
    typedef AttributeValueAssertion component;

    RelativeDistinguishedName();
    RelativeDistinguishedName(const RelativeDistinguishedName &);
    ~RelativeDistinguishedName();

    RelativeDistinguishedName & operator = (const RelativeDistinguishedName &);
    int operator == (const RelativeDistinguishedName &) const;
    int operator != (const RelativeDistinguishedName &) const;

    component *at(OssIndex);
    const component *at(OssIndex) const;

    OssIndex prepend(const component & );
    OssIndex prepend(RelativeDistinguishedName *);
    OssIndex insert_after(OssIndex, const component & );
    OssIndex insert_after(OssIndex, RelativeDistinguishedName *);

    int remove_front();
    int remove_after(OssIndex);

    RelativeDistinguishedName *extract_after(OssIndex, OssIndex);
};

class OSS_PUBLIC __seq4;

class OSS_PUBLIC __setof8 : public OssList  /* SET OF */
{
public:
    typedef __seq4 component;

    __setof8();
    __setof8(const __setof8 &);
    ~__setof8();

    __setof8 & operator = (const __setof8 &);
    int operator == (const __setof8 &) const;
    int operator != (const __setof8 &) const;

    component *at(OssIndex);
    const component *at(OssIndex) const;

    OssIndex prepend(const component & );
    OssIndex prepend(__setof8 *);
    OssIndex insert_after(OssIndex, const component & );
    OssIndex insert_after(OssIndex, __setof8 *);

    int remove_front();
    int remove_after(OssIndex);

    __setof8 *extract_after(OssIndex, OssIndex);
};

class OSS_PUBLIC SetArgument   /* SEQUENCE */
{
public:
    void * operator new(size_t size);
    void operator delete(void *ptr);

    typedef __shared3 baseManagedObjectClass;
    typedef ObjectInstance baseManagedObjectInstance;
    typedef __shared2 accessControl;
    typedef enum CMISSync synchronization;
    typedef Scope scope;
    typedef CMISFilter filter;
    typedef __setof8 modificationList;

    static const synchronization default_synchronization;
    static const scope & default_scope;
    static const filter & default_filter;

    static synchronization get_default_synchronization();
    static const scope& get_default_scope();
    static const filter& get_default_filter();

    SetArgument();
    SetArgument(const SetArgument &);
    SetArgument(const baseManagedObjectClass &, const baseManagedObjectInstance &, 
	const accessControl &, synchronization, const scope &, const filter &, const modificationList &);
    SetArgument(const baseManagedObjectClass &, const baseManagedObjectInstance &, 
	const modificationList &);
    ~SetArgument();

    SetArgument & operator = (const SetArgument &);
    int operator == (const SetArgument &) const;
    int operator != (const SetArgument &) const;

    baseManagedObjectClass & get_baseManagedObjectClass();
    const baseManagedObjectClass & get_baseManagedObjectClass() const;
    void set_baseManagedObjectClass(const baseManagedObjectClass &);

    baseManagedObjectInstance & get_baseManagedObjectInstance();
    const baseManagedObjectInstance & get_baseManagedObjectInstance() const;
    void set_baseManagedObjectInstance(const baseManagedObjectInstance &);

    accessControl *get_accessControl();
    const accessControl *get_accessControl() const;
    void set_accessControl(const accessControl &);
    int accessControl_is_present() const;
    void omit_accessControl();

    synchronization *get_synchronization();
    const synchronization *get_synchronization() const;
    void set_synchronization(synchronization);
    int synchronization_is_default() const;
    void set_default_synchronization();

    scope *get_scope();
    const scope *get_scope() const;
    void set_scope(const scope &);
    int scope_is_default() const;
    void set_default_scope();

    filter *get_filter();
    const filter *get_filter() const;
    void set_filter(const filter &);
    int filter_is_default() const;
    void set_default_filter();

    modificationList & get_modificationList();
    const modificationList & get_modificationList() const;
    void set_modificationList(const modificationList &);
private:
    OSS_UINT32 bit_mask;
    baseManagedObjectClass baseManagedObjectClass_field;
    baseManagedObjectInstance baseManagedObjectInstance_field;
    accessControl accessControl_field;
    synchronization synchronization_field;
    scope scope_field;
    filter filter_field;
    modificationList modificationList_field;
};

class OSS_PUBLIC __seq4   /* SEQUENCE */
{
public:
    void * operator new(size_t size);
    void operator delete(void *ptr);

    typedef OSS_INT32 modifyOperator;
    typedef __shared3 attributeId;
    typedef AvaSet_Value attributeValue;

    static const modifyOperator default_modifyOperator;

    static modifyOperator get_default_modifyOperator();

    __seq4();
    __seq4(const __seq4 &);
    __seq4(modifyOperator, const attributeId &, const attributeValue &);
    __seq4(const attributeId &);

    __seq4 & operator = (const __seq4 &);
    int operator == (const __seq4 &) const;
    int operator != (const __seq4 &) const;

    modifyOperator *get_modifyOperator();
    const modifyOperator *get_modifyOperator() const;
    void set_modifyOperator(modifyOperator);
    int modifyOperator_is_default() const;
    void set_default_modifyOperator();

    attributeId & get_attributeId();
    const attributeId & get_attributeId() const;
    void set_attributeId(const attributeId &);

    attributeValue *get_attributeValue();
    const attributeValue *get_attributeValue() const;
    void set_attributeValue(const attributeValue &);
    int attributeValue_is_present() const;
    void omit_attributeValue();
private:
    OSS_UINT32 bit_mask;
    modifyOperator modifyOperator_field;
    attributeId attributeId_field;
    attributeValue attributeValue_field;
};

class OSS_PUBLIC SetInfoStatus  : public OssChoice   /* CHOICE */
{
public:
    enum Id {
	unselected,
	attributeError_chosen = 1,
	attribute_chosen = 2
    };
    typedef AttributeError attributeError;
    typedef Attribute attribute;

    SetInfoStatus();
    SetInfoStatus(const SetInfoStatus &);
    ~SetInfoStatus();

    SetInfoStatus & operator = (const SetInfoStatus &);
    int operator == (const SetInfoStatus &) const;
    int operator != (const SetInfoStatus &) const;

    attributeError *get_attributeError();
    const attributeError *get_attributeError() const;
    void set_attributeError(const attributeError &);

    attribute *get_attribute();
    const attribute *get_attribute() const;
    void set_attribute(const attribute &);
private:
    union {
	attributeError *attributeError_field;
	attribute *attribute_field;
    };
    void cleanup();
};

class OSS_PUBLIC Code  : public OssChoice   /* CHOICE */
{
public:
    enum Id {
	unselected,
	local_chosen = 1,
	global_chosen = 2
    };
    typedef OSS_INT32 local;
    typedef OssEncOID global;

    Code();
    Code(const Code &);
    ~Code();

    Code & operator = (const Code &);
    int operator == (const Code &) const;
    int operator != (const Code &) const;

    local *get_local();
    const local *get_local() const;
    void set_local(local);

    global *get_global();
    const global *get_global() const;
    void set_global(const global &);
private:
    union {
	local local_field;
	OSSC::COssEncOID global_field;
    };
    void cleanup();
};

class OSS_PUBLIC CMIP_Operations_ArgumentType : public OssConstrainedOpenType
{
public:
    CMIP_Operations_ArgumentType();
    CMIP_Operations_ArgumentType(const CMIP_Operations_ArgumentType &);
    ~CMIP_Operations_ArgumentType();
    CMIP_Operations_ArgumentType & operator = (const CMIP_Operations_ArgumentType &);
    int operator == (const CMIP_Operations_ArgumentType &) const;
    int operator != (const CMIP_Operations_ArgumentType &) const;
    int set_decoded(PDU &);
    int grab_decoded(PDU &);
    int set_encoded(const EncodedBuffer &);
    int grab_encoded(EncodedBuffer &);
    int encode(OssControl &);

    ActionArgument *get_ActionArgument();
    const ActionArgument *get_ActionArgument() const;
    void set_ActionArgument(const ActionArgument &);
    ActionArgument *release_ActionArgument();
    void set_ActionArgument(ActionArgument *);

    __shared12 *get_InvokeIDType();
    const __shared12 *get_InvokeIDType() const;
    void set_InvokeIDType(const __shared12 &);
    __shared12 *release_InvokeIDType();
    void set_InvokeIDType(__shared12 *);

    CreateArgument *get_CreateArgument();
    const CreateArgument *get_CreateArgument() const;
    void set_CreateArgument(const CreateArgument &);
    CreateArgument *release_CreateArgument();
    void set_CreateArgument(CreateArgument *);

    DeleteArgument *get_DeleteArgument();
    const DeleteArgument *get_DeleteArgument() const;
    void set_DeleteArgument(const DeleteArgument &);
    DeleteArgument *release_DeleteArgument();
    void set_DeleteArgument(DeleteArgument *);

    EventReportArgument *get_EventReportArgument();
    const EventReportArgument *get_EventReportArgument() const;
    void set_EventReportArgument(const EventReportArgument &);
    EventReportArgument *release_EventReportArgument();
    void set_EventReportArgument(EventReportArgument *);

    GetArgument *get_GetArgument();
    const GetArgument *get_GetArgument() const;
    void set_GetArgument(const GetArgument &);
    GetArgument *release_GetArgument();
    void set_GetArgument(GetArgument *);

    LinkedReplyArgument *get_LinkedReplyArgument();
    const LinkedReplyArgument *get_LinkedReplyArgument() const;
    void set_LinkedReplyArgument(const LinkedReplyArgument &);
    LinkedReplyArgument *release_LinkedReplyArgument();
    void set_LinkedReplyArgument(LinkedReplyArgument *);

    SetArgument *get_SetArgument();
    const SetArgument *get_SetArgument() const;
    void set_SetArgument(const SetArgument &);
    SetArgument *release_SetArgument();
    void set_SetArgument(SetArgument *);
private:
    void cleanup_decoded();
    int check_type(int);
};

class OSS_PUBLIC CMIP_Confirmed_Operations_ResultType : public OssConstrainedOpenType
{
public:
    CMIP_Confirmed_Operations_ResultType();
    CMIP_Confirmed_Operations_ResultType(const CMIP_Confirmed_Operations_ResultType &);
    ~CMIP_Confirmed_Operations_ResultType();
    CMIP_Confirmed_Operations_ResultType & operator = (const CMIP_Confirmed_Operations_ResultType &);
    int operator == (const CMIP_Confirmed_Operations_ResultType &) const;
    int operator != (const CMIP_Confirmed_Operations_ResultType &) const;
    int set_decoded(PDU &);
    int grab_decoded(PDU &);
    int set_encoded(const EncodedBuffer &);
    int grab_encoded(EncodedBuffer &);
    int encode(OssControl &);

    ActionResult *get_ActionResult();
    const ActionResult *get_ActionResult() const;
    void set_ActionResult(const ActionResult &);
    ActionResult *release_ActionResult();
    void set_ActionResult(ActionResult *);

    __shared11 *get_CreateResult();
    const __shared11 *get_CreateResult() const;
    void set_CreateResult(const __shared11 &);
    __shared11 *release_CreateResult();
    void set_CreateResult(__shared11 *);

    DeleteResult *get_DeleteResult();
    const DeleteResult *get_DeleteResult() const;
    void set_DeleteResult(const DeleteResult &);
    DeleteResult *release_DeleteResult();
    void set_DeleteResult(DeleteResult *);

    EventReportResult *get_EventReportResult();
    const EventReportResult *get_EventReportResult() const;
    void set_EventReportResult(const EventReportResult &);
    EventReportResult *release_EventReportResult();
    void set_EventReportResult(EventReportResult *);

    __shared11 *get_GetResult();
    const __shared11 *get_GetResult() const;
    void set_GetResult(const __shared11 &);
    __shared11 *release_GetResult();
    void set_GetResult(__shared11 *);

    __shared11 *get_SetResult();
    const __shared11 *get_SetResult() const;
    void set_SetResult(const __shared11 &);
    __shared11 *release_SetResult();
    void set_SetResult(__shared11 *);
private:
    void cleanup_decoded();
};

class OSS_PUBLIC ROSEapdus_ParameterType_Table_ParameterType : public OssConstrainedOpenType
{
public:
    ROSEapdus_ParameterType_Table_ParameterType();
    ROSEapdus_ParameterType_Table_ParameterType(const ROSEapdus_ParameterType_Table_ParameterType &);
    ~ROSEapdus_ParameterType_Table_ParameterType();
    ROSEapdus_ParameterType_Table_ParameterType & operator = (const ROSEapdus_ParameterType_Table_ParameterType &);
    int operator == (const ROSEapdus_ParameterType_Table_ParameterType &) const;
    int operator != (const ROSEapdus_ParameterType_Table_ParameterType &) const;
    int set_decoded(PDU &);
    int grab_decoded(PDU &);
    int set_encoded(const EncodedBuffer &);
    int grab_encoded(EncodedBuffer &);
    int encode(OssControl &);

    BaseManagedObjectId *get_BaseManagedObjectId();
    const BaseManagedObjectId *get_BaseManagedObjectId() const;
    void set_BaseManagedObjectId(const BaseManagedObjectId &);
    BaseManagedObjectId *release_BaseManagedObjectId();
    void set_BaseManagedObjectId(BaseManagedObjectId *);

    ComplexityLimitation *get_ComplexityLimitation();
    const ComplexityLimitation *get_ComplexityLimitation() const;
    void set_ComplexityLimitation(const ComplexityLimitation &);
    ComplexityLimitation *release_ComplexityLimitation();
    void set_ComplexityLimitation(ComplexityLimitation *);

    Scope *get_Scope();
    const Scope *get_Scope() const;
    void set_Scope(const Scope &);
    Scope *release_Scope();
    void set_Scope(Scope *);

    InvalidArgumentValue *get_InvalidArgumentValue();
    const InvalidArgumentValue *get_InvalidArgumentValue() const;
    void set_InvalidArgumentValue(const InvalidArgumentValue &);
    InvalidArgumentValue *release_InvalidArgumentValue();
    void set_InvalidArgumentValue(InvalidArgumentValue *);

    CMISFilter *get_CMISFilter();
    const CMISFilter *get_CMISFilter() const;
    void set_CMISFilter(const CMISFilter &);
    CMISFilter *release_CMISFilter();
    void set_CMISFilter(CMISFilter *);

    NoSuchAction *get_NoSuchAction();
    const NoSuchAction *get_NoSuchAction() const;
    void set_NoSuchAction(const NoSuchAction &);
    NoSuchAction *release_NoSuchAction();
    void set_NoSuchAction(NoSuchAction *);

    NoSuchArgument *get_NoSuchArgument();
    const NoSuchArgument *get_NoSuchArgument() const;
    void set_NoSuchArgument(const NoSuchArgument &);
    NoSuchArgument *release_NoSuchArgument();
    void set_NoSuchArgument(NoSuchArgument *);

    __shared3 *get_ObjectClass();
    const __shared3 *get_ObjectClass() const;
    void set_ObjectClass(const __shared3 &);
    __shared3 *release_ObjectClass();
    void set_ObjectClass(__shared3 *);

    ObjectInstance *get_ObjectInstance();
    const ObjectInstance *get_ObjectInstance() const;
    void set_ObjectInstance(const ObjectInstance &);
    ObjectInstance *release_ObjectInstance();
    void set_ObjectInstance(ObjectInstance *);

    ProcessingFailure *get_ProcessingFailure();
    const ProcessingFailure *get_ProcessingFailure() const;
    void set_ProcessingFailure(const ProcessingFailure &);
    ProcessingFailure *release_ProcessingFailure();
    void set_ProcessingFailure(ProcessingFailure *);

    CMISSync *get_CMISSync();
    const CMISSync *get_CMISSync() const;
    void set_CMISSync(const CMISSync &);
    CMISSync *release_CMISSync();
    void set_CMISSync(CMISSync *);

    __shared12 *get_InvokeIDType();
    const __shared12 *get_InvokeIDType() const;
    void set_InvokeIDType(const __shared12 &);
    __shared12 *release_InvokeIDType();
    void set_InvokeIDType(__shared12 *);

    Attribute *get_Attribute();
    const Attribute *get_Attribute() const;
    void set_Attribute(const Attribute &);
    Attribute *release_Attribute();
    void set_Attribute(Attribute *);

    __shared9 *get_MissingAttributeValue_PARAMETER();
    const __shared9 *get_MissingAttributeValue_PARAMETER() const;
    void set_MissingAttributeValue_PARAMETER(const __shared9 &);
    __shared9 *release_MissingAttributeValue_PARAMETER();
    void set_MissingAttributeValue_PARAMETER(__shared9 *);

    __shared3 *get_AttributeId();
    const __shared3 *get_AttributeId() const;
    void set_AttributeId(const __shared3 &);
    __shared3 *release_AttributeId();
    void set_AttributeId(__shared3 *);

    NoSuchEventType *get_NoSuchEventType();
    const NoSuchEventType *get_NoSuchEventType() const;
    void set_NoSuchEventType(const NoSuchEventType &);
    NoSuchEventType *release_NoSuchEventType();
    void set_NoSuchEventType(NoSuchEventType *);

    GetListError *get_GetListError();
    const GetListError *get_GetListError() const;
    void set_GetListError(const GetListError &);
    GetListError *release_GetListError();
    void set_GetListError(GetListError *);

    SetListError *get_SetListError();
    const SetListError *get_SetListError() const;
    void set_SetListError(const SetListError &);
    SetListError *release_SetListError();
    void set_SetListError(SetListError *);
private:
    void cleanup_decoded();
};

class OSS_PUBLIC __seq6   /* SEQUENCE */
{
public:
    void * operator new(size_t size);
    void operator delete(void *ptr);

    typedef __shared12 invokeId;
    typedef __shared12 linkedId;
    typedef Code opcode;
    typedef CMIP_Operations_ArgumentType argument;

    __seq6();
    __seq6(const __seq6 &);
    __seq6(const invokeId &, const linkedId &, const opcode &, const argument &);
    __seq6(const invokeId &, const opcode &);

    __seq6 & operator = (const __seq6 &);
    int operator == (const __seq6 &) const;
    int operator != (const __seq6 &) const;

    invokeId & get_invokeId();
    const invokeId & get_invokeId() const;
    void set_invokeId(const invokeId &);

    linkedId *get_linkedId();
    const linkedId *get_linkedId() const;
    void set_linkedId(const linkedId &);
    int linkedId_is_present() const;
    void omit_linkedId();

    opcode & get_opcode();
    const opcode & get_opcode() const;
    void set_opcode(const opcode &);

    argument *get_argument();
    const argument *get_argument() const;
    void set_argument(const argument &);
    int argument_is_present() const;
    void omit_argument();
private:
    OSS_UINT32 bit_mask;
    invokeId invokeId_field;
    linkedId linkedId_field;
    opcode opcode_field;
    argument argument_field;
};

class OSS_PUBLIC __seq5   /* SEQUENCE */
{
public:
    void * operator new(size_t size);
    void operator delete(void *ptr);

    typedef Code opcode;
    typedef CMIP_Confirmed_Operations_ResultType result;

    __seq5();
    __seq5(const __seq5 &);
    __seq5(const opcode &, const result &);

    __seq5 & operator = (const __seq5 &);
    int operator == (const __seq5 &) const;
    int operator != (const __seq5 &) const;

    opcode & get_opcode();
    const opcode & get_opcode() const;
    void set_opcode(const opcode &);

    result & get_result();
    const result & get_result() const;
    void set_result(const result &);
private:
    opcode opcode_field;
    result result_field;
};

class OSS_PUBLIC __seq7   /* SEQUENCE */
{
public:
    void * operator new(size_t size);
    void operator delete(void *ptr);

    typedef __shared12 invokeId;
    typedef __seq5 result;

    __seq7();
    __seq7(const __seq7 &);
    __seq7(const invokeId &, const result &);
    __seq7(const invokeId &);

    __seq7 & operator = (const __seq7 &);
    int operator == (const __seq7 &) const;
    int operator != (const __seq7 &) const;

    invokeId & get_invokeId();
    const invokeId & get_invokeId() const;
    void set_invokeId(const invokeId &);

    result *get_result();
    const result *get_result() const;
    void set_result(const result &);
    int result_is_present() const;
    void omit_result();
private:
    OSS_UINT32 bit_mask;
    invokeId invokeId_field;
    result result_field;
};

class OSS_PUBLIC __seq8   /* SEQUENCE */
{
public:
    void * operator new(size_t size);
    void operator delete(void *ptr);

    typedef __shared12 invokeId;
    typedef Code errcode;
    typedef ROSEapdus_ParameterType_Table_ParameterType parameter;

    __seq8();
    __seq8(const __seq8 &);
    __seq8(const invokeId &, const errcode &, const parameter &);
    __seq8(const invokeId &, const errcode &);

    __seq8 & operator = (const __seq8 &);
    int operator == (const __seq8 &) const;
    int operator != (const __seq8 &) const;

    invokeId & get_invokeId();
    const invokeId & get_invokeId() const;
    void set_invokeId(const invokeId &);

    errcode & get_errcode();
    const errcode & get_errcode() const;
    void set_errcode(const errcode &);

    parameter *get_parameter();
    const parameter *get_parameter() const;
    void set_parameter(const parameter &);
    int parameter_is_present() const;
    void omit_parameter();
private:
    OSS_UINT32 bit_mask;
    invokeId invokeId_field;
    errcode errcode_field;
    parameter parameter_field;
};

class OSS_PUBLIC __choice6  : public OssChoice   /* CHOICE */
{
public:
    enum Id {
	unselected,
	general_chosen = 1,
	invoke_chosen = 2,
	returnResult_chosen = 3,
	returnError_chosen = 4
    };
    typedef OSS_INT32 general;
    typedef OSS_INT32 invoke;
    typedef OSS_INT32 returnResult;
    typedef OSS_INT32 returnError;

    __choice6();
    __choice6(const __choice6 &);

    __choice6 & operator = (const __choice6 &);
    int operator == (const __choice6 &) const;
    int operator != (const __choice6 &) const;

    general *get_general();
    const general *get_general() const;
    void set_general(general);

    invoke *get_invoke();
    const invoke *get_invoke() const;
    void set_invoke(invoke);

    returnResult *get_returnResult();
    const returnResult *get_returnResult() const;
    void set_returnResult(returnResult);

    returnError *get_returnError();
    const returnError *get_returnError() const;
    void set_returnError(returnError);
private:
    union {
	general general_field;
	invoke invoke_field;
	returnResult returnResult_field;
	returnError returnError_field;
    };
};

class OSS_PUBLIC __shared13   /* SEQUENCE */
{
public:
    void * operator new(size_t size);
    void operator delete(void *ptr);

    typedef __shared12 invokeId;
    typedef __choice6 problem;

    __shared13();
    __shared13(const __shared13 &);
    __shared13(const invokeId &, const problem &);

    __shared13 & operator = (const __shared13 &);
    int operator == (const __shared13 &) const;
    int operator != (const __shared13 &) const;

    invokeId & get_invokeId();
    const invokeId & get_invokeId() const;
    void set_invokeId(const invokeId &);

    problem & get_problem();
    const problem & get_problem() const;
    void set_problem(const problem &);
private:
    invokeId invokeId_field;
    problem problem_field;
};

typedef __shared13 Reject;

class OSS_PUBLIC ROSEapdus  : public OssChoice   /* CHOICE */
{
public:
    enum Id {
	unselected,
	invoke_chosen = 1,
	returnResult_chosen = 2,
	returnError_chosen = 3,
	reject_chosen = 4
    };
    typedef __seq6 invoke;
    typedef __seq7 returnResult;
    typedef __seq8 returnError;
    typedef __shared13 reject;

    ROSEapdus();
    ROSEapdus(const ROSEapdus &);
    ~ROSEapdus();

    ROSEapdus & operator = (const ROSEapdus &);
    int operator == (const ROSEapdus &) const;
    int operator != (const ROSEapdus &) const;

    invoke *get_invoke();
    const invoke *get_invoke() const;
    void set_invoke(const invoke &);

    returnResult *get_returnResult();
    const returnResult *get_returnResult() const;
    void set_returnResult(const returnResult &);

    returnError *get_returnError();
    const returnError *get_returnError() const;
    void set_returnError(const returnError &);

    reject *get_reject();
    const reject *get_reject() const;
    void set_reject(const reject &);
private:
    union {
	invoke *invoke_field;
	returnResult *returnResult_field;
	returnError *returnError_field;
	reject *reject_field;
    };
    void cleanup();
};

class OSS_PUBLIC CMIPAbortInfo   /* SEQUENCE */
{
public:
    void * operator new(size_t size);
    void operator delete(void *ptr);

    typedef enum CMIPAbortSource abortSource;
    typedef __shared2 userInfo;

    CMIPAbortInfo();
    CMIPAbortInfo(const CMIPAbortInfo &);
    CMIPAbortInfo(abortSource, const userInfo &);
    CMIPAbortInfo(abortSource);

    CMIPAbortInfo & operator = (const CMIPAbortInfo &);
    int operator == (const CMIPAbortInfo &) const;
    int operator != (const CMIPAbortInfo &) const;

    abortSource & get_abortSource();
    abortSource get_abortSource() const;
    void set_abortSource(abortSource);

    userInfo *get_userInfo();
    const userInfo *get_userInfo() const;
    void set_userInfo(const userInfo &);
    int userInfo_is_present() const;
    void omit_userInfo();
private:
    OSS_UINT32 bit_mask;
    abortSource abortSource_field;
    userInfo userInfo_field;
};

class OSS_PUBLIC CMIPUserInfo   /* SEQUENCE */
{
public:
    void * operator new(size_t size);
    void operator delete(void *ptr);

    typedef OssBitString protocolVersion;
    typedef OssBitString functionalUnits;
    typedef __shared2 accessControl;
    typedef __shared2 userInfo;

    static const protocolVersion & default_protocolVersion;
    static const functionalUnits & default_functionalUnits;

    static const protocolVersion& get_default_protocolVersion();
    static const functionalUnits& get_default_functionalUnits();

    CMIPUserInfo();
    CMIPUserInfo(const CMIPUserInfo &);
    CMIPUserInfo(const protocolVersion &, const functionalUnits &, const accessControl &, 
	const userInfo &);
    ~CMIPUserInfo();

    CMIPUserInfo & operator = (const CMIPUserInfo &);
    int operator == (const CMIPUserInfo &) const;
    int operator != (const CMIPUserInfo &) const;

    protocolVersion *get_protocolVersion();
    const protocolVersion *get_protocolVersion() const;
    void set_protocolVersion(const protocolVersion &);
    int protocolVersion_is_default() const;
    void set_default_protocolVersion();

    functionalUnits *get_functionalUnits();
    const functionalUnits *get_functionalUnits() const;
    void set_functionalUnits(const functionalUnits &);
    int functionalUnits_is_default() const;
    void set_default_functionalUnits();

    accessControl *get_accessControl();
    const accessControl *get_accessControl() const;
    void set_accessControl(const accessControl &);
    int accessControl_is_present() const;
    void omit_accessControl();

    userInfo *get_userInfo();
    const userInfo *get_userInfo() const;
    void set_userInfo(const userInfo &);
    int userInfo_is_present() const;
    void omit_userInfo();
private:
    OSS_UINT32 bit_mask;
    protocolVersion protocolVersion_field;
    functionalUnits functionalUnits_field;
    accessControl accessControl_field;
    userInfo userInfo_field;
};

class OSS_PUBLIC __shared14 : public OssList  /* SET OF */
{
public:
    typedef OSS_INT32 component;

    __shared14();
    __shared14(const __shared14 &);
    ~__shared14();

    __shared14 & operator = (const __shared14 &);
    int operator == (const __shared14 &) const;
    int operator != (const __shared14 &) const;

    component *at(OssIndex);
    const component *at(OssIndex) const;

    OssIndex prepend(component );
    OssIndex prepend(__shared14 *);
    OssIndex insert_after(OssIndex, component );
    OssIndex insert_after(OssIndex, __shared14 *);

    int remove_front();
    int remove_after(OssIndex);

    __shared14 *extract_after(OssIndex, OssIndex);
};

typedef __shared14 InvokeldsOutstanding;

typedef __shared14 InvokeIdsPerforming;

typedef OssEncOID FunctionalUnitPackageId;

class OSS_PUBLIC FunctionalUnitPackage   /* SEQUENCE */
{
public:
    void * operator new(size_t size);
    void operator delete(void *ptr);

    typedef OssEncOID functionalUnitPackageId;
    typedef OssBitString managerRoleFunctionalUnit;
    typedef OssBitString agentRoleFunctionalUnit;

    static const managerRoleFunctionalUnit & default_managerRoleFunctionalUnit;
    static const agentRoleFunctionalUnit & default_agentRoleFunctionalUnit;

    static const managerRoleFunctionalUnit& get_default_managerRoleFunctionalUnit();
    static const agentRoleFunctionalUnit& get_default_agentRoleFunctionalUnit();

    FunctionalUnitPackage();
    FunctionalUnitPackage(const FunctionalUnitPackage &);
    FunctionalUnitPackage(const functionalUnitPackageId &, const managerRoleFunctionalUnit &, 
	const agentRoleFunctionalUnit &);
    FunctionalUnitPackage(const functionalUnitPackageId &);
    ~FunctionalUnitPackage();

    FunctionalUnitPackage & operator = (const FunctionalUnitPackage &);
    int operator == (const FunctionalUnitPackage &) const;
    int operator != (const FunctionalUnitPackage &) const;

    functionalUnitPackageId & get_functionalUnitPackageId();
    const functionalUnitPackageId & get_functionalUnitPackageId() const;
    void set_functionalUnitPackageId(const functionalUnitPackageId &);

    managerRoleFunctionalUnit *get_managerRoleFunctionalUnit();
    const managerRoleFunctionalUnit *get_managerRoleFunctionalUnit() const;
    void set_managerRoleFunctionalUnit(const managerRoleFunctionalUnit &);
    int managerRoleFunctionalUnit_is_default() const;
    void set_default_managerRoleFunctionalUnit();

    agentRoleFunctionalUnit *get_agentRoleFunctionalUnit();
    const agentRoleFunctionalUnit *get_agentRoleFunctionalUnit() const;
    void set_agentRoleFunctionalUnit(const agentRoleFunctionalUnit &);
    int agentRoleFunctionalUnit_is_default() const;
    void set_default_agentRoleFunctionalUnit();
private:
    OSS_UINT32 bit_mask;
    functionalUnitPackageId functionalUnitPackageId_field;
    managerRoleFunctionalUnit managerRoleFunctionalUnit_field;
    agentRoleFunctionalUnit agentRoleFunctionalUnit_field;
};

class OSS_PUBLIC __shared15 : public OssList  /* SET OF */
{
public:
    typedef FunctionalUnitPackage component;

    __shared15();
    __shared15(const __shared15 &);
    ~__shared15();

    __shared15 & operator = (const __shared15 &);
    int operator == (const __shared15 &) const;
    int operator != (const __shared15 &) const;

    component *at(OssIndex);
    const component *at(OssIndex) const;

    OssIndex prepend(const component & );
    OssIndex prepend(__shared15 *);
    OssIndex insert_after(OssIndex, const component & );
    OssIndex insert_after(OssIndex, __shared15 *);

    int remove_front();
    int remove_after(OssIndex);

    __shared15 *extract_after(OssIndex, OssIndex);
};

typedef __shared15 SmaseFunctionalUnits;

class OSS_PUBLIC SmUserInfoSent  : public OssChoice   /* CHOICE */
{
public:
    enum Id {
	unselected,
	nothingSent_chosen = 1,
	informationSent_chosen = 2
    };
    typedef Nulltype nothingSent;
    typedef OssString informationSent;

    SmUserInfoSent();
    SmUserInfoSent(const SmUserInfoSent &);
    ~SmUserInfoSent();

    SmUserInfoSent & operator = (const SmUserInfoSent &);
    int operator == (const SmUserInfoSent &) const;
    int operator != (const SmUserInfoSent &) const;

    nothingSent *get_nothingSent();
    const nothingSent *get_nothingSent() const;
    void set_nothingSent(nothingSent);

    informationSent *get_informationSent();
    const informationSent *get_informationSent() const;
    void set_informationSent(const informationSent &);
private:
    union {
	nothingSent nothingSent_field;
	OSSC::COssString informationSent_field;
    };
    void cleanup();
};

class OSS_PUBLIC SmUserInfoReceived  : public OssChoice   /* CHOICE */
{
public:
    enum Id {
	unselected,
	nothingReceived_chosen = 1,
	informationReceived_chosen = 2
    };
    typedef Nulltype nothingReceived;
    typedef OssString informationReceived;

    SmUserInfoReceived();
    SmUserInfoReceived(const SmUserInfoReceived &);
    ~SmUserInfoReceived();

    SmUserInfoReceived & operator = (const SmUserInfoReceived &);
    int operator == (const SmUserInfoReceived &) const;
    int operator != (const SmUserInfoReceived &) const;

    nothingReceived *get_nothingReceived();
    const nothingReceived *get_nothingReceived() const;
    void set_nothingReceived(nothingReceived);

    informationReceived *get_informationReceived();
    const informationReceived *get_informationReceived() const;
    void set_informationReceived(const informationReceived &);
private:
    union {
	nothingReceived nothingReceived_field;
	OSSC::COssString informationReceived_field;
    };
    void cleanup();
};

typedef OSS_INT32 RTTPapdu;

typedef OssString RTTRapdu;

typedef OSS_INT32 AbortReason;

class OSS_PUBLIC RTABapdu   /* SET */
{
public:
    void * operator new(size_t size);
    void operator delete(void *ptr);

    typedef OSS_INT32 abortReason;
    typedef OssBitString reflectedParameter;
    typedef OssOpen userdataAB;

    RTABapdu();
    RTABapdu(const RTABapdu &);
    RTABapdu(abortReason, const reflectedParameter &, const userdataAB &);

    RTABapdu & operator = (const RTABapdu &);
    int operator == (const RTABapdu &) const;
    int operator != (const RTABapdu &) const;

    abortReason *get_abortReason();
    const abortReason *get_abortReason() const;
    void set_abortReason(abortReason);
    int abortReason_is_present() const;
    void omit_abortReason();

    reflectedParameter *get_reflectedParameter();
    const reflectedParameter *get_reflectedParameter() const;
    void set_reflectedParameter(const reflectedParameter &);
    int reflectedParameter_is_present() const;
    void omit_reflectedParameter();

    userdataAB *get_userdataAB();
    const userdataAB *get_userdataAB() const;
    void set_userdataAB(const userdataAB &);
    int userdataAB_is_present() const;
    void omit_userdataAB();
private:
    OSS_UINT32 bit_mask;
    abortReason abortReason_field;
    reflectedParameter reflectedParameter_field;
    userdataAB userdataAB_field;
};

typedef __shared12 ROSEInvokeIds;

typedef OSS_INT32 GeneralProblem;

typedef OSS_INT32 InvokeProblem;

typedef OSS_INT32 ReturnResultProblem;

typedef OSS_INT32 ReturnErrorProblem;

typedef __shared12 NoInvokeId;

typedef OSS_INT32 Reason;

class OSS_PUBLIC SMASEUserData   /* SEQUENCE */
{
public:
    void * operator new(size_t size);
    void operator delete(void *ptr);

    typedef __shared15 smfuPackages;
    typedef OSS_INT32 reason;
    typedef OssString systemsManagementUserInformation;

    SMASEUserData();
    SMASEUserData(const SMASEUserData &);
    SMASEUserData(const smfuPackages &, reason, const systemsManagementUserInformation &);

    SMASEUserData & operator = (const SMASEUserData &);
    int operator == (const SMASEUserData &) const;
    int operator != (const SMASEUserData &) const;

    smfuPackages *get_smfuPackages();
    const smfuPackages *get_smfuPackages() const;
    void set_smfuPackages(const smfuPackages &);
    int smfuPackages_is_present() const;
    void omit_smfuPackages();

    reason *get_reason();
    const reason *get_reason() const;
    void set_reason(reason);
    int reason_is_present() const;
    void omit_reason();

    systemsManagementUserInformation *get_systemsManagementUserInformation();
    const systemsManagementUserInformation *get_systemsManagementUserInformation() const;
    void set_systemsManagementUserInformation(const systemsManagementUserInformation &);
    int systemsManagementUserInformation_is_present() const;
    void omit_systemsManagementUserInformation();
private:
    OSS_UINT32 bit_mask;
    smfuPackages smfuPackages_field;
    reason reason_field;
    systemsManagementUserInformation systemsManagementUserInformation_field;
};

/* Universal PDU class */

class OSS_PUBLIC SMASE_A_ASSOCIATE_Information_PDU : public UniversalPDU {
public:
    SMASE_A_ASSOCIATE_Information_PDU();
    void set_ActionArgument(ActionArgument &);
    ActionArgument *get_ActionArgument() const;
    void set_ActionResult(ActionResult &);
    ActionResult *get_ActionResult() const;
    void set_Attribute(Attribute &);
    Attribute *get_Attribute() const;
    void set_AttributeId(AttributeId &);
    AttributeId *get_AttributeId() const;
    void set_BaseManagedObjectId(BaseManagedObjectId &);
    BaseManagedObjectId *get_BaseManagedObjectId() const;
    void set_CMISFilter(CMISFilter &);
    CMISFilter *get_CMISFilter() const;
    void set_CMISSync(CMISSync &);
    CMISSync *get_CMISSync() const;
    void set_ComplexityLimitation(ComplexityLimitation &);
    ComplexityLimitation *get_ComplexityLimitation() const;
    void set_CreateArgument(CreateArgument &);
    CreateArgument *get_CreateArgument() const;
    void set_CreateResult(CreateResult &);
    CreateResult *get_CreateResult() const;
    void set_DeleteArgument(DeleteArgument &);
    DeleteArgument *get_DeleteArgument() const;
    void set_DeleteResult(DeleteResult &);
    DeleteResult *get_DeleteResult() const;
    void set_EventReportArgument(EventReportArgument &);
    EventReportArgument *get_EventReportArgument() const;
    void set_EventReportResult(EventReportResult &);
    EventReportResult *get_EventReportResult() const;
    void set_GetArgument(GetArgument &);
    GetArgument *get_GetArgument() const;
    void set_GetListError(GetListError &);
    GetListError *get_GetListError() const;
    void set_GetResult(GetResult &);
    GetResult *get_GetResult() const;
    void set_InvalidArgumentValue(InvalidArgumentValue &);
    InvalidArgumentValue *get_InvalidArgumentValue() const;
    void set_InvokeIDType(InvokeIDType &);
    InvokeIDType *get_InvokeIDType() const;
    void set_LinkedReplyArgument(LinkedReplyArgument &);
    LinkedReplyArgument *get_LinkedReplyArgument() const;
    void set_NoSuchAction(NoSuchAction &);
    NoSuchAction *get_NoSuchAction() const;
    void set_NoSuchArgument(NoSuchArgument &);
    NoSuchArgument *get_NoSuchArgument() const;
    void set_NoSuchEventType(NoSuchEventType &);
    NoSuchEventType *get_NoSuchEventType() const;
    void set_ObjectClass(ObjectClass &);
    ObjectClass *get_ObjectClass() const;
    void set_ObjectInstance(ObjectInstance &);
    ObjectInstance *get_ObjectInstance() const;
    void set_ProcessingFailure(ProcessingFailure &);
    ProcessingFailure *get_ProcessingFailure() const;
    void set_Scope(Scope &);
    Scope *get_Scope() const;
    void set_SetArgument(SetArgument &);
    SetArgument *get_SetArgument() const;
    void set_SetListError(SetListError &);
    SetListError *get_SetListError() const;
    void set_SetResult(SetResult &);
    SetResult *get_SetResult() const;
    void set_ROSEapdus(ROSEapdus &);
    ROSEapdus *get_ROSEapdus() const;
    void set_CMIPAbortInfo(CMIPAbortInfo &);
    CMIPAbortInfo *get_CMIPAbortInfo() const;
    void set_CMIPUserInfo(CMIPUserInfo &);
    CMIPUserInfo *get_CMIPUserInfo() const;
    void set_CmipPduReceivingSupport(CmipPduReceivingSupport &);
    CmipPduReceivingSupport *get_CmipPduReceivingSupport() const;
    void set_CmipPduSendingSupport(CmipPduSendingSupport &);
    CmipPduSendingSupport *get_CmipPduSendingSupport() const;
    void set_CmiseFunctionalUnitsSelected(CmiseFunctionalUnitsSelected &);
    CmiseFunctionalUnitsSelected *get_CmiseFunctionalUnitsSelected() const;
    void set_CmiseFunctionalUnitsSupported(CmiseFunctionalUnitsSupported &);
    CmiseFunctionalUnitsSupported *get_CmiseFunctionalUnitsSupported() const;
    void set_InvokeldsOutstanding(InvokeldsOutstanding &);
    InvokeldsOutstanding *get_InvokeldsOutstanding() const;
    void set_InvokeIdsPerforming(InvokeIdsPerforming &);
    InvokeIdsPerforming *get_InvokeIdsPerforming() const;
    void set_MaxEncodedCmipPduReceiveSize(MaxEncodedCmipPduReceiveSize &);
    MaxEncodedCmipPduReceiveSize *get_MaxEncodedCmipPduReceiveSize() const;
    void set_ProtocolVersionSupported(ProtocolVersionSupported &);
    ProtocolVersionSupported *get_ProtocolVersionSupported() const;
    void set_SmaseFunctionalUnits(SmaseFunctionalUnits &);
    SmaseFunctionalUnits *get_SmaseFunctionalUnits() const;
    void set_SmUserInfoSent(SmUserInfoSent &);
    SmUserInfoSent *get_SmUserInfoSent() const;
    void set_SmUserInfoReceived(SmUserInfoReceived &);
    SmUserInfoReceived *get_SmUserInfoReceived() const;
    void set_ROSEInvokeIds(ROSEInvokeIds &);
    ROSEInvokeIds *get_ROSEInvokeIds() const;
    void set_NoInvokeId(NoInvokeId &);
    NoInvokeId *get_NoInvokeId() const;
    void set_SMASEUserData(SMASEUserData &);
    SMASEUserData *get_SMASEUserData() const;
    void set_AccessDenied_PRIORITY(AccessDenied_PRIORITY &);
    AccessDenied_PRIORITY *get_AccessDenied_PRIORITY() const;
    void set_ClassInstanceConflict_PRIORITY(ClassInstanceConflict_PRIORITY &);
    ClassInstanceConflict_PRIORITY *get_ClassInstanceConflict_PRIORITY() const;
    void set_ComplexityLimitation_PRIORITY(ComplexityLimitation_PRIORITY &);
    ComplexityLimitation_PRIORITY *get_ComplexityLimitation_PRIORITY() const;
    void set_InvalidScope_PRIORITY(InvalidScope_PRIORITY &);
    InvalidScope_PRIORITY *get_InvalidScope_PRIORITY() const;
    void set_InvalidArgumentValue_PRIORITY(InvalidArgumentValue_PRIORITY &);
    InvalidArgumentValue_PRIORITY *get_InvalidArgumentValue_PRIORITY() const;
    void set_InvalidFilter_PRIORITY(InvalidFilter_PRIORITY &);
    InvalidFilter_PRIORITY *get_InvalidFilter_PRIORITY() const;
    void set_NoSuchAction_PRIORITY(NoSuchAction_PRIORITY &);
    NoSuchAction_PRIORITY *get_NoSuchAction_PRIORITY() const;
    void set_NoSuchArgument_PRIORITY(NoSuchArgument_PRIORITY &);
    NoSuchArgument_PRIORITY *get_NoSuchArgument_PRIORITY() const;
    void set_NoSuchObjectClass_PRIORITY(NoSuchObjectClass_PRIORITY &);
    NoSuchObjectClass_PRIORITY *get_NoSuchObjectClass_PRIORITY() const;
    void set_NoSuchObjectInstance_PRIORITY(NoSuchObjectInstance_PRIORITY &);
    NoSuchObjectInstance_PRIORITY *get_NoSuchObjectInstance_PRIORITY() const;
    void set_ProcessingFailure_PRIORITY(ProcessingFailure_PRIORITY &);
    ProcessingFailure_PRIORITY *get_ProcessingFailure_PRIORITY() const;
    void set_SyncNotSupported_PRIORITY(SyncNotSupported_PRIORITY &);
    SyncNotSupported_PRIORITY *get_SyncNotSupported_PRIORITY() const;
    void set_MistypedOperation_PRIORITY(MistypedOperation_PRIORITY &);
    MistypedOperation_PRIORITY *get_MistypedOperation_PRIORITY() const;
    void set_NoSuchInvokeId_PRIORITY(NoSuchInvokeId_PRIORITY &);
    NoSuchInvokeId_PRIORITY *get_NoSuchInvokeId_PRIORITY() const;
    void set_DuplicateManagedObjectInstance_PRIORITY(DuplicateManagedObjectInstance_PRIORITY &);
    DuplicateManagedObjectInstance_PRIORITY *get_DuplicateManagedObjectInstance_PRIORITY() const;
    void set_InvalidAttributeValue_PRIORITY(InvalidAttributeValue_PRIORITY &);
    InvalidAttributeValue_PRIORITY *get_InvalidAttributeValue_PRIORITY() const;
    void set_InvalidObjectInstance_PRIORITY(InvalidObjectInstance_PRIORITY &);
    InvalidObjectInstance_PRIORITY *get_InvalidObjectInstance_PRIORITY() const;
    void set_MissingAttributeValue_PARAMETER(MissingAttributeValue_PARAMETER &);
    MissingAttributeValue_PARAMETER *get_MissingAttributeValue_PARAMETER() const;
    void set_MissingAttributeValue_PRIORITY(MissingAttributeValue_PRIORITY &);
    MissingAttributeValue_PRIORITY *get_MissingAttributeValue_PRIORITY() const;
    void set_NoSuchAttribute_PRIORITY(NoSuchAttribute_PRIORITY &);
    NoSuchAttribute_PRIORITY *get_NoSuchAttribute_PRIORITY() const;
    void set_NoSuchReferenceObject_PRIORITY(NoSuchReferenceObject_PRIORITY &);
    NoSuchReferenceObject_PRIORITY *get_NoSuchReferenceObject_PRIORITY() const;
    void set_NoSuchEventType_PRIORITY(NoSuchEventType_PRIORITY &);
    NoSuchEventType_PRIORITY *get_NoSuchEventType_PRIORITY() const;
    void set_GetListError_PRIORITY(GetListError_PRIORITY &);
    GetListError_PRIORITY *get_GetListError_PRIORITY() const;
    void set_OperationCancelled_PRIORITY(OperationCancelled_PRIORITY &);
    OperationCancelled_PRIORITY *get_OperationCancelled_PRIORITY() const;
    void set_SetListError_PRIORITY(SetListError_PRIORITY &);
    SetListError_PRIORITY *get_SetListError_PRIORITY() const;
    void set_Acse_RealizationParameter(Acse_RealizationParameter &);
    Acse_RealizationParameter *get_Acse_RealizationParameter() const;
    void set_Acse_with_concatenation_RealizationParameter(Acse_with_concatenation_RealizationParameter &);
    Acse_with_concatenation_RealizationParameter *get_Acse_with_concatenation_RealizationParameter() const;
    void set_Association_by_RTSE_RealizationParameter(Association_by_RTSE_RealizationParameter &);
    Association_by_RTSE_RealizationParameter *get_Association_by_RTSE_RealizationParameter() const;
    void set_PData_RealizationParameter(PData_RealizationParameter &);
    PData_RealizationParameter *get_PData_RealizationParameter() const;
    void set_PData_with_concatenation_RealizationParameter(PData_with_concatenation_RealizationParameter &);
    PData_with_concatenation_RealizationParameter *get_PData_with_concatenation_RealizationParameter() const;
    void set_Transfer_by_RTSE_RealizationParameter(Transfer_by_RTSE_RealizationParameter &);
    Transfer_by_RTSE_RealizationParameter *get_Transfer_by_RTSE_RealizationParameter() const;
#ifdef OSS_PREALLOCATED_BUFFER_DECODE_SUPPORTED
    void set_const_ActionArgument(const ActionArgument &);
    const ActionArgument *get_const_ActionArgument() const;
    void set_const_ActionResult(const ActionResult &);
    const ActionResult *get_const_ActionResult() const;
    void set_const_Attribute(const Attribute &);
    const Attribute *get_const_Attribute() const;
    void set_const_AttributeId(const AttributeId &);
    const AttributeId *get_const_AttributeId() const;
    void set_const_BaseManagedObjectId(const BaseManagedObjectId &);
    const BaseManagedObjectId *get_const_BaseManagedObjectId() const;
    void set_const_CMISFilter(const CMISFilter &);
    const CMISFilter *get_const_CMISFilter() const;
    void set_const_CMISSync(const CMISSync &);
    const CMISSync *get_const_CMISSync() const;
    void set_const_ComplexityLimitation(const ComplexityLimitation &);
    const ComplexityLimitation *get_const_ComplexityLimitation() const;
    void set_const_CreateArgument(const CreateArgument &);
    const CreateArgument *get_const_CreateArgument() const;
    void set_const_CreateResult(const CreateResult &);
    const CreateResult *get_const_CreateResult() const;
    void set_const_DeleteArgument(const DeleteArgument &);
    const DeleteArgument *get_const_DeleteArgument() const;
    void set_const_DeleteResult(const DeleteResult &);
    const DeleteResult *get_const_DeleteResult() const;
    void set_const_EventReportArgument(const EventReportArgument &);
    const EventReportArgument *get_const_EventReportArgument() const;
    void set_const_EventReportResult(const EventReportResult &);
    const EventReportResult *get_const_EventReportResult() const;
    void set_const_GetArgument(const GetArgument &);
    const GetArgument *get_const_GetArgument() const;
    void set_const_GetListError(const GetListError &);
    const GetListError *get_const_GetListError() const;
    void set_const_GetResult(const GetResult &);
    const GetResult *get_const_GetResult() const;
    void set_const_InvalidArgumentValue(const InvalidArgumentValue &);
    const InvalidArgumentValue *get_const_InvalidArgumentValue() const;
    void set_const_InvokeIDType(const InvokeIDType &);
    const InvokeIDType *get_const_InvokeIDType() const;
    void set_const_LinkedReplyArgument(const LinkedReplyArgument &);
    const LinkedReplyArgument *get_const_LinkedReplyArgument() const;
    void set_const_NoSuchAction(const NoSuchAction &);
    const NoSuchAction *get_const_NoSuchAction() const;
    void set_const_NoSuchArgument(const NoSuchArgument &);
    const NoSuchArgument *get_const_NoSuchArgument() const;
    void set_const_NoSuchEventType(const NoSuchEventType &);
    const NoSuchEventType *get_const_NoSuchEventType() const;
    void set_const_ObjectClass(const ObjectClass &);
    const ObjectClass *get_const_ObjectClass() const;
    void set_const_ObjectInstance(const ObjectInstance &);
    const ObjectInstance *get_const_ObjectInstance() const;
    void set_const_ProcessingFailure(const ProcessingFailure &);
    const ProcessingFailure *get_const_ProcessingFailure() const;
    void set_const_Scope(const Scope &);
    const Scope *get_const_Scope() const;
    void set_const_SetArgument(const SetArgument &);
    const SetArgument *get_const_SetArgument() const;
    void set_const_SetListError(const SetListError &);
    const SetListError *get_const_SetListError() const;
    void set_const_SetResult(const SetResult &);
    const SetResult *get_const_SetResult() const;
    void set_const_ROSEapdus(const ROSEapdus &);
    const ROSEapdus *get_const_ROSEapdus() const;
    void set_const_CMIPAbortInfo(const CMIPAbortInfo &);
    const CMIPAbortInfo *get_const_CMIPAbortInfo() const;
    void set_const_CMIPUserInfo(const CMIPUserInfo &);
    const CMIPUserInfo *get_const_CMIPUserInfo() const;
    void set_const_CmipPduReceivingSupport(const CmipPduReceivingSupport &);
    const CmipPduReceivingSupport *get_const_CmipPduReceivingSupport() const;
    void set_const_CmipPduSendingSupport(const CmipPduSendingSupport &);
    const CmipPduSendingSupport *get_const_CmipPduSendingSupport() const;
    void set_const_CmiseFunctionalUnitsSelected(const CmiseFunctionalUnitsSelected &);
    const CmiseFunctionalUnitsSelected *get_const_CmiseFunctionalUnitsSelected() const;
    void set_const_CmiseFunctionalUnitsSupported(const CmiseFunctionalUnitsSupported &);
    const CmiseFunctionalUnitsSupported *get_const_CmiseFunctionalUnitsSupported() const;
    void set_const_InvokeldsOutstanding(const InvokeldsOutstanding &);
    const InvokeldsOutstanding *get_const_InvokeldsOutstanding() const;
    void set_const_InvokeIdsPerforming(const InvokeIdsPerforming &);
    const InvokeIdsPerforming *get_const_InvokeIdsPerforming() const;
    void set_const_MaxEncodedCmipPduReceiveSize(const MaxEncodedCmipPduReceiveSize &);
    const MaxEncodedCmipPduReceiveSize *get_const_MaxEncodedCmipPduReceiveSize() const;
    void set_const_ProtocolVersionSupported(const ProtocolVersionSupported &);
    const ProtocolVersionSupported *get_const_ProtocolVersionSupported() const;
    void set_const_SmaseFunctionalUnits(const SmaseFunctionalUnits &);
    const SmaseFunctionalUnits *get_const_SmaseFunctionalUnits() const;
    void set_const_SmUserInfoSent(const SmUserInfoSent &);
    const SmUserInfoSent *get_const_SmUserInfoSent() const;
    void set_const_SmUserInfoReceived(const SmUserInfoReceived &);
    const SmUserInfoReceived *get_const_SmUserInfoReceived() const;
    void set_const_ROSEInvokeIds(const ROSEInvokeIds &);
    const ROSEInvokeIds *get_const_ROSEInvokeIds() const;
    void set_const_NoInvokeId(const NoInvokeId &);
    const NoInvokeId *get_const_NoInvokeId() const;
    void set_const_SMASEUserData(const SMASEUserData &);
    const SMASEUserData *get_const_SMASEUserData() const;
    void set_const_AccessDenied_PRIORITY(const AccessDenied_PRIORITY &);
    const AccessDenied_PRIORITY *get_const_AccessDenied_PRIORITY() const;
    void set_const_ClassInstanceConflict_PRIORITY(const ClassInstanceConflict_PRIORITY &);
    const ClassInstanceConflict_PRIORITY *get_const_ClassInstanceConflict_PRIORITY() const;
    void set_const_ComplexityLimitation_PRIORITY(const ComplexityLimitation_PRIORITY &);
    const ComplexityLimitation_PRIORITY *get_const_ComplexityLimitation_PRIORITY() const;
    void set_const_InvalidScope_PRIORITY(const InvalidScope_PRIORITY &);
    const InvalidScope_PRIORITY *get_const_InvalidScope_PRIORITY() const;
    void set_const_InvalidArgumentValue_PRIORITY(const InvalidArgumentValue_PRIORITY &);
    const InvalidArgumentValue_PRIORITY *get_const_InvalidArgumentValue_PRIORITY() const;
    void set_const_InvalidFilter_PRIORITY(const InvalidFilter_PRIORITY &);
    const InvalidFilter_PRIORITY *get_const_InvalidFilter_PRIORITY() const;
    void set_const_NoSuchAction_PRIORITY(const NoSuchAction_PRIORITY &);
    const NoSuchAction_PRIORITY *get_const_NoSuchAction_PRIORITY() const;
    void set_const_NoSuchArgument_PRIORITY(const NoSuchArgument_PRIORITY &);
    const NoSuchArgument_PRIORITY *get_const_NoSuchArgument_PRIORITY() const;
    void set_const_NoSuchObjectClass_PRIORITY(const NoSuchObjectClass_PRIORITY &);
    const NoSuchObjectClass_PRIORITY *get_const_NoSuchObjectClass_PRIORITY() const;
    void set_const_NoSuchObjectInstance_PRIORITY(const NoSuchObjectInstance_PRIORITY &);
    const NoSuchObjectInstance_PRIORITY *get_const_NoSuchObjectInstance_PRIORITY() const;
    void set_const_ProcessingFailure_PRIORITY(const ProcessingFailure_PRIORITY &);
    const ProcessingFailure_PRIORITY *get_const_ProcessingFailure_PRIORITY() const;
    void set_const_SyncNotSupported_PRIORITY(const SyncNotSupported_PRIORITY &);
    const SyncNotSupported_PRIORITY *get_const_SyncNotSupported_PRIORITY() const;
    void set_const_MistypedOperation_PRIORITY(const MistypedOperation_PRIORITY &);
    const MistypedOperation_PRIORITY *get_const_MistypedOperation_PRIORITY() const;
    void set_const_NoSuchInvokeId_PRIORITY(const NoSuchInvokeId_PRIORITY &);
    const NoSuchInvokeId_PRIORITY *get_const_NoSuchInvokeId_PRIORITY() const;
    void set_const_DuplicateManagedObjectInstance_PRIORITY(const DuplicateManagedObjectInstance_PRIORITY &);
    const DuplicateManagedObjectInstance_PRIORITY *get_const_DuplicateManagedObjectInstance_PRIORITY() const;
    void set_const_InvalidAttributeValue_PRIORITY(const InvalidAttributeValue_PRIORITY &);
    const InvalidAttributeValue_PRIORITY *get_const_InvalidAttributeValue_PRIORITY() const;
    void set_const_InvalidObjectInstance_PRIORITY(const InvalidObjectInstance_PRIORITY &);
    const InvalidObjectInstance_PRIORITY *get_const_InvalidObjectInstance_PRIORITY() const;
    void set_const_MissingAttributeValue_PARAMETER(const MissingAttributeValue_PARAMETER &);
    const MissingAttributeValue_PARAMETER *get_const_MissingAttributeValue_PARAMETER() const;
    void set_const_MissingAttributeValue_PRIORITY(const MissingAttributeValue_PRIORITY &);
    const MissingAttributeValue_PRIORITY *get_const_MissingAttributeValue_PRIORITY() const;
    void set_const_NoSuchAttribute_PRIORITY(const NoSuchAttribute_PRIORITY &);
    const NoSuchAttribute_PRIORITY *get_const_NoSuchAttribute_PRIORITY() const;
    void set_const_NoSuchReferenceObject_PRIORITY(const NoSuchReferenceObject_PRIORITY &);
    const NoSuchReferenceObject_PRIORITY *get_const_NoSuchReferenceObject_PRIORITY() const;
    void set_const_NoSuchEventType_PRIORITY(const NoSuchEventType_PRIORITY &);
    const NoSuchEventType_PRIORITY *get_const_NoSuchEventType_PRIORITY() const;
    void set_const_GetListError_PRIORITY(const GetListError_PRIORITY &);
    const GetListError_PRIORITY *get_const_GetListError_PRIORITY() const;
    void set_const_OperationCancelled_PRIORITY(const OperationCancelled_PRIORITY &);
    const OperationCancelled_PRIORITY *get_const_OperationCancelled_PRIORITY() const;
    void set_const_SetListError_PRIORITY(const SetListError_PRIORITY &);
    const SetListError_PRIORITY *get_const_SetListError_PRIORITY() const;
    void set_const_Acse_RealizationParameter(const Acse_RealizationParameter &);
    const Acse_RealizationParameter *get_const_Acse_RealizationParameter() const;
    void set_const_Acse_with_concatenation_RealizationParameter(const Acse_with_concatenation_RealizationParameter &);
    const Acse_with_concatenation_RealizationParameter *get_const_Acse_with_concatenation_RealizationParameter() const;
    void set_const_Association_by_RTSE_RealizationParameter(const Association_by_RTSE_RealizationParameter &);
    const Association_by_RTSE_RealizationParameter *get_const_Association_by_RTSE_RealizationParameter() const;
    void set_const_PData_RealizationParameter(const PData_RealizationParameter &);
    const PData_RealizationParameter *get_const_PData_RealizationParameter() const;
    void set_const_PData_with_concatenation_RealizationParameter(const PData_with_concatenation_RealizationParameter &);
    const PData_with_concatenation_RealizationParameter *get_const_PData_with_concatenation_RealizationParameter() const;
    void set_const_Transfer_by_RTSE_RealizationParameter(const Transfer_by_RTSE_RealizationParameter &);
    const Transfer_by_RTSE_RealizationParameter *get_const_Transfer_by_RTSE_RealizationParameter() const;
#endif
};

/* Specific PDU classes */

class OSS_PUBLIC ActionArgument_PDU : public ConcretePDU {
public:
    ActionArgument_PDU();
    void set_data(ActionArgument &);
    ActionArgument *get_data() const;
#ifdef OSS_PREALLOCATED_BUFFER_DECODE_SUPPORTED
    void set_const_data(const ActionArgument & d);
    const ActionArgument *get_const_data() const;
#endif
protected:
    OssTypeIndex get_index() const;
};

class OSS_PUBLIC ActionResult_PDU : public ConcretePDU {
public:
    ActionResult_PDU();
    void set_data(ActionResult &);
    ActionResult *get_data() const;
#ifdef OSS_PREALLOCATED_BUFFER_DECODE_SUPPORTED
    void set_const_data(const ActionResult & d);
    const ActionResult *get_const_data() const;
#endif
protected:
    OssTypeIndex get_index() const;
};

class OSS_PUBLIC Attribute_PDU : public ConcretePDU {
public:
    Attribute_PDU();
    void set_data(Attribute &);
    Attribute *get_data() const;
#ifdef OSS_PREALLOCATED_BUFFER_DECODE_SUPPORTED
    void set_const_data(const Attribute & d);
    const Attribute *get_const_data() const;
#endif
protected:
    OssTypeIndex get_index() const;
};

class OSS_PUBLIC AttributeId_PDU : public ConcretePDU {
public:
    AttributeId_PDU();
    void set_data(AttributeId &);
    AttributeId *get_data() const;
#ifdef OSS_PREALLOCATED_BUFFER_DECODE_SUPPORTED
    void set_const_data(const AttributeId & d);
    const AttributeId *get_const_data() const;
#endif
protected:
    OssTypeIndex get_index() const;
};

class OSS_PUBLIC BaseManagedObjectId_PDU : public ConcretePDU {
public:
    BaseManagedObjectId_PDU();
    void set_data(BaseManagedObjectId &);
    BaseManagedObjectId *get_data() const;
#ifdef OSS_PREALLOCATED_BUFFER_DECODE_SUPPORTED
    void set_const_data(const BaseManagedObjectId & d);
    const BaseManagedObjectId *get_const_data() const;
#endif
protected:
    OssTypeIndex get_index() const;
};

class OSS_PUBLIC CMISFilter_PDU : public ConcretePDU {
public:
    CMISFilter_PDU();
    void set_data(CMISFilter &);
    CMISFilter *get_data() const;
#ifdef OSS_PREALLOCATED_BUFFER_DECODE_SUPPORTED
    void set_const_data(const CMISFilter & d);
    const CMISFilter *get_const_data() const;
#endif
protected:
    OssTypeIndex get_index() const;
};

class OSS_PUBLIC CMISSync_PDU : public ConcretePDU {
public:
    CMISSync_PDU();
    void set_data(CMISSync &);
    CMISSync *get_data() const;
#ifdef OSS_PREALLOCATED_BUFFER_DECODE_SUPPORTED
    void set_const_data(const CMISSync & d);
    const CMISSync *get_const_data() const;
#endif
protected:
    OssTypeIndex get_index() const;
};

class OSS_PUBLIC ComplexityLimitation_PDU : public ConcretePDU {
public:
    ComplexityLimitation_PDU();
    void set_data(ComplexityLimitation &);
    ComplexityLimitation *get_data() const;
#ifdef OSS_PREALLOCATED_BUFFER_DECODE_SUPPORTED
    void set_const_data(const ComplexityLimitation & d);
    const ComplexityLimitation *get_const_data() const;
#endif
protected:
    OssTypeIndex get_index() const;
};

class OSS_PUBLIC CreateArgument_PDU : public ConcretePDU {
public:
    CreateArgument_PDU();
    void set_data(CreateArgument &);
    CreateArgument *get_data() const;
#ifdef OSS_PREALLOCATED_BUFFER_DECODE_SUPPORTED
    void set_const_data(const CreateArgument & d);
    const CreateArgument *get_const_data() const;
#endif
protected:
    OssTypeIndex get_index() const;
};

class OSS_PUBLIC CreateResult_PDU : public ConcretePDU {
public:
    CreateResult_PDU();
    void set_data(CreateResult &);
    CreateResult *get_data() const;
#ifdef OSS_PREALLOCATED_BUFFER_DECODE_SUPPORTED
    void set_const_data(const CreateResult & d);
    const CreateResult *get_const_data() const;
#endif
protected:
    OssTypeIndex get_index() const;
};

class OSS_PUBLIC DeleteArgument_PDU : public ConcretePDU {
public:
    DeleteArgument_PDU();
    void set_data(DeleteArgument &);
    DeleteArgument *get_data() const;
#ifdef OSS_PREALLOCATED_BUFFER_DECODE_SUPPORTED
    void set_const_data(const DeleteArgument & d);
    const DeleteArgument *get_const_data() const;
#endif
protected:
    OssTypeIndex get_index() const;
};

class OSS_PUBLIC DeleteResult_PDU : public ConcretePDU {
public:
    DeleteResult_PDU();
    void set_data(DeleteResult &);
    DeleteResult *get_data() const;
#ifdef OSS_PREALLOCATED_BUFFER_DECODE_SUPPORTED
    void set_const_data(const DeleteResult & d);
    const DeleteResult *get_const_data() const;
#endif
protected:
    OssTypeIndex get_index() const;
};

class OSS_PUBLIC EventReportArgument_PDU : public ConcretePDU {
public:
    EventReportArgument_PDU();
    void set_data(EventReportArgument &);
    EventReportArgument *get_data() const;
#ifdef OSS_PREALLOCATED_BUFFER_DECODE_SUPPORTED
    void set_const_data(const EventReportArgument & d);
    const EventReportArgument *get_const_data() const;
#endif
protected:
    OssTypeIndex get_index() const;
};

class OSS_PUBLIC EventReportResult_PDU : public ConcretePDU {
public:
    EventReportResult_PDU();
    void set_data(EventReportResult &);
    EventReportResult *get_data() const;
#ifdef OSS_PREALLOCATED_BUFFER_DECODE_SUPPORTED
    void set_const_data(const EventReportResult & d);
    const EventReportResult *get_const_data() const;
#endif
protected:
    OssTypeIndex get_index() const;
};

class OSS_PUBLIC GetArgument_PDU : public ConcretePDU {
public:
    GetArgument_PDU();
    void set_data(GetArgument &);
    GetArgument *get_data() const;
#ifdef OSS_PREALLOCATED_BUFFER_DECODE_SUPPORTED
    void set_const_data(const GetArgument & d);
    const GetArgument *get_const_data() const;
#endif
protected:
    OssTypeIndex get_index() const;
};

class OSS_PUBLIC GetListError_PDU : public ConcretePDU {
public:
    GetListError_PDU();
    void set_data(GetListError &);
    GetListError *get_data() const;
#ifdef OSS_PREALLOCATED_BUFFER_DECODE_SUPPORTED
    void set_const_data(const GetListError & d);
    const GetListError *get_const_data() const;
#endif
protected:
    OssTypeIndex get_index() const;
};

class OSS_PUBLIC GetResult_PDU : public ConcretePDU {
public:
    GetResult_PDU();
    void set_data(GetResult &);
    GetResult *get_data() const;
#ifdef OSS_PREALLOCATED_BUFFER_DECODE_SUPPORTED
    void set_const_data(const GetResult & d);
    const GetResult *get_const_data() const;
#endif
protected:
    OssTypeIndex get_index() const;
};

class OSS_PUBLIC InvalidArgumentValue_PDU : public ConcretePDU {
public:
    InvalidArgumentValue_PDU();
    void set_data(InvalidArgumentValue &);
    InvalidArgumentValue *get_data() const;
#ifdef OSS_PREALLOCATED_BUFFER_DECODE_SUPPORTED
    void set_const_data(const InvalidArgumentValue & d);
    const InvalidArgumentValue *get_const_data() const;
#endif
protected:
    OssTypeIndex get_index() const;
};

class OSS_PUBLIC InvokeIDType_PDU : public ConcretePDU {
public:
    InvokeIDType_PDU();
    void set_data(InvokeIDType &);
    InvokeIDType *get_data() const;
#ifdef OSS_PREALLOCATED_BUFFER_DECODE_SUPPORTED
    void set_const_data(const InvokeIDType & d);
    const InvokeIDType *get_const_data() const;
#endif
protected:
    OssTypeIndex get_index() const;
};

class OSS_PUBLIC LinkedReplyArgument_PDU : public ConcretePDU {
public:
    LinkedReplyArgument_PDU();
    void set_data(LinkedReplyArgument &);
    LinkedReplyArgument *get_data() const;
#ifdef OSS_PREALLOCATED_BUFFER_DECODE_SUPPORTED
    void set_const_data(const LinkedReplyArgument & d);
    const LinkedReplyArgument *get_const_data() const;
#endif
protected:
    OssTypeIndex get_index() const;
};

class OSS_PUBLIC NoSuchAction_PDU : public ConcretePDU {
public:
    NoSuchAction_PDU();
    void set_data(NoSuchAction &);
    NoSuchAction *get_data() const;
#ifdef OSS_PREALLOCATED_BUFFER_DECODE_SUPPORTED
    void set_const_data(const NoSuchAction & d);
    const NoSuchAction *get_const_data() const;
#endif
protected:
    OssTypeIndex get_index() const;
};

class OSS_PUBLIC NoSuchArgument_PDU : public ConcretePDU {
public:
    NoSuchArgument_PDU();
    void set_data(NoSuchArgument &);
    NoSuchArgument *get_data() const;
#ifdef OSS_PREALLOCATED_BUFFER_DECODE_SUPPORTED
    void set_const_data(const NoSuchArgument & d);
    const NoSuchArgument *get_const_data() const;
#endif
protected:
    OssTypeIndex get_index() const;
};

class OSS_PUBLIC NoSuchEventType_PDU : public ConcretePDU {
public:
    NoSuchEventType_PDU();
    void set_data(NoSuchEventType &);
    NoSuchEventType *get_data() const;
#ifdef OSS_PREALLOCATED_BUFFER_DECODE_SUPPORTED
    void set_const_data(const NoSuchEventType & d);
    const NoSuchEventType *get_const_data() const;
#endif
protected:
    OssTypeIndex get_index() const;
};

class OSS_PUBLIC ObjectClass_PDU : public ConcretePDU {
public:
    ObjectClass_PDU();
    void set_data(ObjectClass &);
    ObjectClass *get_data() const;
#ifdef OSS_PREALLOCATED_BUFFER_DECODE_SUPPORTED
    void set_const_data(const ObjectClass & d);
    const ObjectClass *get_const_data() const;
#endif
protected:
    OssTypeIndex get_index() const;
};

class OSS_PUBLIC ObjectInstance_PDU : public ConcretePDU {
public:
    ObjectInstance_PDU();
    void set_data(ObjectInstance &);
    ObjectInstance *get_data() const;
#ifdef OSS_PREALLOCATED_BUFFER_DECODE_SUPPORTED
    void set_const_data(const ObjectInstance & d);
    const ObjectInstance *get_const_data() const;
#endif
protected:
    OssTypeIndex get_index() const;
};

class OSS_PUBLIC ProcessingFailure_PDU : public ConcretePDU {
public:
    ProcessingFailure_PDU();
    void set_data(ProcessingFailure &);
    ProcessingFailure *get_data() const;
#ifdef OSS_PREALLOCATED_BUFFER_DECODE_SUPPORTED
    void set_const_data(const ProcessingFailure & d);
    const ProcessingFailure *get_const_data() const;
#endif
protected:
    OssTypeIndex get_index() const;
};

class OSS_PUBLIC Scope_PDU : public ConcretePDU {
public:
    Scope_PDU();
    void set_data(Scope &);
    Scope *get_data() const;
#ifdef OSS_PREALLOCATED_BUFFER_DECODE_SUPPORTED
    void set_const_data(const Scope & d);
    const Scope *get_const_data() const;
#endif
protected:
    OssTypeIndex get_index() const;
};

class OSS_PUBLIC SetArgument_PDU : public ConcretePDU {
public:
    SetArgument_PDU();
    void set_data(SetArgument &);
    SetArgument *get_data() const;
#ifdef OSS_PREALLOCATED_BUFFER_DECODE_SUPPORTED
    void set_const_data(const SetArgument & d);
    const SetArgument *get_const_data() const;
#endif
protected:
    OssTypeIndex get_index() const;
};

class OSS_PUBLIC SetListError_PDU : public ConcretePDU {
public:
    SetListError_PDU();
    void set_data(SetListError &);
    SetListError *get_data() const;
#ifdef OSS_PREALLOCATED_BUFFER_DECODE_SUPPORTED
    void set_const_data(const SetListError & d);
    const SetListError *get_const_data() const;
#endif
protected:
    OssTypeIndex get_index() const;
};

class OSS_PUBLIC SetResult_PDU : public ConcretePDU {
public:
    SetResult_PDU();
    void set_data(SetResult &);
    SetResult *get_data() const;
#ifdef OSS_PREALLOCATED_BUFFER_DECODE_SUPPORTED
    void set_const_data(const SetResult & d);
    const SetResult *get_const_data() const;
#endif
protected:
    OssTypeIndex get_index() const;
};

class OSS_PUBLIC ROSEapdus_PDU : public ConcretePDU {
public:
    ROSEapdus_PDU();
    void set_data(ROSEapdus &);
    ROSEapdus *get_data() const;
#ifdef OSS_PREALLOCATED_BUFFER_DECODE_SUPPORTED
    void set_const_data(const ROSEapdus & d);
    const ROSEapdus *get_const_data() const;
#endif
protected:
    OssTypeIndex get_index() const;
};

class OSS_PUBLIC CMIPAbortInfo_PDU : public ConcretePDU {
public:
    CMIPAbortInfo_PDU();
    void set_data(CMIPAbortInfo &);
    CMIPAbortInfo *get_data() const;
#ifdef OSS_PREALLOCATED_BUFFER_DECODE_SUPPORTED
    void set_const_data(const CMIPAbortInfo & d);
    const CMIPAbortInfo *get_const_data() const;
#endif
protected:
    OssTypeIndex get_index() const;
};

class OSS_PUBLIC CMIPUserInfo_PDU : public ConcretePDU {
public:
    CMIPUserInfo_PDU();
    void set_data(CMIPUserInfo &);
    CMIPUserInfo *get_data() const;
#ifdef OSS_PREALLOCATED_BUFFER_DECODE_SUPPORTED
    void set_const_data(const CMIPUserInfo & d);
    const CMIPUserInfo *get_const_data() const;
#endif
protected:
    OssTypeIndex get_index() const;
};

class OSS_PUBLIC CmipPduReceivingSupport_PDU : public ConcretePDU {
public:
    CmipPduReceivingSupport_PDU();
    void set_data(CmipPduReceivingSupport &);
    CmipPduReceivingSupport *get_data() const;
#ifdef OSS_PREALLOCATED_BUFFER_DECODE_SUPPORTED
    void set_const_data(const CmipPduReceivingSupport & d);
    const CmipPduReceivingSupport *get_const_data() const;
#endif
protected:
    OssTypeIndex get_index() const;
};

class OSS_PUBLIC CmipPduSendingSupport_PDU : public ConcretePDU {
public:
    CmipPduSendingSupport_PDU();
    void set_data(CmipPduSendingSupport &);
    CmipPduSendingSupport *get_data() const;
#ifdef OSS_PREALLOCATED_BUFFER_DECODE_SUPPORTED
    void set_const_data(const CmipPduSendingSupport & d);
    const CmipPduSendingSupport *get_const_data() const;
#endif
protected:
    OssTypeIndex get_index() const;
};

class OSS_PUBLIC CmiseFunctionalUnitsSelected_PDU : public ConcretePDU {
public:
    CmiseFunctionalUnitsSelected_PDU();
    void set_data(CmiseFunctionalUnitsSelected &);
    CmiseFunctionalUnitsSelected *get_data() const;
#ifdef OSS_PREALLOCATED_BUFFER_DECODE_SUPPORTED
    void set_const_data(const CmiseFunctionalUnitsSelected & d);
    const CmiseFunctionalUnitsSelected *get_const_data() const;
#endif
protected:
    OssTypeIndex get_index() const;
};

class OSS_PUBLIC CmiseFunctionalUnitsSupported_PDU : public ConcretePDU {
public:
    CmiseFunctionalUnitsSupported_PDU();
    void set_data(CmiseFunctionalUnitsSupported &);
    CmiseFunctionalUnitsSupported *get_data() const;
#ifdef OSS_PREALLOCATED_BUFFER_DECODE_SUPPORTED
    void set_const_data(const CmiseFunctionalUnitsSupported & d);
    const CmiseFunctionalUnitsSupported *get_const_data() const;
#endif
protected:
    OssTypeIndex get_index() const;
};

class OSS_PUBLIC InvokeldsOutstanding_PDU : public ConcretePDU {
public:
    InvokeldsOutstanding_PDU();
    void set_data(InvokeldsOutstanding &);
    InvokeldsOutstanding *get_data() const;
#ifdef OSS_PREALLOCATED_BUFFER_DECODE_SUPPORTED
    void set_const_data(const InvokeldsOutstanding & d);
    const InvokeldsOutstanding *get_const_data() const;
#endif
protected:
    OssTypeIndex get_index() const;
};

class OSS_PUBLIC InvokeIdsPerforming_PDU : public ConcretePDU {
public:
    InvokeIdsPerforming_PDU();
    void set_data(InvokeIdsPerforming &);
    InvokeIdsPerforming *get_data() const;
#ifdef OSS_PREALLOCATED_BUFFER_DECODE_SUPPORTED
    void set_const_data(const InvokeIdsPerforming & d);
    const InvokeIdsPerforming *get_const_data() const;
#endif
protected:
    OssTypeIndex get_index() const;
};

class OSS_PUBLIC MaxEncodedCmipPduReceiveSize_PDU : public ConcretePDU {
public:
    MaxEncodedCmipPduReceiveSize_PDU();
    void set_data(MaxEncodedCmipPduReceiveSize &);
    MaxEncodedCmipPduReceiveSize *get_data() const;
#ifdef OSS_PREALLOCATED_BUFFER_DECODE_SUPPORTED
    void set_const_data(const MaxEncodedCmipPduReceiveSize & d);
    const MaxEncodedCmipPduReceiveSize *get_const_data() const;
#endif
protected:
    OssTypeIndex get_index() const;
};

class OSS_PUBLIC ProtocolVersionSupported_PDU : public ConcretePDU {
public:
    ProtocolVersionSupported_PDU();
    void set_data(ProtocolVersionSupported &);
    ProtocolVersionSupported *get_data() const;
#ifdef OSS_PREALLOCATED_BUFFER_DECODE_SUPPORTED
    void set_const_data(const ProtocolVersionSupported & d);
    const ProtocolVersionSupported *get_const_data() const;
#endif
protected:
    OssTypeIndex get_index() const;
};

class OSS_PUBLIC SmaseFunctionalUnits_PDU : public ConcretePDU {
public:
    SmaseFunctionalUnits_PDU();
    void set_data(SmaseFunctionalUnits &);
    SmaseFunctionalUnits *get_data() const;
#ifdef OSS_PREALLOCATED_BUFFER_DECODE_SUPPORTED
    void set_const_data(const SmaseFunctionalUnits & d);
    const SmaseFunctionalUnits *get_const_data() const;
#endif
protected:
    OssTypeIndex get_index() const;
};

class OSS_PUBLIC SmUserInfoSent_PDU : public ConcretePDU {
public:
    SmUserInfoSent_PDU();
    void set_data(SmUserInfoSent &);
    SmUserInfoSent *get_data() const;
#ifdef OSS_PREALLOCATED_BUFFER_DECODE_SUPPORTED
    void set_const_data(const SmUserInfoSent & d);
    const SmUserInfoSent *get_const_data() const;
#endif
protected:
    OssTypeIndex get_index() const;
};

class OSS_PUBLIC SmUserInfoReceived_PDU : public ConcretePDU {
public:
    SmUserInfoReceived_PDU();
    void set_data(SmUserInfoReceived &);
    SmUserInfoReceived *get_data() const;
#ifdef OSS_PREALLOCATED_BUFFER_DECODE_SUPPORTED
    void set_const_data(const SmUserInfoReceived & d);
    const SmUserInfoReceived *get_const_data() const;
#endif
protected:
    OssTypeIndex get_index() const;
};

class OSS_PUBLIC ROSEInvokeIds_PDU : public ConcretePDU {
public:
    ROSEInvokeIds_PDU();
    void set_data(ROSEInvokeIds &);
    ROSEInvokeIds *get_data() const;
#ifdef OSS_PREALLOCATED_BUFFER_DECODE_SUPPORTED
    void set_const_data(const ROSEInvokeIds & d);
    const ROSEInvokeIds *get_const_data() const;
#endif
protected:
    OssTypeIndex get_index() const;
};

class OSS_PUBLIC NoInvokeId_PDU : public ConcretePDU {
public:
    NoInvokeId_PDU();
    void set_data(NoInvokeId &);
    NoInvokeId *get_data() const;
#ifdef OSS_PREALLOCATED_BUFFER_DECODE_SUPPORTED
    void set_const_data(const NoInvokeId & d);
    const NoInvokeId *get_const_data() const;
#endif
protected:
    OssTypeIndex get_index() const;
};

class OSS_PUBLIC SMASEUserData_PDU : public ConcretePDU {
public:
    SMASEUserData_PDU();
    void set_data(SMASEUserData &);
    SMASEUserData *get_data() const;
#ifdef OSS_PREALLOCATED_BUFFER_DECODE_SUPPORTED
    void set_const_data(const SMASEUserData & d);
    const SMASEUserData *get_const_data() const;
#endif
protected:
    OssTypeIndex get_index() const;
};

class OSS_PUBLIC AccessDenied_PRIORITY_PDU : public ConcretePDU {
public:
    AccessDenied_PRIORITY_PDU();
    void set_data(AccessDenied_PRIORITY &);
    AccessDenied_PRIORITY *get_data() const;
#ifdef OSS_PREALLOCATED_BUFFER_DECODE_SUPPORTED
    void set_const_data(const AccessDenied_PRIORITY & d);
    const AccessDenied_PRIORITY *get_const_data() const;
#endif
protected:
    OssTypeIndex get_index() const;
};

class OSS_PUBLIC ClassInstanceConflict_PRIORITY_PDU : public ConcretePDU {
public:
    ClassInstanceConflict_PRIORITY_PDU();
    void set_data(ClassInstanceConflict_PRIORITY &);
    ClassInstanceConflict_PRIORITY *get_data() const;
#ifdef OSS_PREALLOCATED_BUFFER_DECODE_SUPPORTED
    void set_const_data(const ClassInstanceConflict_PRIORITY & d);
    const ClassInstanceConflict_PRIORITY *get_const_data() const;
#endif
protected:
    OssTypeIndex get_index() const;
};

class OSS_PUBLIC ComplexityLimitation_PRIORITY_PDU : public ConcretePDU {
public:
    ComplexityLimitation_PRIORITY_PDU();
    void set_data(ComplexityLimitation_PRIORITY &);
    ComplexityLimitation_PRIORITY *get_data() const;
#ifdef OSS_PREALLOCATED_BUFFER_DECODE_SUPPORTED
    void set_const_data(const ComplexityLimitation_PRIORITY & d);
    const ComplexityLimitation_PRIORITY *get_const_data() const;
#endif
protected:
    OssTypeIndex get_index() const;
};

class OSS_PUBLIC InvalidScope_PRIORITY_PDU : public ConcretePDU {
public:
    InvalidScope_PRIORITY_PDU();
    void set_data(InvalidScope_PRIORITY &);
    InvalidScope_PRIORITY *get_data() const;
#ifdef OSS_PREALLOCATED_BUFFER_DECODE_SUPPORTED
    void set_const_data(const InvalidScope_PRIORITY & d);
    const InvalidScope_PRIORITY *get_const_data() const;
#endif
protected:
    OssTypeIndex get_index() const;
};

class OSS_PUBLIC InvalidArgumentValue_PRIORITY_PDU : public ConcretePDU {
public:
    InvalidArgumentValue_PRIORITY_PDU();
    void set_data(InvalidArgumentValue_PRIORITY &);
    InvalidArgumentValue_PRIORITY *get_data() const;
#ifdef OSS_PREALLOCATED_BUFFER_DECODE_SUPPORTED
    void set_const_data(const InvalidArgumentValue_PRIORITY & d);
    const InvalidArgumentValue_PRIORITY *get_const_data() const;
#endif
protected:
    OssTypeIndex get_index() const;
};

class OSS_PUBLIC InvalidFilter_PRIORITY_PDU : public ConcretePDU {
public:
    InvalidFilter_PRIORITY_PDU();
    void set_data(InvalidFilter_PRIORITY &);
    InvalidFilter_PRIORITY *get_data() const;
#ifdef OSS_PREALLOCATED_BUFFER_DECODE_SUPPORTED
    void set_const_data(const InvalidFilter_PRIORITY & d);
    const InvalidFilter_PRIORITY *get_const_data() const;
#endif
protected:
    OssTypeIndex get_index() const;
};

class OSS_PUBLIC NoSuchAction_PRIORITY_PDU : public ConcretePDU {
public:
    NoSuchAction_PRIORITY_PDU();
    void set_data(NoSuchAction_PRIORITY &);
    NoSuchAction_PRIORITY *get_data() const;
#ifdef OSS_PREALLOCATED_BUFFER_DECODE_SUPPORTED
    void set_const_data(const NoSuchAction_PRIORITY & d);
    const NoSuchAction_PRIORITY *get_const_data() const;
#endif
protected:
    OssTypeIndex get_index() const;
};

class OSS_PUBLIC NoSuchArgument_PRIORITY_PDU : public ConcretePDU {
public:
    NoSuchArgument_PRIORITY_PDU();
    void set_data(NoSuchArgument_PRIORITY &);
    NoSuchArgument_PRIORITY *get_data() const;
#ifdef OSS_PREALLOCATED_BUFFER_DECODE_SUPPORTED
    void set_const_data(const NoSuchArgument_PRIORITY & d);
    const NoSuchArgument_PRIORITY *get_const_data() const;
#endif
protected:
    OssTypeIndex get_index() const;
};

class OSS_PUBLIC NoSuchObjectClass_PRIORITY_PDU : public ConcretePDU {
public:
    NoSuchObjectClass_PRIORITY_PDU();
    void set_data(NoSuchObjectClass_PRIORITY &);
    NoSuchObjectClass_PRIORITY *get_data() const;
#ifdef OSS_PREALLOCATED_BUFFER_DECODE_SUPPORTED
    void set_const_data(const NoSuchObjectClass_PRIORITY & d);
    const NoSuchObjectClass_PRIORITY *get_const_data() const;
#endif
protected:
    OssTypeIndex get_index() const;
};

class OSS_PUBLIC NoSuchObjectInstance_PRIORITY_PDU : public ConcretePDU {
public:
    NoSuchObjectInstance_PRIORITY_PDU();
    void set_data(NoSuchObjectInstance_PRIORITY &);
    NoSuchObjectInstance_PRIORITY *get_data() const;
#ifdef OSS_PREALLOCATED_BUFFER_DECODE_SUPPORTED
    void set_const_data(const NoSuchObjectInstance_PRIORITY & d);
    const NoSuchObjectInstance_PRIORITY *get_const_data() const;
#endif
protected:
    OssTypeIndex get_index() const;
};

class OSS_PUBLIC ProcessingFailure_PRIORITY_PDU : public ConcretePDU {
public:
    ProcessingFailure_PRIORITY_PDU();
    void set_data(ProcessingFailure_PRIORITY &);
    ProcessingFailure_PRIORITY *get_data() const;
#ifdef OSS_PREALLOCATED_BUFFER_DECODE_SUPPORTED
    void set_const_data(const ProcessingFailure_PRIORITY & d);
    const ProcessingFailure_PRIORITY *get_const_data() const;
#endif
protected:
    OssTypeIndex get_index() const;
};

class OSS_PUBLIC SyncNotSupported_PRIORITY_PDU : public ConcretePDU {
public:
    SyncNotSupported_PRIORITY_PDU();
    void set_data(SyncNotSupported_PRIORITY &);
    SyncNotSupported_PRIORITY *get_data() const;
#ifdef OSS_PREALLOCATED_BUFFER_DECODE_SUPPORTED
    void set_const_data(const SyncNotSupported_PRIORITY & d);
    const SyncNotSupported_PRIORITY *get_const_data() const;
#endif
protected:
    OssTypeIndex get_index() const;
};

class OSS_PUBLIC MistypedOperation_PRIORITY_PDU : public ConcretePDU {
public:
    MistypedOperation_PRIORITY_PDU();
    void set_data(MistypedOperation_PRIORITY &);
    MistypedOperation_PRIORITY *get_data() const;
#ifdef OSS_PREALLOCATED_BUFFER_DECODE_SUPPORTED
    void set_const_data(const MistypedOperation_PRIORITY & d);
    const MistypedOperation_PRIORITY *get_const_data() const;
#endif
protected:
    OssTypeIndex get_index() const;
};

class OSS_PUBLIC NoSuchInvokeId_PRIORITY_PDU : public ConcretePDU {
public:
    NoSuchInvokeId_PRIORITY_PDU();
    void set_data(NoSuchInvokeId_PRIORITY &);
    NoSuchInvokeId_PRIORITY *get_data() const;
#ifdef OSS_PREALLOCATED_BUFFER_DECODE_SUPPORTED
    void set_const_data(const NoSuchInvokeId_PRIORITY & d);
    const NoSuchInvokeId_PRIORITY *get_const_data() const;
#endif
protected:
    OssTypeIndex get_index() const;
};

class OSS_PUBLIC DuplicateManagedObjectInstance_PRIORITY_PDU : public ConcretePDU {
public:
    DuplicateManagedObjectInstance_PRIORITY_PDU();
    void set_data(DuplicateManagedObjectInstance_PRIORITY &);
    DuplicateManagedObjectInstance_PRIORITY *get_data() const;
#ifdef OSS_PREALLOCATED_BUFFER_DECODE_SUPPORTED
    void set_const_data(const DuplicateManagedObjectInstance_PRIORITY & d);
    const DuplicateManagedObjectInstance_PRIORITY *get_const_data() const;
#endif
protected:
    OssTypeIndex get_index() const;
};

class OSS_PUBLIC InvalidAttributeValue_PRIORITY_PDU : public ConcretePDU {
public:
    InvalidAttributeValue_PRIORITY_PDU();
    void set_data(InvalidAttributeValue_PRIORITY &);
    InvalidAttributeValue_PRIORITY *get_data() const;
#ifdef OSS_PREALLOCATED_BUFFER_DECODE_SUPPORTED
    void set_const_data(const InvalidAttributeValue_PRIORITY & d);
    const InvalidAttributeValue_PRIORITY *get_const_data() const;
#endif
protected:
    OssTypeIndex get_index() const;
};

class OSS_PUBLIC InvalidObjectInstance_PRIORITY_PDU : public ConcretePDU {
public:
    InvalidObjectInstance_PRIORITY_PDU();
    void set_data(InvalidObjectInstance_PRIORITY &);
    InvalidObjectInstance_PRIORITY *get_data() const;
#ifdef OSS_PREALLOCATED_BUFFER_DECODE_SUPPORTED
    void set_const_data(const InvalidObjectInstance_PRIORITY & d);
    const InvalidObjectInstance_PRIORITY *get_const_data() const;
#endif
protected:
    OssTypeIndex get_index() const;
};

class OSS_PUBLIC MissingAttributeValue_PARAMETER_PDU : public ConcretePDU {
public:
    MissingAttributeValue_PARAMETER_PDU();
    void set_data(MissingAttributeValue_PARAMETER &);
    MissingAttributeValue_PARAMETER *get_data() const;
#ifdef OSS_PREALLOCATED_BUFFER_DECODE_SUPPORTED
    void set_const_data(const MissingAttributeValue_PARAMETER & d);
    const MissingAttributeValue_PARAMETER *get_const_data() const;
#endif
protected:
    OssTypeIndex get_index() const;
};

class OSS_PUBLIC MissingAttributeValue_PRIORITY_PDU : public ConcretePDU {
public:
    MissingAttributeValue_PRIORITY_PDU();
    void set_data(MissingAttributeValue_PRIORITY &);
    MissingAttributeValue_PRIORITY *get_data() const;
#ifdef OSS_PREALLOCATED_BUFFER_DECODE_SUPPORTED
    void set_const_data(const MissingAttributeValue_PRIORITY & d);
    const MissingAttributeValue_PRIORITY *get_const_data() const;
#endif
protected:
    OssTypeIndex get_index() const;
};

class OSS_PUBLIC NoSuchAttribute_PRIORITY_PDU : public ConcretePDU {
public:
    NoSuchAttribute_PRIORITY_PDU();
    void set_data(NoSuchAttribute_PRIORITY &);
    NoSuchAttribute_PRIORITY *get_data() const;
#ifdef OSS_PREALLOCATED_BUFFER_DECODE_SUPPORTED
    void set_const_data(const NoSuchAttribute_PRIORITY & d);
    const NoSuchAttribute_PRIORITY *get_const_data() const;
#endif
protected:
    OssTypeIndex get_index() const;
};

class OSS_PUBLIC NoSuchReferenceObject_PRIORITY_PDU : public ConcretePDU {
public:
    NoSuchReferenceObject_PRIORITY_PDU();
    void set_data(NoSuchReferenceObject_PRIORITY &);
    NoSuchReferenceObject_PRIORITY *get_data() const;
#ifdef OSS_PREALLOCATED_BUFFER_DECODE_SUPPORTED
    void set_const_data(const NoSuchReferenceObject_PRIORITY & d);
    const NoSuchReferenceObject_PRIORITY *get_const_data() const;
#endif
protected:
    OssTypeIndex get_index() const;
};

class OSS_PUBLIC NoSuchEventType_PRIORITY_PDU : public ConcretePDU {
public:
    NoSuchEventType_PRIORITY_PDU();
    void set_data(NoSuchEventType_PRIORITY &);
    NoSuchEventType_PRIORITY *get_data() const;
#ifdef OSS_PREALLOCATED_BUFFER_DECODE_SUPPORTED
    void set_const_data(const NoSuchEventType_PRIORITY & d);
    const NoSuchEventType_PRIORITY *get_const_data() const;
#endif
protected:
    OssTypeIndex get_index() const;
};

class OSS_PUBLIC GetListError_PRIORITY_PDU : public ConcretePDU {
public:
    GetListError_PRIORITY_PDU();
    void set_data(GetListError_PRIORITY &);
    GetListError_PRIORITY *get_data() const;
#ifdef OSS_PREALLOCATED_BUFFER_DECODE_SUPPORTED
    void set_const_data(const GetListError_PRIORITY & d);
    const GetListError_PRIORITY *get_const_data() const;
#endif
protected:
    OssTypeIndex get_index() const;
};

class OSS_PUBLIC OperationCancelled_PRIORITY_PDU : public ConcretePDU {
public:
    OperationCancelled_PRIORITY_PDU();
    void set_data(OperationCancelled_PRIORITY &);
    OperationCancelled_PRIORITY *get_data() const;
#ifdef OSS_PREALLOCATED_BUFFER_DECODE_SUPPORTED
    void set_const_data(const OperationCancelled_PRIORITY & d);
    const OperationCancelled_PRIORITY *get_const_data() const;
#endif
protected:
    OssTypeIndex get_index() const;
};

class OSS_PUBLIC SetListError_PRIORITY_PDU : public ConcretePDU {
public:
    SetListError_PRIORITY_PDU();
    void set_data(SetListError_PRIORITY &);
    SetListError_PRIORITY *get_data() const;
#ifdef OSS_PREALLOCATED_BUFFER_DECODE_SUPPORTED
    void set_const_data(const SetListError_PRIORITY & d);
    const SetListError_PRIORITY *get_const_data() const;
#endif
protected:
    OssTypeIndex get_index() const;
};

class OSS_PUBLIC Acse_RealizationParameter_PDU : public ConcretePDU {
public:
    Acse_RealizationParameter_PDU();
    void set_data(Acse_RealizationParameter &);
    Acse_RealizationParameter *get_data() const;
#ifdef OSS_PREALLOCATED_BUFFER_DECODE_SUPPORTED
    void set_const_data(const Acse_RealizationParameter & d);
    const Acse_RealizationParameter *get_const_data() const;
#endif
protected:
    OssTypeIndex get_index() const;
};

class OSS_PUBLIC Acse_with_concatenation_RealizationParameter_PDU : public ConcretePDU {
public:
    Acse_with_concatenation_RealizationParameter_PDU();
    void set_data(Acse_with_concatenation_RealizationParameter &);
    Acse_with_concatenation_RealizationParameter *get_data() const;
#ifdef OSS_PREALLOCATED_BUFFER_DECODE_SUPPORTED
    void set_const_data(const Acse_with_concatenation_RealizationParameter & d);
    const Acse_with_concatenation_RealizationParameter *get_const_data() const;
#endif
protected:
    OssTypeIndex get_index() const;
};

class OSS_PUBLIC Association_by_RTSE_RealizationParameter_PDU : public ConcretePDU {
public:
    Association_by_RTSE_RealizationParameter_PDU();
    void set_data(Association_by_RTSE_RealizationParameter &);
    Association_by_RTSE_RealizationParameter *get_data() const;
#ifdef OSS_PREALLOCATED_BUFFER_DECODE_SUPPORTED
    void set_const_data(const Association_by_RTSE_RealizationParameter & d);
    const Association_by_RTSE_RealizationParameter *get_const_data() const;
#endif
protected:
    OssTypeIndex get_index() const;
};

class OSS_PUBLIC PData_RealizationParameter_PDU : public ConcretePDU {
public:
    PData_RealizationParameter_PDU();
    void set_data(PData_RealizationParameter &);
    PData_RealizationParameter *get_data() const;
#ifdef OSS_PREALLOCATED_BUFFER_DECODE_SUPPORTED
    void set_const_data(const PData_RealizationParameter & d);
    const PData_RealizationParameter *get_const_data() const;
#endif
protected:
    OssTypeIndex get_index() const;
};

class OSS_PUBLIC PData_with_concatenation_RealizationParameter_PDU : public ConcretePDU {
public:
    PData_with_concatenation_RealizationParameter_PDU();
    void set_data(PData_with_concatenation_RealizationParameter &);
    PData_with_concatenation_RealizationParameter *get_data() const;
#ifdef OSS_PREALLOCATED_BUFFER_DECODE_SUPPORTED
    void set_const_data(const PData_with_concatenation_RealizationParameter & d);
    const PData_with_concatenation_RealizationParameter *get_const_data() const;
#endif
protected:
    OssTypeIndex get_index() const;
};

class OSS_PUBLIC Transfer_by_RTSE_RealizationParameter_PDU : public ConcretePDU {
public:
    Transfer_by_RTSE_RealizationParameter_PDU();
    void set_data(Transfer_by_RTSE_RealizationParameter &);
    Transfer_by_RTSE_RealizationParameter *get_data() const;
#ifdef OSS_PREALLOCATED_BUFFER_DECODE_SUPPORTED
    void set_const_data(const Transfer_by_RTSE_RealizationParameter & d);
    const Transfer_by_RTSE_RealizationParameter *get_const_data() const;
#endif
protected:
    OssTypeIndex get_index() const;
};

/* Control object class */

class OSS_PUBLIC SMASE_A_ASSOCIATE_Information_Control : public OssControl {
public:
    SMASE_A_ASSOCIATE_Information_Control();
    SMASE_A_ASSOCIATE_Information_Control(const SMASE_A_ASSOCIATE_Information_Control &);
};


/* External definitions for named values */

extern OSS_PUBLIC const OssEncOID& crsMObjectClass;

extern OSS_PUBLIC const OssEncOID& crsMPackage;

extern OSS_PUBLIC const OssEncOID& crsMNameBinding;

extern OSS_PUBLIC const OssEncOID& crsAttribute;

extern OSS_PUBLIC const __shared12& noInvokeId;

} // namespace CMIP

#endif // OSS_SMASE_A_ASSOCIATE_Information
