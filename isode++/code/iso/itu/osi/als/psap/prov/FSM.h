/*
 * ex: set ro:
 * DO NOT EDIT.
 * generated by smc (http://smc.sourceforge.net/)
 * from file : PSAP.sm
 */

#ifndef _H_FSM_PSAP
#define _H_FSM_PSAP


#define SMC_USES_IOSTREAMS

#include "statemap.h"

namespace ALS
{
    namespace PSAP
    {
        namespace PROV
        {
            // Forward declarations.
            class STATE;
            class STATE_STAI0;
            class STATE_STAI1;
            class STATE_STAI2;
            class STATE_STAt0;
            class STATE_STAac0;
            class STATE_STAac1;
            class STATE_STAac2;
            class STATE_Default;
            class ProviderState;
            class FSM;
            class Provider;

            class ProviderState :
                public statemap::State
            {
            public:

                ProviderState(const char *name, int stateId)
                : statemap::State(name, stateId)
                {};

                virtual void Entry(FSM&) {};
                virtual void Exit(FSM&) {};

                virtual void AC(FSM& context);
                virtual void ACA(FSM& context);
                virtual void ARP(FSM& context);
                virtual void ARU(FSM& context);
                virtual void CP(FSM& context);
                virtual void CPA(FSM& context);
                virtual void CPR(FSM& context);
                virtual void P_ACTDind(FSM& context);
                virtual void P_ACTDreq(FSM& context);
                virtual void P_ACTDrsp(FSM& context);
                virtual void P_ACTEreq(FSM& context);
                virtual void P_ACTErsp(FSM& context);
                virtual void P_ACTIreq(FSM& context);
                virtual void P_ACTIrsp(FSM& context);
                virtual void P_ACTRreq(FSM& context);
                virtual void P_ACTSreq(FSM& context);
                virtual void P_ALTERreq(FSM& context);
                virtual void P_ALTERrsp(FSM& context);
                virtual void P_CDreq(FSM& context);
                virtual void P_CDrsp(FSM& context);
                virtual void P_CGreq(FSM& context);
                virtual void P_CONcnf(FSM& context, bool accept);
                virtual void P_CONreq(FSM& context);
                virtual void P_DTreq(FSM& context);
                virtual void P_EXreq(FSM& context);
                virtual void P_GTreq(FSM& context);
                virtual void P_PTreq(FSM& context);
                virtual void P_RELreq(FSM& context);
                virtual void P_RELrsp(FSM& context, bool accept);
                virtual void P_RSYNreq(FSM& context);
                virtual void P_RSYNrsp(FSM& context);
                virtual void P_SYNMreq(FSM& context);
                virtual void P_SYNMrsp(FSM& context);
                virtual void P_SYNmreq(FSM& context);
                virtual void P_SYNmrsp(FSM& context);
                virtual void P_TDreq(FSM& context);
                virtual void P_UABreq(FSM& context);
                virtual void P_UERreq(FSM& context);
                virtual void RS(FSM& context);
                virtual void RSA(FSM& context);
                virtual void S_ACTDcnf(FSM& context);
                virtual void S_ACTDind(FSM& context);
                virtual void S_ACTEcnf(FSM& context);
                virtual void S_ACTEind(FSM& context);
                virtual void S_ACTIcnf(FSM& context);
                virtual void S_ACTIind(FSM& context);
                virtual void S_ACTRind(FSM& context);
                virtual void S_ACTSind(FSM& context);
                virtual void S_CGind(FSM& context);
                virtual void S_CONcnf(FSM& context, bool accept);
                virtual void S_GTind(FSM& context);
                virtual void S_PABind(FSM& context);
                virtual void S_PERind(FSM& context);
                virtual void S_PTind(FSM& context);
                virtual void S_RELcnf(FSM& context, bool accept);
                virtual void S_RELind(FSM& context);
                virtual void S_SYNMcnf(FSM& context);
                virtual void S_SYNMind(FSM& context);
                virtual void S_SYNmcnf(FSM& context);
                virtual void S_SYNmind(FSM& context);
                virtual void S_UERind(FSM& context);
                virtual void TC(FSM& context);
                virtual void TCC(FSM& context);
                virtual void TD(FSM& context);
                virtual void TE(FSM& context);
                virtual void TTD(FSM& context);

            protected:

                virtual void Default(FSM& context);
            };

            class STATE_Default :
                public ProviderState
            {
            public:

                STATE_Default(const char *name, int stateId)
                : ProviderState(name, stateId)
                {};

            };

            class STATE_STAI0 :
                public STATE_Default
            {
            public:
                STATE_STAI0(const char *name, int stateId)
                : STATE_Default(name, stateId)
                {};

                void CP(FSM& context);
                void P_CONreq(FSM& context);
            };

            class STATE_STAI1 :
                public STATE_Default
            {
            public:
                STATE_STAI1(const char *name, int stateId)
                : STATE_Default(name, stateId)
                {};

                void ARP(FSM& context);
                void ARU(FSM& context);
                void CPA(FSM& context);
                void CPR(FSM& context);
                void P_UABreq(FSM& context);
                void S_CONcnf(FSM& context, bool accept);
                void S_PABind(FSM& context);
            };

            class STATE_STAI2 :
                public STATE_Default
            {
            public:
                STATE_STAI2(const char *name, int stateId)
                : STATE_Default(name, stateId)
                {};

                void ARP(FSM& context);
                void ARU(FSM& context);
                void P_CONcnf(FSM& context, bool accept);
                void P_UABreq(FSM& context);
                void S_PABind(FSM& context);
            };

            class STATE_STAt0 :
                public STATE_Default
            {
            public:
                STATE_STAt0(const char *name, int stateId)
                : STATE_Default(name, stateId)
                {};

                void AC(FSM& context);
                void ARP(FSM& context);
                void ARU(FSM& context);
                void P_ACTDreq(FSM& context);
                void P_ACTDrsp(FSM& context);
                void P_ACTEreq(FSM& context);
                void P_ACTErsp(FSM& context);
                void P_ACTIreq(FSM& context);
                void P_ACTIrsp(FSM& context);
                void P_ACTRreq(FSM& context);
                void P_ACTSreq(FSM& context);
                void P_ALTERreq(FSM& context);
                void P_CDreq(FSM& context);
                void P_CDrsp(FSM& context);
                void P_CGreq(FSM& context);
                void P_DTreq(FSM& context);
                void P_EXreq(FSM& context);
                void P_GTreq(FSM& context);
                void P_PTreq(FSM& context);
                void P_RELreq(FSM& context);
                void P_RELrsp(FSM& context, bool accept);
                void P_RSYNreq(FSM& context);
                void P_RSYNrsp(FSM& context);
                void P_SYNMreq(FSM& context);
                void P_SYNMrsp(FSM& context);
                void P_SYNmreq(FSM& context);
                void P_SYNmrsp(FSM& context);
                void P_TDreq(FSM& context);
                void P_UABreq(FSM& context);
                void P_UERreq(FSM& context);
                void RS(FSM& context);
                void RSA(FSM& context);
                void S_ACTDcnf(FSM& context);
                void S_ACTDind(FSM& context);
                void S_ACTEcnf(FSM& context);
                void S_ACTEind(FSM& context);
                void S_ACTIcnf(FSM& context);
                void S_ACTIind(FSM& context);
                void S_ACTRind(FSM& context);
                void S_ACTSind(FSM& context);
                void S_CGind(FSM& context);
                void S_GTind(FSM& context);
                void S_PABind(FSM& context);
                void S_PERind(FSM& context);
                void S_PTind(FSM& context);
                void S_RELcnf(FSM& context, bool accept);
                void S_RELind(FSM& context);
                void S_SYNMcnf(FSM& context);
                void S_SYNMind(FSM& context);
                void S_SYNmcnf(FSM& context);
                void S_SYNmind(FSM& context);
                void S_UERind(FSM& context);
                void TC(FSM& context);
                void TCC(FSM& context);
                void TD(FSM& context);
                void TE(FSM& context);
                void TTD(FSM& context);
            };

            class STATE_STAac0 :
                public STATE_Default
            {
            public:
                STATE_STAac0(const char *name, int stateId)
                : STATE_Default(name, stateId)
                {};

                void AC(FSM& context);
                void ACA(FSM& context);
                void ARP(FSM& context);
                void ARU(FSM& context);
                void P_ACTDind(FSM& context);
                void P_ACTDreq(FSM& context);
                void P_ACTEreq(FSM& context);
                void P_ACTErsp(FSM& context);
                void P_ACTIreq(FSM& context);
                void P_ACTRreq(FSM& context);
                void P_ACTSreq(FSM& context);
                void P_CDreq(FSM& context);
                void P_CDrsp(FSM& context);
                void P_CGreq(FSM& context);
                void P_DTreq(FSM& context);
                void P_EXreq(FSM& context);
                void P_GTreq(FSM& context);
                void P_PTreq(FSM& context);
                void P_RELreq(FSM& context);
                void P_RELrsp(FSM& context, bool accept);
                void P_RSYNreq(FSM& context);
                void P_SYNMreq(FSM& context);
                void P_SYNMrsp(FSM& context);
                void P_SYNmreq(FSM& context);
                void P_SYNmrsp(FSM& context);
                void P_TDreq(FSM& context);
                void P_UABreq(FSM& context);
                void P_UERreq(FSM& context);
                void RS(FSM& context);
                void S_ACTDind(FSM& context);
                void S_ACTEcnf(FSM& context);
                void S_ACTEind(FSM& context);
                void S_ACTIind(FSM& context);
                void S_ACTRind(FSM& context);
                void S_ACTSind(FSM& context);
                void S_CGind(FSM& context);
                void S_GTind(FSM& context);
                void S_PABind(FSM& context);
                void S_PERind(FSM& context);
                void S_PTind(FSM& context);
                void S_RELcnf(FSM& context, bool accept);
                void S_RELind(FSM& context);
                void S_SYNMcnf(FSM& context);
                void S_SYNMind(FSM& context);
                void S_SYNmcnf(FSM& context);
                void S_SYNmind(FSM& context);
                void S_UERind(FSM& context);
                void TC(FSM& context);
                void TCC(FSM& context);
                void TD(FSM& context);
                void TE(FSM& context);
                void TTD(FSM& context);
            };

            class STATE_STAac1 :
                public STATE_Default
            {
            public:
                STATE_STAac1(const char *name, int stateId)
                : STATE_Default(name, stateId)
                {};

                void ARP(FSM& context);
                void ARU(FSM& context);
                void P_ACTDind(FSM& context);
                void P_ACTDreq(FSM& context);
                void P_ACTEreq(FSM& context);
                void P_ACTErsp(FSM& context);
                void P_ACTIreq(FSM& context);
                void P_ACTRreq(FSM& context);
                void P_ACTSreq(FSM& context);
                void P_ALTERreq(FSM& context);
                void P_ALTERrsp(FSM& context);
                void P_CDreq(FSM& context);
                void P_CDrsp(FSM& context);
                void P_CGreq(FSM& context);
                void P_DTreq(FSM& context);
                void P_EXreq(FSM& context);
                void P_GTreq(FSM& context);
                void P_PTreq(FSM& context);
                void P_RELreq(FSM& context);
                void P_RELrsp(FSM& context, bool accept);
                void P_RSYNreq(FSM& context);
                void P_SYNMreq(FSM& context);
                void P_SYNMrsp(FSM& context);
                void P_SYNmreq(FSM& context);
                void P_SYNmrsp(FSM& context);
                void P_TDreq(FSM& context);
                void P_UABreq(FSM& context);
                void P_UERreq(FSM& context);
                void RS(FSM& context);
                void S_ACTEcnf(FSM& context);
                void S_ACTEind(FSM& context);
                void S_ACTIind(FSM& context);
                void S_ACTRind(FSM& context);
                void S_ACTSind(FSM& context);
                void S_CGind(FSM& context);
                void S_GTind(FSM& context);
                void S_PABind(FSM& context);
                void S_PERind(FSM& context);
                void S_PTind(FSM& context);
                void S_RELcnf(FSM& context, bool accept);
                void S_RELind(FSM& context);
                void S_SYNMcnf(FSM& context);
                void S_SYNMind(FSM& context);
                void S_SYNmcnf(FSM& context);
                void S_SYNmind(FSM& context);
                void S_UERind(FSM& context);
                void TC(FSM& context);
                void TCC(FSM& context);
                void TD(FSM& context);
                void TE(FSM& context);
                void TTD(FSM& context);
            };

            class STATE_STAac2 :
                public STATE_Default
            {
            public:
                STATE_STAac2(const char *name, int stateId)
                : STATE_Default(name, stateId)
                {};

                void ACA(FSM& context);
                void ARP(FSM& context);
                void ARU(FSM& context);
                void P_ACTDind(FSM& context);
                void P_ACTDreq(FSM& context);
                void P_ACTEreq(FSM& context);
                void P_ACTErsp(FSM& context);
                void P_ACTIreq(FSM& context);
                void P_ACTRreq(FSM& context);
                void P_ACTSreq(FSM& context);
                void P_ALTERrsp(FSM& context);
                void P_CDreq(FSM& context);
                void P_CDrsp(FSM& context);
                void P_CGreq(FSM& context);
                void P_DTreq(FSM& context);
                void P_EXreq(FSM& context);
                void P_GTreq(FSM& context);
                void P_PTreq(FSM& context);
                void P_RELreq(FSM& context);
                void P_RELrsp(FSM& context, bool accept);
                void P_RSYNreq(FSM& context);
                void P_SYNMreq(FSM& context);
                void P_SYNMrsp(FSM& context);
                void P_SYNmreq(FSM& context);
                void P_SYNmrsp(FSM& context);
                void P_TDreq(FSM& context);
                void P_UABreq(FSM& context);
                void P_UERreq(FSM& context);
                void RS(FSM& context);
                void S_ACTEcnf(FSM& context);
                void S_ACTEind(FSM& context);
                void S_ACTIind(FSM& context);
                void S_ACTRind(FSM& context);
                void S_ACTSind(FSM& context);
                void S_CGind(FSM& context);
                void S_GTind(FSM& context);
                void S_PABind(FSM& context);
                void S_PERind(FSM& context);
                void S_PTind(FSM& context);
                void S_RELcnf(FSM& context, bool accept);
                void S_RELind(FSM& context);
                void S_SYNMcnf(FSM& context);
                void S_SYNMind(FSM& context);
                void S_SYNmcnf(FSM& context);
                void S_SYNmind(FSM& context);
                void S_UERind(FSM& context);
                void TC(FSM& context);
                void TCC(FSM& context);
                void TD(FSM& context);
                void TE(FSM& context);
                void TTD(FSM& context);
            };

            class STATE
            {
            public:
            STATE_STAI0 STAI0;
            STATE_STAI1 STAI1;
            STATE_STAI2 STAI2;
            STATE_STAt0 STAt0;
            STATE_STAac0 STAac0;
            STATE_STAac1 STAac1;
            STATE_STAac2 STAac2;
            // member class initiatlization.
            STATE() : 
            STAI0("STATE::STAI0", 0),
            STAI1("STATE::STAI1", 1),
            STAI2("STATE::STAI2", 2),
            STAt0("STATE::STAt0", 3),
            STAac0("STATE::STAac0", 4),
            STAac1("STATE::STAac1", 5),
            STAac2("STATE::STAac2", 6){}
            };

            class FSM :
                public statemap::FSMContext,
                public STATE
            {
            public:

                FSM(Provider& owner)
                : FSMContext(STATE::STAI0),
                  _owner(owner)
                {};

                FSM(Provider& owner, const statemap::State& state)
                : FSMContext(state),
                  _owner(owner)
                {};

                virtual void enterStartState()
                {
                    getState().Entry(*this);
                    return;
                }

                Provider& getOwner() const
                {
                    return (_owner);
                };

                ProviderState& getState() const
                {
                    if (_state == nullptr)
                    {
                        throw statemap::StateUndefinedException();
                    }

                    return (dynamic_cast<ProviderState&>(*_state));
                };

                void AC()
                {
                    (getState()).AC(*this);
                };

                void ACA()
                {
                    (getState()).ACA(*this);
                };

                void ARP()
                {
                    (getState()).ARP(*this);
                };

                void ARU()
                {
                    (getState()).ARU(*this);
                };

                void CP()
                {
                    (getState()).CP(*this);
                };

                void CPA()
                {
                    (getState()).CPA(*this);
                };

                void CPR()
                {
                    (getState()).CPR(*this);
                };

                void P_ACTDind()
                {
                    (getState()).P_ACTDind(*this);
                };

                void P_ACTDreq()
                {
                    (getState()).P_ACTDreq(*this);
                };

                void P_ACTDrsp()
                {
                    (getState()).P_ACTDrsp(*this);
                };

                void P_ACTEreq()
                {
                    (getState()).P_ACTEreq(*this);
                };

                void P_ACTErsp()
                {
                    (getState()).P_ACTErsp(*this);
                };

                void P_ACTIreq()
                {
                    (getState()).P_ACTIreq(*this);
                };

                void P_ACTIrsp()
                {
                    (getState()).P_ACTIrsp(*this);
                };

                void P_ACTRreq()
                {
                    (getState()).P_ACTRreq(*this);
                };

                void P_ACTSreq()
                {
                    (getState()).P_ACTSreq(*this);
                };

                void P_ALTERreq()
                {
                    (getState()).P_ALTERreq(*this);
                };

                void P_ALTERrsp()
                {
                    (getState()).P_ALTERrsp(*this);
                };

                void P_CDreq()
                {
                    (getState()).P_CDreq(*this);
                };

                void P_CDrsp()
                {
                    (getState()).P_CDrsp(*this);
                };

                void P_CGreq()
                {
                    (getState()).P_CGreq(*this);
                };

                void P_CONcnf(bool accept)
                {
                    (getState()).P_CONcnf(*this, accept);
                };

                void P_CONreq()
                {
                    (getState()).P_CONreq(*this);
                };

                void P_DTreq()
                {
                    (getState()).P_DTreq(*this);
                };

                void P_EXreq()
                {
                    (getState()).P_EXreq(*this);
                };

                void P_GTreq()
                {
                    (getState()).P_GTreq(*this);
                };

                void P_PTreq()
                {
                    (getState()).P_PTreq(*this);
                };

                void P_RELreq()
                {
                    (getState()).P_RELreq(*this);
                };

                void P_RELrsp(bool accept)
                {
                    (getState()).P_RELrsp(*this, accept);
                };

                void P_RSYNreq()
                {
                    (getState()).P_RSYNreq(*this);
                };

                void P_RSYNrsp()
                {
                    (getState()).P_RSYNrsp(*this);
                };

                void P_SYNMreq()
                {
                    (getState()).P_SYNMreq(*this);
                };

                void P_SYNMrsp()
                {
                    (getState()).P_SYNMrsp(*this);
                };

                void P_SYNmreq()
                {
                    (getState()).P_SYNmreq(*this);
                };

                void P_SYNmrsp()
                {
                    (getState()).P_SYNmrsp(*this);
                };

                void P_TDreq()
                {
                    (getState()).P_TDreq(*this);
                };

                void P_UABreq()
                {
                    (getState()).P_UABreq(*this);
                };

                void P_UERreq()
                {
                    (getState()).P_UERreq(*this);
                };

                void RS()
                {
                    (getState()).RS(*this);
                };

                void RSA()
                {
                    (getState()).RSA(*this);
                };

                void S_ACTDcnf()
                {
                    (getState()).S_ACTDcnf(*this);
                };

                void S_ACTDind()
                {
                    (getState()).S_ACTDind(*this);
                };

                void S_ACTEcnf()
                {
                    (getState()).S_ACTEcnf(*this);
                };

                void S_ACTEind()
                {
                    (getState()).S_ACTEind(*this);
                };

                void S_ACTIcnf()
                {
                    (getState()).S_ACTIcnf(*this);
                };

                void S_ACTIind()
                {
                    (getState()).S_ACTIind(*this);
                };

                void S_ACTRind()
                {
                    (getState()).S_ACTRind(*this);
                };

                void S_ACTSind()
                {
                    (getState()).S_ACTSind(*this);
                };

                void S_CGind()
                {
                    (getState()).S_CGind(*this);
                };

                void S_CONcnf(bool accept)
                {
                    (getState()).S_CONcnf(*this, accept);
                };

                void S_GTind()
                {
                    (getState()).S_GTind(*this);
                };

                void S_PABind()
                {
                    (getState()).S_PABind(*this);
                };

                void S_PERind()
                {
                    (getState()).S_PERind(*this);
                };

                void S_PTind()
                {
                    (getState()).S_PTind(*this);
                };

                void S_RELcnf(bool accept)
                {
                    (getState()).S_RELcnf(*this, accept);
                };

                void S_RELind()
                {
                    (getState()).S_RELind(*this);
                };

                void S_SYNMcnf()
                {
                    (getState()).S_SYNMcnf(*this);
                };

                void S_SYNMind()
                {
                    (getState()).S_SYNMind(*this);
                };

                void S_SYNmcnf()
                {
                    (getState()).S_SYNmcnf(*this);
                };

                void S_SYNmind()
                {
                    (getState()).S_SYNmind(*this);
                };

                void S_UERind()
                {
                    (getState()).S_UERind(*this);
                };

                void TC()
                {
                    (getState()).TC(*this);
                };

                void TCC()
                {
                    (getState()).TCC(*this);
                };

                void TD()
                {
                    (getState()).TD(*this);
                };

                void TE()
                {
                    (getState()).TE(*this);
                };

                void TTD()
                {
                    (getState()).TTD(*this);
                };

            private:

                Provider& _owner;
            };
        }

    }

}


#endif // _H_FSM_PSAP

/*
 * Local variables:
 *  buffer-read-only: t
 * End:
 */
