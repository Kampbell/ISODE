/*
 * ex: set ro:
 * DO NOT EDIT.
 * generated by smc (http://smc.sourceforge.net/)
 * from file : TSAP.sm
 */


namespace ALS {
	namespace TSAP {
		namespace TPDU {
			class CC;
			class CR; 
			class DT; 
			class DR; 
			class DC; 
			class EA; 
			class ED; 
			class AK;
			class RJ;
		} 
	}
}
namespace ALS { namespace TSAP { class Disconnect; } } 
using ALS::TSAP::Disconnect;


#include "Provider.h"
#include ".\FSM.h"

using namespace statemap;

namespace ALS
{
    namespace TSAP
    {
        namespace PROV
        {
            // Static class declarations.
            STATE_WFNC STATE::WFNC("STATE::WFNC", 0);
            STATE_WFCC STATE::WFCC("STATE::WFCC", 1);
            STATE_WBCL STATE::WBCL("STATE::WBCL", 2);
            STATE_OPEN STATE::OPEN("STATE::OPEN", 3);
            STATE_CLOSING STATE::CLOSING("STATE::CLOSING", 4);
            STATE_WFTRESP STATE::WFTRESP("STATE::WFTRESP", 5);
            STATE_CLOSED STATE::CLOSED("STATE::CLOSED", 6);
            STATE_WFNC_R STATE::WFNC_R("STATE::WFNC_R", 7);
            STATE_WFCC_R STATE::WFCC_R("STATE::WFCC_R", 8);
            STATE_WBCL_R STATE::WBCL_R("STATE::WBCL_R", 9);
            STATE_OPEN_R STATE::OPEN_R("STATE::OPEN_R", 10);
            STATE_OPEN_WR STATE::OPEN_WR("STATE::OPEN_WR", 11);
            STATE_CLOSING_R STATE::CLOSING_R("STATE::CLOSING_R", 12);
            STATE_CLOSING_WR STATE::CLOSING_WR("STATE::CLOSING_WR", 13);
            STATE_WFTRESP_WR STATE::WFTRESP_WR("STATE::WFTRESP_WR", 14);
            STATE_WBCL_WR STATE::WBCL_WR("STATE::WBCL_WR", 15);
            STATE_WBOC STATE::WBOC("STATE::WBOC", 16);
            STATE_WBOC_WR STATE::WBOC_WR("STATE::WBOC_WR", 17);
            STATE_CLOSING_BOC STATE::CLOSING_BOC("STATE::CLOSING_BOC", 18);
            STATE_CLOSING_BOC_WR STATE::CLOSING_BOC_WR("STATE::CLOSING_BOC_WR", 19);
            STATE_AKWAIT STATE::AKWAIT("STATE::AKWAIT", 20);
            STATE_REFWAIT STATE::REFWAIT("STATE::REFWAIT", 21);
            STATE_ERROR STATE::ERROR("STATE::ERROR", 22);

            void ProviderState::AK(FSM& context)
            {
                Default(context);
                return;
            }

            void ProviderState::CC(FSM& context)
            {
                Default(context);
                return;
            }

            void ProviderState::CR(FSM& context)
            {
                Default(context);
                return;
            }

            void ProviderState::DC(FSM& context)
            {
                Default(context);
                return;
            }

            void ProviderState::DR(FSM& context)
            {
                Default(context);
                return;
            }

            void ProviderState::DT(FSM& context)
            {
                Default(context);
                return;
            }

            void ProviderState::DT(FSM& context, shared_ptr<Buffer>& tsdu)
            {
                Default(context);
                return;
            }

            void ProviderState::EA(FSM& context)
            {
                Default(context);
                return;
            }

            void ProviderState::ED(FSM& context)
            {
                Default(context);
                return;
            }

            void ProviderState::ER(FSM& context)
            {
                Default(context);
                return;
            }

            void ProviderState::NCONconf(FSM& context)
            {
                Default(context);
                return;
            }

            void ProviderState::NCONconf(FSM& context, Buffer* tdsu)
            {
                Default(context);
                return;
            }

            void ProviderState::NDISind(FSM& context)
            {
                Default(context);
                return;
            }

            void ProviderState::NRSTind(FSM& context)
            {
                Default(context);
                return;
            }

            void ProviderState::RJ(FSM& context)
            {
                Default(context);
                return;
            }

            void ProviderState::TCONreq(FSM& context)
            {
                Default(context);
                return;
            }

            void ProviderState::TCONreq(FSM& context, TPDU::CR& tsdu)
            {
                Default(context);
                return;
            }

            void ProviderState::TCONresp(FSM& context)
            {
                Default(context);
                return;
            }

            void ProviderState::TCONresp(FSM& context, TPDU::CC& tsdu)
            {
                Default(context);
                return;
            }

            void ProviderState::TDISreq(FSM& context)
            {
                Default(context);
                return;
            }

            void ProviderState::TDISreq(FSM& context, TPDU::DR& tsdu)
            {
                Default(context);
                return;
            }

            void ProviderState::TDTreq(FSM& context)
            {
                Default(context);
                return;
            }

            void ProviderState::TDTreq(FSM& context, TPDU::DT& tsdu)
            {
                Default(context);
                return;
            }

            void ProviderState::TEXreq(FSM& context)
            {
                Default(context);
                return;
            }

            void ProviderState::Default(FSM& context)
            {
                throw (
                    TransitionUndefinedException(
                        context.getState().getName(),
                        context.getTransition()));

                return;
            }

            void STATE_WFNC::NCONconf(FSM& context, Buffer* tdsu)
            {
                Provider& ctxt = context.getOwner();
                context.setTransition("NCONconf");

                (context.getState()).Exit(context);
                context.clearState();
                try
                {
                    context.setState(STATE::WFCC);
            ctxt.CR(tdsu);
                }
                catch (...)
                {
                    context.setState(STATE::WFCC);
                    throw;
                }
                (context.getState()).Entry(context);

                return;
            }

            void STATE_WFNC::NDISind(FSM& context)
            {
                Provider& ctxt = context.getOwner();
                context.setTransition("NDISind");

                (context.getState()).Exit(context);
                context.clearState();
                try
                {
                    context.setState(STATE::CLOSED);
            ctxt.TDISind();
                }
                catch (...)
                {
                    context.setState(STATE::CLOSED);
                    throw;
                }
                (context.getState()).Entry(context);

                return;
            }

            void STATE_WFNC::TDISreq(FSM& context)
            {
                Provider& ctxt = context.getOwner();
                context.setTransition("TDISreq");

                (context.getState()).Exit(context);
                context.setState(STATE::CLOSED);
                (context.getState()).Entry(context);

                return;
            }

            void STATE_WFCC::CC(FSM& context)
            {
                Provider& ctxt = context.getOwner();
                context.setTransition("CC");

                if (ctxt.P8())
                {
                    (context.getState()).Exit(context);
                    context.clearState();
                    try
                    {
                        context.setState(STATE::OPEN);
            ctxt.TCONconf();
                    }
                    catch (...)
                    {
                        context.setState(STATE::OPEN);
                        throw;
                    }
                    (context.getState()).Entry(context);
                }
                else if (ctxt.P6() && ctxt.P5())
            
    {
                    (context.getState()).Exit(context);
                    context.clearState();
                    try
                    {
                        context.setState(STATE::CLOSED);
            ctxt.TDISind();
            ctxt.NDISreq(0);
                    }
                    catch (...)
                    {
                        context.setState(STATE::CLOSED);
                        throw;
                    }
                    (context.getState()).Entry(context);
                }                else
                {
                     STATE_Default::CC(context);
                }

                return;
            }

            void STATE_WFCC::DR(FSM& context)
            {
                Provider& ctxt = context.getOwner();
                context.setTransition("DR");

                (context.getState()).Exit(context);
                context.clearState();
                try
                {
                    context.setState(STATE::CLOSED);
            ctxt.TDISind();
                }
                catch (...)
                {
                    context.setState(STATE::CLOSED);
                    throw;
                }
                (context.getState()).Entry(context);

                return;
            }

            void STATE_WFCC::NDISind(FSM& context)
            {
                Provider& ctxt = context.getOwner();
                context.setTransition("NDISind");

                (context.getState()).Exit(context);
                context.clearState();
                try
                {
                    context.setState(STATE::CLOSED);
            ctxt.TDISind();
                }
                catch (...)
                {
                    context.setState(STATE::CLOSED);
                    throw;
                }
                (context.getState()).Entry(context);

                return;
            }

            void STATE_WFCC::NRSTind(FSM& context)
            {
                Provider& ctxt = context.getOwner();
                context.setTransition("NRSTind");

                (context.getState()).Exit(context);
                context.clearState();
                try
                {
                    context.setState(STATE::CLOSED);
            ctxt.TDISind(Disconnect::DR_NETWORK, "Network reset");
                }
                catch (...)
                {
                    context.setState(STATE::CLOSED);
                    throw;
                }
                (context.getState()).Entry(context);

                return;
            }

            void STATE_WFCC::TDISreq(FSM& context)
            {
                Provider& ctxt = context.getOwner();
                context.setTransition("TDISreq");

                if (!ctxt.P7())
                {
                    (context.getState()).Exit(context);
                    context.clearState();
                    try
                    {
                        context.setState(STATE::CLOSED);
            ctxt.NDISreq(0);
                    }
                    catch (...)
                    {
                        context.setState(STATE::CLOSED);
                        throw;
                    }
                    (context.getState()).Entry(context);
                }
                else if (ctxt.P7())
            
    {
                    (context.getState()).Exit(context);
                    // No actions.
                    context.setState(STATE::WBCL);
                    (context.getState()).Entry(context);
                }                else
                {
                     STATE_Default::TDISreq(context);
                }

                return;
            }

            void STATE_OPEN::CR(FSM& context)
            {
                Provider& ctxt = context.getOwner();
                context.setTransition("CR");

                if (ctxt.P9())
                {
                    (context.getState()).Exit(context);
                    // No actions.
                    context.setState(STATE::OPEN);
                    (context.getState()).Entry(context);
                }
                else
                {
                     STATE_Default::CR(context);
                }

                return;
            }

            void STATE_OPEN::DR(FSM& context)
            {
                Provider& ctxt = context.getOwner();
                context.setTransition("DR");

                if (ctxt.P5())
                {
                    (context.getState()).Exit(context);
                    // No actions.
                    context.setState(STATE::ERROR);
                    (context.getState()).Entry(context);
                }
                else
                {
                     STATE_Default::DR(context);
                }

                return;
            }

            void STATE_OPEN::DT(FSM& context, shared_ptr<Buffer>& tsdu)
            {
                Provider& ctxt = context.getOwner();
                context.setTransition("DT");

                (context.getState()).Exit(context);
                context.clearState();
                try
                {
                    context.setState(STATE::OPEN);
            ctxt.TDTind(tsdu);
                }
                catch (...)
                {
                    context.setState(STATE::OPEN);
                    throw;
                }
                (context.getState()).Entry(context);

                return;
            }

            void STATE_OPEN::NDISind(FSM& context)
            {
                Provider& ctxt = context.getOwner();
                context.setTransition("NDISind");

                (context.getState()).Exit(context);
                context.clearState();
                try
                {
                    context.setState(STATE::CLOSED);
            ctxt.TDISind();
                }
                catch (...)
                {
                    context.setState(STATE::CLOSED);
                    throw;
                }
                (context.getState()).Entry(context);

                return;
            }

            void STATE_OPEN::NRSTind(FSM& context)
            {
                Provider& ctxt = context.getOwner();
                context.setTransition("NRSTind");

                (context.getState()).Exit(context);
                context.clearState();
                try
                {
                    context.setState(STATE::CLOSED);
            ctxt.TDISind(Disconnect::DR_NETWORK);
                }
                catch (...)
                {
                    context.setState(STATE::CLOSED);
                    throw;
                }
                (context.getState()).Entry(context);

                return;
            }

            void STATE_OPEN::TDISreq(FSM& context)
            {
                Provider& ctxt = context.getOwner();
                context.setTransition("TDISreq");

                if (ctxt.P5())
                {
                    (context.getState()).Exit(context);
                    context.clearState();
                    try
                    {
                        context.setState(STATE::CLOSED);
            ctxt.NDISreq(0);
                    }
                    catch (...)
                    {
                        context.setState(STATE::CLOSED);
                        throw;
                    }
                    (context.getState()).Entry(context);
                }
                else
                {
                     STATE_Default::TDISreq(context);
                }

                return;
            }

            void STATE_OPEN::TDISreq(FSM& context, TPDU::DR& tsdu)
            {
                Provider& ctxt = context.getOwner();
                context.setTransition("TDISreq");

                if (ctxt.P7())
                {
                    (context.getState()).Exit(context);
                    context.clearState();
                    try
                    {
                        context.setState(STATE::CLOSING);
            ctxt.DR(tsdu);
                    }
                    catch (...)
                    {
                        context.setState(STATE::CLOSING);
                        throw;
                    }
                    (context.getState()).Entry(context);
                }
                else
                {
                     STATE_Default::TDISreq(context, tsdu);
                }

                return;
            }

            void STATE_OPEN::TDTreq(FSM& context, TPDU::DT& tsdu)
            {
                Provider& ctxt = context.getOwner();
                context.setTransition("TDTreq");

                (context.getState()).Exit(context);
                context.clearState();
                try
                {
                    context.setState(STATE::OPEN);
            ctxt.DT(tsdu);
                }
                catch (...)
                {
                    context.setState(STATE::OPEN);
                    throw;
                }
                (context.getState()).Entry(context);

                return;
            }

            void STATE_WFTRESP::CR(FSM& context)
            {
                Provider& ctxt = context.getOwner();
                context.setTransition("CR");

                if (ctxt.P9())
                {
                    (context.getState()).Exit(context);
                    // No actions.
                    context.setState(STATE::WFTRESP);
                    (context.getState()).Entry(context);
                }
                else
                {
                     STATE_Default::CR(context);
                }

                return;
            }

            void STATE_WFTRESP::DR(FSM& context)
            {
                Provider& ctxt = context.getOwner();
                context.setTransition("DR");

                if (ctxt.P10())
                {
                    (context.getState()).Exit(context);
                    context.clearState();
                    try
                    {
                        context.setState(STATE::ERROR);
            ctxt.DC();
                    }
                    catch (...)
                    {
                        context.setState(STATE::ERROR);
                        throw;
                    }
                    (context.getState()).Entry(context);
                }
                else
                {
                     STATE_Default::DR(context);
                }

                return;
            }

            void STATE_WFTRESP::NDISind(FSM& context)
            {
                Provider& ctxt = context.getOwner();
                context.setTransition("NDISind");

                (context.getState()).Exit(context);
                context.clearState();
                try
                {
                    context.setState(STATE::CLOSED);
            ctxt.TDISind();
                }
                catch (...)
                {
                    context.setState(STATE::CLOSED);
                    throw;
                }
                (context.getState()).Entry(context);

                return;
            }

            void STATE_WFTRESP::NRSTind(FSM& context)
            {
                Provider& ctxt = context.getOwner();
                context.setTransition("NRSTind");

                (context.getState()).Exit(context);
                context.clearState();
                try
                {
                    context.setState(STATE::CLOSED);
            ctxt.TDISind();
                }
                catch (...)
                {
                    context.setState(STATE::CLOSED);
                    throw;
                }
                (context.getState()).Entry(context);

                return;
            }

            void STATE_WFTRESP::TCONresp(FSM& context, TPDU::CC& tsdu)
            {
                Provider& ctxt = context.getOwner();
                context.setTransition("TCONresp");

                (context.getState()).Exit(context);
                context.clearState();
                try
                {
                    context.setState(STATE::OPEN);
            ctxt.CC(tsdu);
                }
                catch (...)
                {
                    context.setState(STATE::OPEN);
                    throw;
                }
                (context.getState()).Entry(context);

                return;
            }

            void STATE_WFTRESP::TDISreq(FSM& context, TPDU::DR& tsdu)
            {
                Provider& ctxt = context.getOwner();
                context.setTransition("TDISreq");

                (context.getState()).Exit(context);
                context.clearState();
                try
                {
                    context.setState(STATE::CLOSED);
            ctxt.DR(tsdu);
                }
                catch (...)
                {
                    context.setState(STATE::CLOSED);
                    throw;
                }
                (context.getState()).Entry(context);

                return;
            }

            void STATE_CLOSED::AK(FSM& context)
            {
                Provider& ctxt = context.getOwner();
                context.setTransition("AK");

                (context.getState()).Exit(context);
                context.setState(STATE::CLOSED);
                (context.getState()).Entry(context);

                return;
            }

            void STATE_CLOSED::CC(FSM& context)
            {
                Provider& ctxt = context.getOwner();
                context.setTransition("CC");

                (context.getState()).Exit(context);
                context.clearState();
                try
                {
                    context.setState(STATE::CLOSED);
            ctxt.DR();
                }
                catch (...)
                {
                    context.setState(STATE::CLOSED);
                    throw;
                }
                (context.getState()).Entry(context);

                return;
            }

            void STATE_CLOSED::CR(FSM& context)
            {
                Provider& ctxt = context.getOwner();
                context.setTransition("CR");

                if (ctxt.P1())
                {
                    (context.getState()).Exit(context);
                    context.clearState();
                    try
                    {
                        context.setState(STATE::CLOSED);
            ctxt.DR();
                    }
                    catch (...)
                    {
                        context.setState(STATE::CLOSED);
                        throw;
                    }
                    (context.getState()).Entry(context);
                }
                else if (!ctxt.P1())
            
    {
                    (context.getState()).Exit(context);
                    context.clearState();
                    try
                    {
                        context.setState(STATE::WFTRESP);
            ctxt.TCONind();
                    }
                    catch (...)
                    {
                        context.setState(STATE::WFTRESP);
                        throw;
                    }
                    (context.getState()).Entry(context);
                }                else
                {
                     STATE_Default::CR(context);
                }

                return;
            }

            void STATE_CLOSED::DC(FSM& context)
            {
                Provider& ctxt = context.getOwner();
                context.setTransition("DC");

                (context.getState()).Exit(context);
                context.setState(STATE::CLOSED);
                (context.getState()).Entry(context);

                return;
            }

            void STATE_CLOSED::DR(FSM& context)
            {
                Provider& ctxt = context.getOwner();
                context.setTransition("DR");

                (context.getState()).Exit(context);
                context.setState(STATE::CLOSED);
                (context.getState()).Entry(context);

                return;
            }

            void STATE_CLOSED::DT(FSM& context)
            {
                Provider& ctxt = context.getOwner();
                context.setTransition("DT");

                (context.getState()).Exit(context);
                context.setState(STATE::CLOSED);
                (context.getState()).Entry(context);

                return;
            }

            void STATE_CLOSED::EA(FSM& context)
            {
                Provider& ctxt = context.getOwner();
                context.setTransition("EA");

                (context.getState()).Exit(context);
                context.setState(STATE::CLOSED);
                (context.getState()).Entry(context);

                return;
            }

            void STATE_CLOSED::ED(FSM& context)
            {
                Provider& ctxt = context.getOwner();
                context.setTransition("ED");

                (context.getState()).Exit(context);
                context.setState(STATE::CLOSED);
                (context.getState()).Entry(context);

                return;
            }

            void STATE_CLOSED::ER(FSM& context)
            {
                Provider& ctxt = context.getOwner();
                context.setTransition("ER");

                (context.getState()).Exit(context);
                context.setState(STATE::CLOSED);
                (context.getState()).Entry(context);

                return;
            }

            void STATE_CLOSED::TCONreq(FSM& context)
            {
                Provider& ctxt = context.getOwner();
                context.setTransition("TCONreq");

                if (ctxt.P0())
                {
                    (context.getState()).Exit(context);
                    context.clearState();
                    try
                    {
                        context.setState(STATE::CLOSED);
            ctxt.TDISind();
                    }
                    catch (...)
                    {
                        context.setState(STATE::CLOSED);
                        throw;
                    }
                    (context.getState()).Entry(context);
                }
                else if (ctxt.P2())
            
    {
                    (context.getState()).Exit(context);
                    context.clearState();
                    try
                    {
                        context.setState(STATE::WFNC);
            ctxt.NCONreq();
                    }
                    catch (...)
                    {
                        context.setState(STATE::WFNC);
                        throw;
                    }
                    (context.getState()).Entry(context);
                }
                else if (ctxt.P4())
            
    {
                    (context.getState()).Exit(context);
                    // No actions.
                    context.setState(STATE::WFNC);
                    (context.getState()).Entry(context);
                }                else
                {
                     STATE_Default::TCONreq(context);
                }

                return;
            }

            void STATE_CLOSED::TCONreq(FSM& context, TPDU::CR& tsdu)
            {
                Provider& ctxt = context.getOwner();
                context.setTransition("TCONreq");

                if (ctxt.P3())
                {
                    (context.getState()).Exit(context);
                    context.clearState();
                    try
                    {
                        context.setState(STATE::WFCC);
            ctxt.CR(tsdu);
                    }
                    catch (...)
                    {
                        context.setState(STATE::WFCC);
                        throw;
                    }
                    (context.getState()).Entry(context);
                }
                else
                {
                     STATE_Default::TCONreq(context, tsdu);
                }

                return;
            }

            void STATE_ERROR::AK(FSM& context)
            {
                Provider& ctxt = context.getOwner();
                context.setTransition("AK");


                return;
            }

            void STATE_ERROR::CC(FSM& context)
            {
                Provider& ctxt = context.getOwner();
                context.setTransition("CC");


                return;
            }

            void STATE_ERROR::CR(FSM& context)
            {
                Provider& ctxt = context.getOwner();
                context.setTransition("CR");


                return;
            }

            void STATE_ERROR::DC(FSM& context)
            {
                Provider& ctxt = context.getOwner();
                context.setTransition("DC");


                return;
            }

            void STATE_ERROR::DR(FSM& context)
            {
                Provider& ctxt = context.getOwner();
                context.setTransition("DR");


                return;
            }

            void STATE_ERROR::DT(FSM& context)
            {
                Provider& ctxt = context.getOwner();
                context.setTransition("DT");


                return;
            }

            void STATE_ERROR::EA(FSM& context)
            {
                Provider& ctxt = context.getOwner();
                context.setTransition("EA");


                return;
            }

            void STATE_ERROR::ED(FSM& context)
            {
                Provider& ctxt = context.getOwner();
                context.setTransition("ED");


                return;
            }

            void STATE_ERROR::ER(FSM& context)
            {
                Provider& ctxt = context.getOwner();
                context.setTransition("ER");


                return;
            }

            void STATE_ERROR::NCONconf(FSM& context)
            {
                Provider& ctxt = context.getOwner();
                context.setTransition("NCONconf");


                return;
            }

            void STATE_ERROR::NDISind(FSM& context)
            {
                Provider& ctxt = context.getOwner();
                context.setTransition("NDISind");


                return;
            }

            void STATE_ERROR::NRSTind(FSM& context)
            {
                Provider& ctxt = context.getOwner();
                context.setTransition("NRSTind");


                return;
            }

            void STATE_ERROR::RJ(FSM& context)
            {
                Provider& ctxt = context.getOwner();
                context.setTransition("RJ");


                return;
            }

            void STATE_ERROR::TCONreq(FSM& context)
            {
                Provider& ctxt = context.getOwner();
                context.setTransition("TCONreq");


                return;
            }

            void STATE_ERROR::TCONresp(FSM& context)
            {
                Provider& ctxt = context.getOwner();
                context.setTransition("TCONresp");


                return;
            }

            void STATE_ERROR::TDISreq(FSM& context)
            {
                Provider& ctxt = context.getOwner();
                context.setTransition("TDISreq");


                return;
            }

            void STATE_ERROR::TDTreq(FSM& context)
            {
                Provider& ctxt = context.getOwner();
                context.setTransition("TDTreq");


                return;
            }

            void STATE_ERROR::TEXreq(FSM& context)
            {
                Provider& ctxt = context.getOwner();
                context.setTransition("TEXreq");


                return;
            }
        }
    }
}

/*
 * Local variables:
 *  buffer-read-only: t
 * End:
 */
