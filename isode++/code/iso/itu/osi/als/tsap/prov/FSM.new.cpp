//
// ex: set ro:
// DO NOT EDIT.
// generated by smc (http://smc.sourceforge.net/)
// from file : TSAP.sm
//

#include "Provider.h"
#include "FSM.h"

using namespace statemap;

namespace ALS
{
    namespace TSAP
    {
        namespace PROV
        {
            // Static class declarations.
            TSAP_WFNC TSAP::WFNC("TSAP::WFNC", 0);
            TSAP_WFCC TSAP::WFCC("TSAP::WFCC", 1);
            TSAP_WBCL TSAP::WBCL("TSAP::WBCL", 2);
            TSAP_OPEN TSAP::OPEN("TSAP::OPEN", 3);
            TSAP_CLOSING TSAP::CLOSING("TSAP::CLOSING", 4);
            TSAP_WFTRESP TSAP::WFTRESP("TSAP::WFTRESP", 5);
            TSAP_CLOSED TSAP::CLOSED("TSAP::CLOSED", 6);
            TSAP_WFNC_R TSAP::WFNC_R("TSAP::WFNC_R", 7);
            TSAP_WFCC_R TSAP::WFCC_R("TSAP::WFCC_R", 8);
            TSAP_WBCL_R TSAP::WBCL_R("TSAP::WBCL_R", 9);
            TSAP_OPEN_R TSAP::OPEN_R("TSAP::OPEN_R", 10);
            TSAP_OPEN_WR TSAP::OPEN_WR("TSAP::OPEN_WR", 11);
            TSAP_CLOSING_R TSAP::CLOSING_R("TSAP::CLOSING_R", 12);
            TSAP_CLOSING_WR TSAP::CLOSING_WR("TSAP::CLOSING_WR", 13);
            TSAP_WFTRESP_WR TSAP::WFTRESP_WR("TSAP::WFTRESP_WR", 14);
            TSAP_WBCL_WR TSAP::WBCL_WR("TSAP::WBCL_WR", 15);
            TSAP_WBOC TSAP::WBOC("TSAP::WBOC", 16);
            TSAP_WBOC_WR TSAP::WBOC_WR("TSAP::WBOC_WR", 17);
            TSAP_CLOSING_BOC TSAP::CLOSING_BOC("TSAP::CLOSING_BOC", 18);
            TSAP_CLOSING_BOC_WR TSAP::CLOSING_BOC_WR("TSAP::CLOSING_BOC_WR", 19);
            TSAP_AKWAIT TSAP::AKWAIT("TSAP::AKWAIT", 20);
            TSAP_REFWAIT TSAP::REFWAIT("TSAP::REFWAIT", 21);
            TSAP_ERROR TSAP::ERROR("TSAP::ERROR", 22);

            void ProviderState::AK(FSM<Provider>& context)
            {
                Default(context);
            }

            void ProviderState::CC(FSM<Provider>& context)
            {
                Default(context);
            }

            void ProviderState::CR(FSM<Provider>& context)
            {
                Default(context);
            }

            void ProviderState::DC(FSM<Provider>& context)
            {
                Default(context);
            }

            void ProviderState::DR(FSM<Provider>& context)
            {
                Default(context);
            }

            void ProviderState::DT(FSM<Provider>& context)
            {
                Default(context);
            }

            void ProviderState::DT(FSM<Provider>& context, shared_ptr<Buffer>& tsdu)
            {
                Default(context);
            }

            void ProviderState::EA(FSM<Provider>& context)
            {
                Default(context);
            }

            void ProviderState::ED(FSM<Provider>& context)
            {
                Default(context);
            }

            void ProviderState::ER(FSM<Provider>& context)
            {
                Default(context);
            }

            void ProviderState::NCONconf(FSM<Provider>& context)
            {
                Default(context);
            }

            void ProviderState::NCONconf(FSM<Provider>& context, Buffer* tdsu)
            {
                Default(context);
            }

            void ProviderState::NDISind(FSM<Provider>& context)
            {
                Default(context);
            }

            void ProviderState::NRSTind(FSM<Provider>& context)
            {
                Default(context);
            }

            void ProviderState::RJ(FSM<Provider>& context)
            {
                Default(context);
            }

            void ProviderState::TCONreq(FSM<Provider>& context)
            {
                Default(context);
            }

            void ProviderState::TCONreq(FSM<Provider>& context, TPDU::CR& tsdu)
            {
                Default(context);
            }

            void ProviderState::TCONresp(FSM<Provider>& context)
            {
                Default(context);
            }

            void ProviderState::TCONresp(FSM<Provider>& context, TPDU::CC& tsdu)
            {
                Default(context);
            }

            void ProviderState::TDISreq(FSM<Provider>& context)
            {
                Default(context);
            }

            void ProviderState::TDISreq(FSM<Provider>& context, TPDU::DR& tsdu)
            {
                Default(context);
            }

            void ProviderState::TDTreq(FSM<Provider>& context)
            {
                Default(context);
            }

            void ProviderState::TDTreq(FSM<Provider>& context, TPDU::DT& tsdu)
            {
                Default(context);
            }

            void ProviderState::TEXreq(FSM<Provider>& context)
            {
                Default(context);
            }

            void ProviderState::Default(FSM<Provider>& context)
            {
                if (context.getDebugFlag())
                {
                    std::ostream& str = context.getDebugStream();

                    str << "TRANSITION   : Default"
                        << std::endl;
                }

                throw (
                    TransitionUndefinedException(
                        context.getState().getName(),
                        context.getTransition()));

            }

            void TSAP_WFNC::NCONconf(FSM<Provider>& context, Buffer* tdsu)
            {
                Provider& ctxt = context.getOwner();

                if (context.getDebugFlag())
                {
                    std::ostream& str = context.getDebugStream();

                    str << "LEAVING STATE   : TSAP::WFNC"
                << std::endl;
                }

                context.getState().Exit(context);
                if (context.getDebugFlag())
                {
                    std::ostream& str = context.getDebugStream();

                    str << "ENTER TRANSITION: TSAP::WFNC::NCONconf(Buffer* tdsu)"
                        << std::endl;
                }

                context.clearState();
                try
                {
                    ctxt.CR(tdsu);
                    if (context.getDebugFlag())
                    {
                        std::ostream& str = context.getDebugStream();

                        str << "EXIT TRANSITION : TSAP::WFNC::NCONconf(Buffer* tdsu)"
                            << std::endl;
                    }

                    context.setState(TSAP::WFCC);
                }
                catch (...)
                {
                    context.setState(TSAP::WFCC);
                    throw;
                }
                context.getState().Entry(context);

            }

            void TSAP_WFNC::NDISind(FSM<Provider>& context)
            {
                Provider& ctxt = context.getOwner();

                if (context.getDebugFlag())
                {
                    std::ostream& str = context.getDebugStream();

                    str << "LEAVING STATE   : TSAP::WFNC"
                << std::endl;
                }

                context.getState().Exit(context);
                if (context.getDebugFlag())
                {
                    std::ostream& str = context.getDebugStream();

                    str << "ENTER TRANSITION: TSAP::WFNC::NDISind()"
                        << std::endl;
                }

                context.clearState();
                try
                {
                    ctxt.TDISind();
                    if (context.getDebugFlag())
                    {
                        std::ostream& str = context.getDebugStream();

                        str << "EXIT TRANSITION : TSAP::WFNC::NDISind()"
                            << std::endl;
                    }

                    context.setState(TSAP::CLOSED);
                }
                catch (...)
                {
                    context.setState(TSAP::CLOSED);
                    throw;
                }
                context.getState().Entry(context);

            }

            void TSAP_WFNC::TDISreq(FSM<Provider>& context)
            {

                if (context.getDebugFlag())
                {
                    std::ostream& str = context.getDebugStream();

                    str << "LEAVING STATE   : TSAP::WFNC"
                << std::endl;
                }

                context.getState().Exit(context);
                if (context.getDebugFlag())
                {
                    std::ostream& str = context.getDebugStream();

                    str << "ENTER TRANSITION: TSAP::WFNC::TDISreq()"
                        << std::endl;
                }

                if (context.getDebugFlag())
                {
                    std::ostream& str = context.getDebugStream();

                    str << "EXIT TRANSITION : TSAP::WFNC::TDISreq()"
                        << std::endl;
                }

                context.setState(TSAP::CLOSED);
                context.getState().Entry(context);

            }

            void TSAP_WFCC::CC(FSM<Provider>& context)
            {
                Provider& ctxt = context.getOwner();

                if (context.getDebugFlag())
                {
                    std::ostream& str = context.getDebugStream();

                    str << "LEAVING STATE   : TSAP::WFCC"
                << std::endl;
                }

                if (P8())
                {
                    context.getState().Exit(context);
                    if (context.getDebugFlag())
                    {
                        std::ostream& str = context.getDebugStream();

                        str << "ENTER TRANSITION: TSAP::WFCC::CC()"
                            << std::endl;
                    }

                    context.clearState();
                    try
                    {
                        ctxt.TCONconf();
                        if (context.getDebugFlag())
                        {
                            std::ostream& str = context.getDebugStream();

                            str << "EXIT TRANSITION : TSAP::WFCC::CC()"
                                << std::endl;
                        }

                        context.setState(TSAP::OPEN);
                    }
                    catch (...)
                    {
                        context.setState(TSAP::OPEN);
                        throw;
                    }
                    context.getState().Entry(context);
                }
                else if (P6() && P5())
            
    {
                    context.getState().Exit(context);
                    if (context.getDebugFlag())
                    {
                        std::ostream& str = context.getDebugStream();

                        str << "ENTER TRANSITION: TSAP::WFCC::CC()"
                            << std::endl;
                    }

                    context.clearState();
                    try
                    {
                        ctxt.TDISind();
                        ctxt.NDISreq(0);
                        if (context.getDebugFlag())
                        {
                            std::ostream& str = context.getDebugStream();

                            str << "EXIT TRANSITION : TSAP::WFCC::CC()"
                                << std::endl;
                        }

                        context.setState(TSAP::CLOSED);
                    }
                    catch (...)
                    {
                        context.setState(TSAP::CLOSED);
                        throw;
                    }
                    context.getState().Entry(context);
                }                else
                {
                     TSAP_Default::CC(context);
                }

            }

            void TSAP_WFCC::DR(FSM<Provider>& context)
            {
                Provider& ctxt = context.getOwner();

                if (context.getDebugFlag())
                {
                    std::ostream& str = context.getDebugStream();

                    str << "LEAVING STATE   : TSAP::WFCC"
                << std::endl;
                }

                context.getState().Exit(context);
                if (context.getDebugFlag())
                {
                    std::ostream& str = context.getDebugStream();

                    str << "ENTER TRANSITION: TSAP::WFCC::DR()"
                        << std::endl;
                }

                context.clearState();
                try
                {
                    ctxt.TDISind();
                    if (context.getDebugFlag())
                    {
                        std::ostream& str = context.getDebugStream();

                        str << "EXIT TRANSITION : TSAP::WFCC::DR()"
                            << std::endl;
                    }

                    context.setState(TSAP::CLOSED);
                }
                catch (...)
                {
                    context.setState(TSAP::CLOSED);
                    throw;
                }
                context.getState().Entry(context);

            }

            void TSAP_WFCC::NDISind(FSM<Provider>& context)
            {
                Provider& ctxt = context.getOwner();

                if (context.getDebugFlag())
                {
                    std::ostream& str = context.getDebugStream();

                    str << "LEAVING STATE   : TSAP::WFCC"
                << std::endl;
                }

                context.getState().Exit(context);
                if (context.getDebugFlag())
                {
                    std::ostream& str = context.getDebugStream();

                    str << "ENTER TRANSITION: TSAP::WFCC::NDISind()"
                        << std::endl;
                }

                context.clearState();
                try
                {
                    ctxt.TDISind();
                    if (context.getDebugFlag())
                    {
                        std::ostream& str = context.getDebugStream();

                        str << "EXIT TRANSITION : TSAP::WFCC::NDISind()"
                            << std::endl;
                    }

                    context.setState(TSAP::CLOSED);
                }
                catch (...)
                {
                    context.setState(TSAP::CLOSED);
                    throw;
                }
                context.getState().Entry(context);

            }

            void TSAP_WFCC::NRSTind(FSM<Provider>& context)
            {
                Provider& ctxt = context.getOwner();

                if (context.getDebugFlag())
                {
                    std::ostream& str = context.getDebugStream();

                    str << "LEAVING STATE   : TSAP::WFCC"
                << std::endl;
                }

                context.getState().Exit(context);
                if (context.getDebugFlag())
                {
                    std::ostream& str = context.getDebugStream();

                    str << "ENTER TRANSITION: TSAP::WFCC::NRSTind()"
                        << std::endl;
                }

                context.clearState();
                try
                {
                    ctxt.TDISind(Disconnect::DR_NETWORK, "Network reset");
                    if (context.getDebugFlag())
                    {
                        std::ostream& str = context.getDebugStream();

                        str << "EXIT TRANSITION : TSAP::WFCC::NRSTind()"
                            << std::endl;
                    }

                    context.setState(TSAP::CLOSED);
                }
                catch (...)
                {
                    context.setState(TSAP::CLOSED);
                    throw;
                }
                context.getState().Entry(context);

            }

            void TSAP_WFCC::TDISreq(FSM<Provider>& context)
            {
                Provider& ctxt = context.getOwner();

                if (context.getDebugFlag())
                {
                    std::ostream& str = context.getDebugStream();

                    str << "LEAVING STATE   : TSAP::WFCC"
                << std::endl;
                }

                if (!P7())
                {
                    context.getState().Exit(context);
                    if (context.getDebugFlag())
                    {
                        std::ostream& str = context.getDebugStream();

                        str << "ENTER TRANSITION: TSAP::WFCC::TDISreq()"
                            << std::endl;
                    }

                    context.clearState();
                    try
                    {
                        ctxt.NDISreq(0);
                        if (context.getDebugFlag())
                        {
                            std::ostream& str = context.getDebugStream();

                            str << "EXIT TRANSITION : TSAP::WFCC::TDISreq()"
                                << std::endl;
                        }

                        context.setState(TSAP::CLOSED);
                    }
                    catch (...)
                    {
                        context.setState(TSAP::CLOSED);
                        throw;
                    }
                    context.getState().Entry(context);
                }
                else if (P7())
            
    {
                    context.getState().Exit(context);
                    if (context.getDebugFlag())
                    {
                        std::ostream& str = context.getDebugStream();

                        str << "ENTER TRANSITION: TSAP::WFCC::TDISreq()"
                            << std::endl;
                    }

                    // No actions.
                    if (context.getDebugFlag())
                    {
                        std::ostream& str = context.getDebugStream();

                        str << "EXIT TRANSITION : TSAP::WFCC::TDISreq()"
                            << std::endl;
                    }

                    context.setState(TSAP::WBCL);
                    context.getState().Entry(context);
                }                else
                {
                     TSAP_Default::TDISreq(context);
                }

            }

            void TSAP_OPEN::CR(FSM<Provider>& context)
            {

                if (context.getDebugFlag())
                {
                    std::ostream& str = context.getDebugStream();

                    str << "LEAVING STATE   : TSAP::OPEN"
                << std::endl;
                }

                if (P9())
                {
                    context.getState().Exit(context);
                    if (context.getDebugFlag())
                    {
                        std::ostream& str = context.getDebugStream();

                        str << "ENTER TRANSITION: TSAP::OPEN::CR()"
                            << std::endl;
                    }

                    // No actions.
                    if (context.getDebugFlag())
                    {
                        std::ostream& str = context.getDebugStream();

                        str << "EXIT TRANSITION : TSAP::OPEN::CR()"
                            << std::endl;
                    }

                    context.setState(TSAP::OPEN);
                    context.getState().Entry(context);
                }
                else
                {
                     TSAP_Default::CR(context);
                }

            }

            void TSAP_OPEN::DR(FSM<Provider>& context)
            {

                if (context.getDebugFlag())
                {
                    std::ostream& str = context.getDebugStream();

                    str << "LEAVING STATE   : TSAP::OPEN"
                << std::endl;
                }

                if (P5())
                {
                    context.getState().Exit(context);
                    if (context.getDebugFlag())
                    {
                        std::ostream& str = context.getDebugStream();

                        str << "ENTER TRANSITION: TSAP::OPEN::DR()"
                            << std::endl;
                    }

                    // No actions.
                    if (context.getDebugFlag())
                    {
                        std::ostream& str = context.getDebugStream();

                        str << "EXIT TRANSITION : TSAP::OPEN::DR()"
                            << std::endl;
                    }

                    context.setState(TSAP::ERROR);
                    context.getState().Entry(context);
                }
                else
                {
                     TSAP_Default::DR(context);
                }

            }

            void TSAP_OPEN::DT(FSM<Provider>& context, shared_ptr<Buffer>& tsdu)
            {
                Provider& ctxt = context.getOwner();

                if (context.getDebugFlag())
                {
                    std::ostream& str = context.getDebugStream();

                    str << "LEAVING STATE   : TSAP::OPEN"
                << std::endl;
                }

                context.getState().Exit(context);
                if (context.getDebugFlag())
                {
                    std::ostream& str = context.getDebugStream();

                    str << "ENTER TRANSITION: TSAP::OPEN::DT(shared_ptr<Buffer>& tsdu)"
                        << std::endl;
                }

                context.clearState();
                try
                {
                    ctxt.TDTind(tsdu);
                    if (context.getDebugFlag())
                    {
                        std::ostream& str = context.getDebugStream();

                        str << "EXIT TRANSITION : TSAP::OPEN::DT(shared_ptr<Buffer>& tsdu)"
                            << std::endl;
                    }

                    context.setState(TSAP::OPEN);
                }
                catch (...)
                {
                    context.setState(TSAP::OPEN);
                    throw;
                }
                context.getState().Entry(context);

            }

            void TSAP_OPEN::NDISind(FSM<Provider>& context)
            {
                Provider& ctxt = context.getOwner();

                if (context.getDebugFlag())
                {
                    std::ostream& str = context.getDebugStream();

                    str << "LEAVING STATE   : TSAP::OPEN"
                << std::endl;
                }

                context.getState().Exit(context);
                if (context.getDebugFlag())
                {
                    std::ostream& str = context.getDebugStream();

                    str << "ENTER TRANSITION: TSAP::OPEN::NDISind()"
                        << std::endl;
                }

                context.clearState();
                try
                {
                    ctxt.TDISind();
                    if (context.getDebugFlag())
                    {
                        std::ostream& str = context.getDebugStream();

                        str << "EXIT TRANSITION : TSAP::OPEN::NDISind()"
                            << std::endl;
                    }

                    context.setState(TSAP::CLOSED);
                }
                catch (...)
                {
                    context.setState(TSAP::CLOSED);
                    throw;
                }
                context.getState().Entry(context);

            }

            void TSAP_OPEN::NRSTind(FSM<Provider>& context)
            {
                Provider& ctxt = context.getOwner();

                if (context.getDebugFlag())
                {
                    std::ostream& str = context.getDebugStream();

                    str << "LEAVING STATE   : TSAP::OPEN"
                << std::endl;
                }

                context.getState().Exit(context);
                if (context.getDebugFlag())
                {
                    std::ostream& str = context.getDebugStream();

                    str << "ENTER TRANSITION: TSAP::OPEN::NRSTind()"
                        << std::endl;
                }

                context.clearState();
                try
                {
                    ctxt.TDISind(Disconnect::DR_NETWORK);
                    if (context.getDebugFlag())
                    {
                        std::ostream& str = context.getDebugStream();

                        str << "EXIT TRANSITION : TSAP::OPEN::NRSTind()"
                            << std::endl;
                    }

                    context.setState(TSAP::CLOSED);
                }
                catch (...)
                {
                    context.setState(TSAP::CLOSED);
                    throw;
                }
                context.getState().Entry(context);

            }

            void TSAP_OPEN::TDISreq(FSM<Provider>& context)
            {
                Provider& ctxt = context.getOwner();

                if (context.getDebugFlag())
                {
                    std::ostream& str = context.getDebugStream();

                    str << "LEAVING STATE   : TSAP::OPEN"
                << std::endl;
                }

                if (P5())
                {
                    context.getState().Exit(context);
                    if (context.getDebugFlag())
                    {
                        std::ostream& str = context.getDebugStream();

                        str << "ENTER TRANSITION: TSAP::OPEN::TDISreq()"
                            << std::endl;
                    }

                    context.clearState();
                    try
                    {
                        ctxt.NDISreq(0);
                        if (context.getDebugFlag())
                        {
                            std::ostream& str = context.getDebugStream();

                            str << "EXIT TRANSITION : TSAP::OPEN::TDISreq()"
                                << std::endl;
                        }

                        context.setState(TSAP::CLOSED);
                    }
                    catch (...)
                    {
                        context.setState(TSAP::CLOSED);
                        throw;
                    }
                    context.getState().Entry(context);
                }
                else
                {
                     TSAP_Default::TDISreq(context);
                }

            }

            void TSAP_OPEN::TDISreq(FSM<Provider>& context, TPDU::DR& tsdu)
            {
                Provider& ctxt = context.getOwner();

                if (context.getDebugFlag())
                {
                    std::ostream& str = context.getDebugStream();

                    str << "LEAVING STATE   : TSAP::OPEN"
                << std::endl;
                }

                if (P7())
                {
                    context.getState().Exit(context);
                    if (context.getDebugFlag())
                    {
                        std::ostream& str = context.getDebugStream();

                        str << "ENTER TRANSITION: TSAP::OPEN::TDISreq(TPDU::DR& tsdu)"
                            << std::endl;
                    }

                    context.clearState();
                    try
                    {
                        ctxt.DR(tsdu);
                        if (context.getDebugFlag())
                        {
                            std::ostream& str = context.getDebugStream();

                            str << "EXIT TRANSITION : TSAP::OPEN::TDISreq(TPDU::DR& tsdu)"
                                << std::endl;
                        }

                        context.setState(TSAP::CLOSING);
                    }
                    catch (...)
                    {
                        context.setState(TSAP::CLOSING);
                        throw;
                    }
                    context.getState().Entry(context);
                }
                else
                {
                     TSAP_Default::TDISreq(context, tsdu);
                }

            }

            void TSAP_OPEN::TDTreq(FSM<Provider>& context, TPDU::DT& tsdu)
            {
                Provider& ctxt = context.getOwner();

                if (context.getDebugFlag())
                {
                    std::ostream& str = context.getDebugStream();

                    str << "LEAVING STATE   : TSAP::OPEN"
                << std::endl;
                }

                context.getState().Exit(context);
                if (context.getDebugFlag())
                {
                    std::ostream& str = context.getDebugStream();

                    str << "ENTER TRANSITION: TSAP::OPEN::TDTreq(TPDU::DT& tsdu)"
                        << std::endl;
                }

                context.clearState();
                try
                {
                    ctxt.DT(tsdu);
                    if (context.getDebugFlag())
                    {
                        std::ostream& str = context.getDebugStream();

                        str << "EXIT TRANSITION : TSAP::OPEN::TDTreq(TPDU::DT& tsdu)"
                            << std::endl;
                    }

                    context.setState(TSAP::OPEN);
                }
                catch (...)
                {
                    context.setState(TSAP::OPEN);
                    throw;
                }
                context.getState().Entry(context);

            }

            void TSAP_WFTRESP::CR(FSM<Provider>& context)
            {

                if (context.getDebugFlag())
                {
                    std::ostream& str = context.getDebugStream();

                    str << "LEAVING STATE   : TSAP::WFTRESP"
                << std::endl;
                }

                if (P9())
                {
                    context.getState().Exit(context);
                    if (context.getDebugFlag())
                    {
                        std::ostream& str = context.getDebugStream();

                        str << "ENTER TRANSITION: TSAP::WFTRESP::CR()"
                            << std::endl;
                    }

                    // No actions.
                    if (context.getDebugFlag())
                    {
                        std::ostream& str = context.getDebugStream();

                        str << "EXIT TRANSITION : TSAP::WFTRESP::CR()"
                            << std::endl;
                    }

                    context.setState(TSAP::WFTRESP);
                    context.getState().Entry(context);
                }
                else
                {
                     TSAP_Default::CR(context);
                }

            }

            void TSAP_WFTRESP::DR(FSM<Provider>& context)
            {
                Provider& ctxt = context.getOwner();

                if (context.getDebugFlag())
                {
                    std::ostream& str = context.getDebugStream();

                    str << "LEAVING STATE   : TSAP::WFTRESP"
                << std::endl;
                }

                if (P10())
                {
                    context.getState().Exit(context);
                    if (context.getDebugFlag())
                    {
                        std::ostream& str = context.getDebugStream();

                        str << "ENTER TRANSITION: TSAP::WFTRESP::DR()"
                            << std::endl;
                    }

                    context.clearState();
                    try
                    {
                        ctxt.DC();
                        if (context.getDebugFlag())
                        {
                            std::ostream& str = context.getDebugStream();

                            str << "EXIT TRANSITION : TSAP::WFTRESP::DR()"
                                << std::endl;
                        }

                        context.setState(TSAP::ERROR);
                    }
                    catch (...)
                    {
                        context.setState(TSAP::ERROR);
                        throw;
                    }
                    context.getState().Entry(context);
                }
                else
                {
                     TSAP_Default::DR(context);
                }

            }

            void TSAP_WFTRESP::NDISind(FSM<Provider>& context)
            {
                Provider& ctxt = context.getOwner();

                if (context.getDebugFlag())
                {
                    std::ostream& str = context.getDebugStream();

                    str << "LEAVING STATE   : TSAP::WFTRESP"
                << std::endl;
                }

                context.getState().Exit(context);
                if (context.getDebugFlag())
                {
                    std::ostream& str = context.getDebugStream();

                    str << "ENTER TRANSITION: TSAP::WFTRESP::NDISind()"
                        << std::endl;
                }

                context.clearState();
                try
                {
                    ctxt.TDISind();
                    if (context.getDebugFlag())
                    {
                        std::ostream& str = context.getDebugStream();

                        str << "EXIT TRANSITION : TSAP::WFTRESP::NDISind()"
                            << std::endl;
                    }

                    context.setState(TSAP::CLOSED);
                }
                catch (...)
                {
                    context.setState(TSAP::CLOSED);
                    throw;
                }
                context.getState().Entry(context);

            }

            void TSAP_WFTRESP::NRSTind(FSM<Provider>& context)
            {
                Provider& ctxt = context.getOwner();

                if (context.getDebugFlag())
                {
                    std::ostream& str = context.getDebugStream();

                    str << "LEAVING STATE   : TSAP::WFTRESP"
                << std::endl;
                }

                context.getState().Exit(context);
                if (context.getDebugFlag())
                {
                    std::ostream& str = context.getDebugStream();

                    str << "ENTER TRANSITION: TSAP::WFTRESP::NRSTind()"
                        << std::endl;
                }

                context.clearState();
                try
                {
                    ctxt.TDISind();
                    if (context.getDebugFlag())
                    {
                        std::ostream& str = context.getDebugStream();

                        str << "EXIT TRANSITION : TSAP::WFTRESP::NRSTind()"
                            << std::endl;
                    }

                    context.setState(TSAP::CLOSED);
                }
                catch (...)
                {
                    context.setState(TSAP::CLOSED);
                    throw;
                }
                context.getState().Entry(context);

            }

            void TSAP_WFTRESP::TCONresp(FSM<Provider>& context, TPDU::CC& tsdu)
            {
                Provider& ctxt = context.getOwner();

                if (context.getDebugFlag())
                {
                    std::ostream& str = context.getDebugStream();

                    str << "LEAVING STATE   : TSAP::WFTRESP"
                << std::endl;
                }

                context.getState().Exit(context);
                if (context.getDebugFlag())
                {
                    std::ostream& str = context.getDebugStream();

                    str << "ENTER TRANSITION: TSAP::WFTRESP::TCONresp(TPDU::CC& tsdu)"
                        << std::endl;
                }

                context.clearState();
                try
                {
                    ctxt.CC(tsdu);
                    if (context.getDebugFlag())
                    {
                        std::ostream& str = context.getDebugStream();

                        str << "EXIT TRANSITION : TSAP::WFTRESP::TCONresp(TPDU::CC& tsdu)"
                            << std::endl;
                    }

                    context.setState(TSAP::OPEN);
                }
                catch (...)
                {
                    context.setState(TSAP::OPEN);
                    throw;
                }
                context.getState().Entry(context);

            }

            void TSAP_WFTRESP::TDISreq(FSM<Provider>& context, TPDU::DR& tsdu)
            {
                Provider& ctxt = context.getOwner();

                if (context.getDebugFlag())
                {
                    std::ostream& str = context.getDebugStream();

                    str << "LEAVING STATE   : TSAP::WFTRESP"
                << std::endl;
                }

                context.getState().Exit(context);
                if (context.getDebugFlag())
                {
                    std::ostream& str = context.getDebugStream();

                    str << "ENTER TRANSITION: TSAP::WFTRESP::TDISreq(TPDU::DR& tsdu)"
                        << std::endl;
                }

                context.clearState();
                try
                {
                    ctxt.DR(tsdu);
                    if (context.getDebugFlag())
                    {
                        std::ostream& str = context.getDebugStream();

                        str << "EXIT TRANSITION : TSAP::WFTRESP::TDISreq(TPDU::DR& tsdu)"
                            << std::endl;
                    }

                    context.setState(TSAP::CLOSED);
                }
                catch (...)
                {
                    context.setState(TSAP::CLOSED);
                    throw;
                }
                context.getState().Entry(context);

            }

            void TSAP_CLOSED::AK(FSM<Provider>& context)
            {

                if (context.getDebugFlag())
                {
                    std::ostream& str = context.getDebugStream();

                    str << "LEAVING STATE   : TSAP::CLOSED"
                << std::endl;
                }

                context.getState().Exit(context);
                if (context.getDebugFlag())
                {
                    std::ostream& str = context.getDebugStream();

                    str << "ENTER TRANSITION: TSAP::CLOSED::AK()"
                        << std::endl;
                }

                if (context.getDebugFlag())
                {
                    std::ostream& str = context.getDebugStream();

                    str << "EXIT TRANSITION : TSAP::CLOSED::AK()"
                        << std::endl;
                }

                context.setState(TSAP::CLOSED);
                context.getState().Entry(context);

            }

            void TSAP_CLOSED::CC(FSM<Provider>& context)
            {
                Provider& ctxt = context.getOwner();

                if (context.getDebugFlag())
                {
                    std::ostream& str = context.getDebugStream();

                    str << "LEAVING STATE   : TSAP::CLOSED"
                << std::endl;
                }

                context.getState().Exit(context);
                if (context.getDebugFlag())
                {
                    std::ostream& str = context.getDebugStream();

                    str << "ENTER TRANSITION: TSAP::CLOSED::CC()"
                        << std::endl;
                }

                context.clearState();
                try
                {
                    ctxt.DR();
                    if (context.getDebugFlag())
                    {
                        std::ostream& str = context.getDebugStream();

                        str << "EXIT TRANSITION : TSAP::CLOSED::CC()"
                            << std::endl;
                    }

                    context.setState(TSAP::CLOSED);
                }
                catch (...)
                {
                    context.setState(TSAP::CLOSED);
                    throw;
                }
                context.getState().Entry(context);

            }

            void TSAP_CLOSED::CR(FSM<Provider>& context)
            {
                Provider& ctxt = context.getOwner();

                if (context.getDebugFlag())
                {
                    std::ostream& str = context.getDebugStream();

                    str << "LEAVING STATE   : TSAP::CLOSED"
                << std::endl;
                }

                if (P1())
                {
                    context.getState().Exit(context);
                    if (context.getDebugFlag())
                    {
                        std::ostream& str = context.getDebugStream();

                        str << "ENTER TRANSITION: TSAP::CLOSED::CR()"
                            << std::endl;
                    }

                    context.clearState();
                    try
                    {
                        ctxt.DR();
                        if (context.getDebugFlag())
                        {
                            std::ostream& str = context.getDebugStream();

                            str << "EXIT TRANSITION : TSAP::CLOSED::CR()"
                                << std::endl;
                        }

                        context.setState(TSAP::CLOSED);
                    }
                    catch (...)
                    {
                        context.setState(TSAP::CLOSED);
                        throw;
                    }
                    context.getState().Entry(context);
                }
                else if (!P1())
            
    {
                    context.getState().Exit(context);
                    if (context.getDebugFlag())
                    {
                        std::ostream& str = context.getDebugStream();

                        str << "ENTER TRANSITION: TSAP::CLOSED::CR()"
                            << std::endl;
                    }

                    context.clearState();
                    try
                    {
                        ctxt.TCONind();
                        if (context.getDebugFlag())
                        {
                            std::ostream& str = context.getDebugStream();

                            str << "EXIT TRANSITION : TSAP::CLOSED::CR()"
                                << std::endl;
                        }

                        context.setState(TSAP::WFTRESP);
                    }
                    catch (...)
                    {
                        context.setState(TSAP::WFTRESP);
                        throw;
                    }
                    context.getState().Entry(context);
                }                else
                {
                     TSAP_Default::CR(context);
                }

            }

            void TSAP_CLOSED::DC(FSM<Provider>& context)
            {

                if (context.getDebugFlag())
                {
                    std::ostream& str = context.getDebugStream();

                    str << "LEAVING STATE   : TSAP::CLOSED"
                << std::endl;
                }

                context.getState().Exit(context);
                if (context.getDebugFlag())
                {
                    std::ostream& str = context.getDebugStream();

                    str << "ENTER TRANSITION: TSAP::CLOSED::DC()"
                        << std::endl;
                }

                if (context.getDebugFlag())
                {
                    std::ostream& str = context.getDebugStream();

                    str << "EXIT TRANSITION : TSAP::CLOSED::DC()"
                        << std::endl;
                }

                context.setState(TSAP::CLOSED);
                context.getState().Entry(context);

            }

            void TSAP_CLOSED::DR(FSM<Provider>& context)
            {

                if (context.getDebugFlag())
                {
                    std::ostream& str = context.getDebugStream();

                    str << "LEAVING STATE   : TSAP::CLOSED"
                << std::endl;
                }

                context.getState().Exit(context);
                if (context.getDebugFlag())
                {
                    std::ostream& str = context.getDebugStream();

                    str << "ENTER TRANSITION: TSAP::CLOSED::DR()"
                        << std::endl;
                }

                if (context.getDebugFlag())
                {
                    std::ostream& str = context.getDebugStream();

                    str << "EXIT TRANSITION : TSAP::CLOSED::DR()"
                        << std::endl;
                }

                context.setState(TSAP::CLOSED);
                context.getState().Entry(context);

            }

            void TSAP_CLOSED::DT(FSM<Provider>& context)
            {

                if (context.getDebugFlag())
                {
                    std::ostream& str = context.getDebugStream();

                    str << "LEAVING STATE   : TSAP::CLOSED"
                << std::endl;
                }

                context.getState().Exit(context);
                if (context.getDebugFlag())
                {
                    std::ostream& str = context.getDebugStream();

                    str << "ENTER TRANSITION: TSAP::CLOSED::DT()"
                        << std::endl;
                }

                if (context.getDebugFlag())
                {
                    std::ostream& str = context.getDebugStream();

                    str << "EXIT TRANSITION : TSAP::CLOSED::DT()"
                        << std::endl;
                }

                context.setState(TSAP::CLOSED);
                context.getState().Entry(context);

            }

            void TSAP_CLOSED::EA(FSM<Provider>& context)
            {

                if (context.getDebugFlag())
                {
                    std::ostream& str = context.getDebugStream();

                    str << "LEAVING STATE   : TSAP::CLOSED"
                << std::endl;
                }

                context.getState().Exit(context);
                if (context.getDebugFlag())
                {
                    std::ostream& str = context.getDebugStream();

                    str << "ENTER TRANSITION: TSAP::CLOSED::EA()"
                        << std::endl;
                }

                if (context.getDebugFlag())
                {
                    std::ostream& str = context.getDebugStream();

                    str << "EXIT TRANSITION : TSAP::CLOSED::EA()"
                        << std::endl;
                }

                context.setState(TSAP::CLOSED);
                context.getState().Entry(context);

            }

            void TSAP_CLOSED::ED(FSM<Provider>& context)
            {

                if (context.getDebugFlag())
                {
                    std::ostream& str = context.getDebugStream();

                    str << "LEAVING STATE   : TSAP::CLOSED"
                << std::endl;
                }

                context.getState().Exit(context);
                if (context.getDebugFlag())
                {
                    std::ostream& str = context.getDebugStream();

                    str << "ENTER TRANSITION: TSAP::CLOSED::ED()"
                        << std::endl;
                }

                if (context.getDebugFlag())
                {
                    std::ostream& str = context.getDebugStream();

                    str << "EXIT TRANSITION : TSAP::CLOSED::ED()"
                        << std::endl;
                }

                context.setState(TSAP::CLOSED);
                context.getState().Entry(context);

            }

            void TSAP_CLOSED::ER(FSM<Provider>& context)
            {

                if (context.getDebugFlag())
                {
                    std::ostream& str = context.getDebugStream();

                    str << "LEAVING STATE   : TSAP::CLOSED"
                << std::endl;
                }

                context.getState().Exit(context);
                if (context.getDebugFlag())
                {
                    std::ostream& str = context.getDebugStream();

                    str << "ENTER TRANSITION: TSAP::CLOSED::ER()"
                        << std::endl;
                }

                if (context.getDebugFlag())
                {
                    std::ostream& str = context.getDebugStream();

                    str << "EXIT TRANSITION : TSAP::CLOSED::ER()"
                        << std::endl;
                }

                context.setState(TSAP::CLOSED);
                context.getState().Entry(context);

            }

            void TSAP_CLOSED::TCONreq(FSM<Provider>& context)
            {
                Provider& ctxt = context.getOwner();

                if (context.getDebugFlag())
                {
                    std::ostream& str = context.getDebugStream();

                    str << "LEAVING STATE   : TSAP::CLOSED"
                << std::endl;
                }

                if (P0())
                {
                    context.getState().Exit(context);
                    if (context.getDebugFlag())
                    {
                        std::ostream& str = context.getDebugStream();

                        str << "ENTER TRANSITION: TSAP::CLOSED::TCONreq()"
                            << std::endl;
                    }

                    context.clearState();
                    try
                    {
                        ctxt.TDISind();
                        if (context.getDebugFlag())
                        {
                            std::ostream& str = context.getDebugStream();

                            str << "EXIT TRANSITION : TSAP::CLOSED::TCONreq()"
                                << std::endl;
                        }

                        context.setState(TSAP::CLOSED);
                    }
                    catch (...)
                    {
                        context.setState(TSAP::CLOSED);
                        throw;
                    }
                    context.getState().Entry(context);
                }
                else if (P2())
            
    {
                    context.getState().Exit(context);
                    if (context.getDebugFlag())
                    {
                        std::ostream& str = context.getDebugStream();

                        str << "ENTER TRANSITION: TSAP::CLOSED::TCONreq()"
                            << std::endl;
                    }

                    context.clearState();
                    try
                    {
                        ctxt.NCONreq();
                        if (context.getDebugFlag())
                        {
                            std::ostream& str = context.getDebugStream();

                            str << "EXIT TRANSITION : TSAP::CLOSED::TCONreq()"
                                << std::endl;
                        }

                        context.setState(TSAP::WFNC);
                    }
                    catch (...)
                    {
                        context.setState(TSAP::WFNC);
                        throw;
                    }
                    context.getState().Entry(context);
                }
                else if (P4())
            
    {
                    context.getState().Exit(context);
                    if (context.getDebugFlag())
                    {
                        std::ostream& str = context.getDebugStream();

                        str << "ENTER TRANSITION: TSAP::CLOSED::TCONreq()"
                            << std::endl;
                    }

                    // No actions.
                    if (context.getDebugFlag())
                    {
                        std::ostream& str = context.getDebugStream();

                        str << "EXIT TRANSITION : TSAP::CLOSED::TCONreq()"
                            << std::endl;
                    }

                    context.setState(TSAP::WFNC);
                    context.getState().Entry(context);
                }                else
                {
                     TSAP_Default::TCONreq(context);
                }

            }

            void TSAP_CLOSED::TCONreq(FSM<Provider>& context, TPDU::CR& tsdu)
            {
                Provider& ctxt = context.getOwner();

                if (context.getDebugFlag())
                {
                    std::ostream& str = context.getDebugStream();

                    str << "LEAVING STATE   : TSAP::CLOSED"
                << std::endl;
                }

                if (P3())
                {
                    context.getState().Exit(context);
                    if (context.getDebugFlag())
                    {
                        std::ostream& str = context.getDebugStream();

                        str << "ENTER TRANSITION: TSAP::CLOSED::TCONreq(TPDU::CR& tsdu)"
                            << std::endl;
                    }

                    context.clearState();
                    try
                    {
                        ctxt.CR(tsdu);
                        if (context.getDebugFlag())
                        {
                            std::ostream& str = context.getDebugStream();

                            str << "EXIT TRANSITION : TSAP::CLOSED::TCONreq(TPDU::CR& tsdu)"
                                << std::endl;
                        }

                        context.setState(TSAP::WFCC);
                    }
                    catch (...)
                    {
                        context.setState(TSAP::WFCC);
                        throw;
                    }
                    context.getState().Entry(context);
                }
                else
                {
                     TSAP_Default::TCONreq(context, tsdu);
                }

            }

            void TSAP_ERROR::AK(FSM<Provider>& context)
            {

                if (context.getDebugFlag())
                {
                    std::ostream& str = context.getDebugStream();

                    str << "LEAVING STATE   : TSAP::ERROR"
                << std::endl;
                }

                if (context.getDebugFlag())
                {
                    std::ostream& str = context.getDebugStream();

                    str << "ENTER TRANSITION: TSAP::ERROR::AK()"
                        << std::endl;
                }

                if (context.getDebugFlag())
                {
                    std::ostream& str = context.getDebugStream();

                    str << "EXIT TRANSITION : TSAP::ERROR::AK()"
                        << std::endl;
                }


            }

            void TSAP_ERROR::CC(FSM<Provider>& context)
            {

                if (context.getDebugFlag())
                {
                    std::ostream& str = context.getDebugStream();

                    str << "LEAVING STATE   : TSAP::ERROR"
                << std::endl;
                }

                if (context.getDebugFlag())
                {
                    std::ostream& str = context.getDebugStream();

                    str << "ENTER TRANSITION: TSAP::ERROR::CC()"
                        << std::endl;
                }

                if (context.getDebugFlag())
                {
                    std::ostream& str = context.getDebugStream();

                    str << "EXIT TRANSITION : TSAP::ERROR::CC()"
                        << std::endl;
                }


            }

            void TSAP_ERROR::CR(FSM<Provider>& context)
            {

                if (context.getDebugFlag())
                {
                    std::ostream& str = context.getDebugStream();

                    str << "LEAVING STATE   : TSAP::ERROR"
                << std::endl;
                }

                if (context.getDebugFlag())
                {
                    std::ostream& str = context.getDebugStream();

                    str << "ENTER TRANSITION: TSAP::ERROR::CR()"
                        << std::endl;
                }

                if (context.getDebugFlag())
                {
                    std::ostream& str = context.getDebugStream();

                    str << "EXIT TRANSITION : TSAP::ERROR::CR()"
                        << std::endl;
                }


            }

            void TSAP_ERROR::DC(FSM<Provider>& context)
            {

                if (context.getDebugFlag())
                {
                    std::ostream& str = context.getDebugStream();

                    str << "LEAVING STATE   : TSAP::ERROR"
                << std::endl;
                }

                if (context.getDebugFlag())
                {
                    std::ostream& str = context.getDebugStream();

                    str << "ENTER TRANSITION: TSAP::ERROR::DC()"
                        << std::endl;
                }

                if (context.getDebugFlag())
                {
                    std::ostream& str = context.getDebugStream();

                    str << "EXIT TRANSITION : TSAP::ERROR::DC()"
                        << std::endl;
                }


            }

            void TSAP_ERROR::DR(FSM<Provider>& context)
            {

                if (context.getDebugFlag())
                {
                    std::ostream& str = context.getDebugStream();

                    str << "LEAVING STATE   : TSAP::ERROR"
                << std::endl;
                }

                if (context.getDebugFlag())
                {
                    std::ostream& str = context.getDebugStream();

                    str << "ENTER TRANSITION: TSAP::ERROR::DR()"
                        << std::endl;
                }

                if (context.getDebugFlag())
                {
                    std::ostream& str = context.getDebugStream();

                    str << "EXIT TRANSITION : TSAP::ERROR::DR()"
                        << std::endl;
                }


            }

            void TSAP_ERROR::DT(FSM<Provider>& context)
            {

                if (context.getDebugFlag())
                {
                    std::ostream& str = context.getDebugStream();

                    str << "LEAVING STATE   : TSAP::ERROR"
                << std::endl;
                }

                if (context.getDebugFlag())
                {
                    std::ostream& str = context.getDebugStream();

                    str << "ENTER TRANSITION: TSAP::ERROR::DT()"
                        << std::endl;
                }

                if (context.getDebugFlag())
                {
                    std::ostream& str = context.getDebugStream();

                    str << "EXIT TRANSITION : TSAP::ERROR::DT()"
                        << std::endl;
                }


            }

            void TSAP_ERROR::EA(FSM<Provider>& context)
            {

                if (context.getDebugFlag())
                {
                    std::ostream& str = context.getDebugStream();

                    str << "LEAVING STATE   : TSAP::ERROR"
                << std::endl;
                }

                if (context.getDebugFlag())
                {
                    std::ostream& str = context.getDebugStream();

                    str << "ENTER TRANSITION: TSAP::ERROR::EA()"
                        << std::endl;
                }

                if (context.getDebugFlag())
                {
                    std::ostream& str = context.getDebugStream();

                    str << "EXIT TRANSITION : TSAP::ERROR::EA()"
                        << std::endl;
                }


            }

            void TSAP_ERROR::ED(FSM<Provider>& context)
            {

                if (context.getDebugFlag())
                {
                    std::ostream& str = context.getDebugStream();

                    str << "LEAVING STATE   : TSAP::ERROR"
                << std::endl;
                }

                if (context.getDebugFlag())
                {
                    std::ostream& str = context.getDebugStream();

                    str << "ENTER TRANSITION: TSAP::ERROR::ED()"
                        << std::endl;
                }

                if (context.getDebugFlag())
                {
                    std::ostream& str = context.getDebugStream();

                    str << "EXIT TRANSITION : TSAP::ERROR::ED()"
                        << std::endl;
                }


            }

            void TSAP_ERROR::ER(FSM<Provider>& context)
            {

                if (context.getDebugFlag())
                {
                    std::ostream& str = context.getDebugStream();

                    str << "LEAVING STATE   : TSAP::ERROR"
                << std::endl;
                }

                if (context.getDebugFlag())
                {
                    std::ostream& str = context.getDebugStream();

                    str << "ENTER TRANSITION: TSAP::ERROR::ER()"
                        << std::endl;
                }

                if (context.getDebugFlag())
                {
                    std::ostream& str = context.getDebugStream();

                    str << "EXIT TRANSITION : TSAP::ERROR::ER()"
                        << std::endl;
                }


            }

            void TSAP_ERROR::NCONconf(FSM<Provider>& context)
            {

                if (context.getDebugFlag())
                {
                    std::ostream& str = context.getDebugStream();

                    str << "LEAVING STATE   : TSAP::ERROR"
                << std::endl;
                }

                if (context.getDebugFlag())
                {
                    std::ostream& str = context.getDebugStream();

                    str << "ENTER TRANSITION: TSAP::ERROR::NCONconf()"
                        << std::endl;
                }

                if (context.getDebugFlag())
                {
                    std::ostream& str = context.getDebugStream();

                    str << "EXIT TRANSITION : TSAP::ERROR::NCONconf()"
                        << std::endl;
                }


            }

            void TSAP_ERROR::NDISind(FSM<Provider>& context)
            {

                if (context.getDebugFlag())
                {
                    std::ostream& str = context.getDebugStream();

                    str << "LEAVING STATE   : TSAP::ERROR"
                << std::endl;
                }

                if (context.getDebugFlag())
                {
                    std::ostream& str = context.getDebugStream();

                    str << "ENTER TRANSITION: TSAP::ERROR::NDISind()"
                        << std::endl;
                }

                if (context.getDebugFlag())
                {
                    std::ostream& str = context.getDebugStream();

                    str << "EXIT TRANSITION : TSAP::ERROR::NDISind()"
                        << std::endl;
                }


            }

            void TSAP_ERROR::NRSTind(FSM<Provider>& context)
            {

                if (context.getDebugFlag())
                {
                    std::ostream& str = context.getDebugStream();

                    str << "LEAVING STATE   : TSAP::ERROR"
                << std::endl;
                }

                if (context.getDebugFlag())
                {
                    std::ostream& str = context.getDebugStream();

                    str << "ENTER TRANSITION: TSAP::ERROR::NRSTind()"
                        << std::endl;
                }

                if (context.getDebugFlag())
                {
                    std::ostream& str = context.getDebugStream();

                    str << "EXIT TRANSITION : TSAP::ERROR::NRSTind()"
                        << std::endl;
                }


            }

            void TSAP_ERROR::RJ(FSM<Provider>& context)
            {

                if (context.getDebugFlag())
                {
                    std::ostream& str = context.getDebugStream();

                    str << "LEAVING STATE   : TSAP::ERROR"
                << std::endl;
                }

                if (context.getDebugFlag())
                {
                    std::ostream& str = context.getDebugStream();

                    str << "ENTER TRANSITION: TSAP::ERROR::RJ()"
                        << std::endl;
                }

                if (context.getDebugFlag())
                {
                    std::ostream& str = context.getDebugStream();

                    str << "EXIT TRANSITION : TSAP::ERROR::RJ()"
                        << std::endl;
                }


            }

            void TSAP_ERROR::TCONreq(FSM<Provider>& context)
            {
                Provider& ctxt = context.getOwner();

                if (context.getDebugFlag())
                {
                    std::ostream& str = context.getDebugStream();

                    str << "LEAVING STATE   : TSAP::ERROR"
                << std::endl;
                }

                ProviderState& endState = context.getState();

                if (context.getDebugFlag())
                {
                    std::ostream& str = context.getDebugStream();

                    str << "ENTER TRANSITION: TSAP::ERROR::TCONreq()"
                        << std::endl;
                }

                context.clearState();
                try
                {
                    ctxt.foobar();
                    if (context.getDebugFlag())
                    {
                        std::ostream& str = context.getDebugStream();

                        str << "EXIT TRANSITION : TSAP::ERROR::TCONreq()"
                            << std::endl;
                    }

                    context.setState(endState);
                }
                catch (...)
                {
                    context.setState(endState);
                    throw;
                }

            }

            void TSAP_ERROR::TCONresp(FSM<Provider>& context)
            {

                if (context.getDebugFlag())
                {
                    std::ostream& str = context.getDebugStream();

                    str << "LEAVING STATE   : TSAP::ERROR"
                << std::endl;
                }

                if (context.getDebugFlag())
                {
                    std::ostream& str = context.getDebugStream();

                    str << "ENTER TRANSITION: TSAP::ERROR::TCONresp()"
                        << std::endl;
                }

                if (context.getDebugFlag())
                {
                    std::ostream& str = context.getDebugStream();

                    str << "EXIT TRANSITION : TSAP::ERROR::TCONresp()"
                        << std::endl;
                }


            }

            void TSAP_ERROR::TDISreq(FSM<Provider>& context)
            {

                if (context.getDebugFlag())
                {
                    std::ostream& str = context.getDebugStream();

                    str << "LEAVING STATE   : TSAP::ERROR"
                << std::endl;
                }

                if (context.getDebugFlag())
                {
                    std::ostream& str = context.getDebugStream();

                    str << "ENTER TRANSITION: TSAP::ERROR::TDISreq()"
                        << std::endl;
                }

                if (context.getDebugFlag())
                {
                    std::ostream& str = context.getDebugStream();

                    str << "EXIT TRANSITION : TSAP::ERROR::TDISreq()"
                        << std::endl;
                }


            }

            void TSAP_ERROR::TDTreq(FSM<Provider>& context)
            {

                if (context.getDebugFlag())
                {
                    std::ostream& str = context.getDebugStream();

                    str << "LEAVING STATE   : TSAP::ERROR"
                << std::endl;
                }

                if (context.getDebugFlag())
                {
                    std::ostream& str = context.getDebugStream();

                    str << "ENTER TRANSITION: TSAP::ERROR::TDTreq()"
                        << std::endl;
                }

                if (context.getDebugFlag())
                {
                    std::ostream& str = context.getDebugStream();

                    str << "EXIT TRANSITION : TSAP::ERROR::TDTreq()"
                        << std::endl;
                }


            }

            void TSAP_ERROR::TEXreq(FSM<Provider>& context)
            {

                if (context.getDebugFlag())
                {
                    std::ostream& str = context.getDebugStream();

                    str << "LEAVING STATE   : TSAP::ERROR"
                << std::endl;
                }

                if (context.getDebugFlag())
                {
                    std::ostream& str = context.getDebugStream();

                    str << "ENTER TRANSITION: TSAP::ERROR::TEXreq()"
                        << std::endl;
                }

                if (context.getDebugFlag())
                {
                    std::ostream& str = context.getDebugStream();

                    str << "EXIT TRANSITION : TSAP::ERROR::TEXreq()"
                        << std::endl;
                }


            }
        }
    }
}

//
// Local variables:
//  buffer-read-only: t
// End:
//
