//
// ex: set ro:
// DO NOT EDIT.
// generated by smc (http://smc.sourceforge.net/)
// from file : TSAP.sm
//

#ifndef FSM_H
#define FSM_H


#define SMC_USES_IOSTREAMS

#include <statemap.h>

namespace ALS
{
    namespace TSAP
    {
        namespace PROV
        {
            // Forward declarations.
            class TSAP;
            class TSAP_WFNC;
            class TSAP_WFCC;
            class TSAP_WBCL;
            class TSAP_OPEN;
            class TSAP_CLOSING;
            class TSAP_WFTRESP;
            class TSAP_CLOSED;
            class TSAP_WFNC_R;
            class TSAP_WFCC_R;
            class TSAP_WBCL_R;
            class TSAP_OPEN_R;
            class TSAP_OPEN_WR;
            class TSAP_CLOSING_R;
            class TSAP_CLOSING_WR;
            class TSAP_WFTRESP_WR;
            class TSAP_WBCL_WR;
            class TSAP_WBOC;
            class TSAP_WBOC_WR;
            class TSAP_CLOSING_BOC;
            class TSAP_CLOSING_BOC_WR;
            class TSAP_AKWAIT;
            class TSAP_REFWAIT;
            class TSAP_ERROR;
            class TSAP_Default;
            class ProviderState;
            template<typename DERIVED> class FSM;
            class Provider;

            class ProviderState :
                public statemap::State
            {
            public:

                ProviderState(const char * const name, const int stateId)
                : statemap::State(name, stateId)
                {};

                virtual void Entry(FSM<Provider>&) {};
                virtual void Exit(FSM<Provider>&) {};

                virtual void AK(FSM<Provider>& context);
                virtual void CC(FSM<Provider>& context);
                virtual void CR(FSM<Provider>& context);
                virtual void DC(FSM<Provider>& context);
                virtual void DR(FSM<Provider>& context);
                virtual void DT(FSM<Provider>& context);
                virtual void DT(FSM<Provider>& context, shared_ptr<Buffer>& tsdu);
                virtual void EA(FSM<Provider>& context);
                virtual void ED(FSM<Provider>& context);
                virtual void ER(FSM<Provider>& context);
                virtual void NCONconf(FSM<Provider>& context);
                virtual void NCONconf(FSM<Provider>& context, Buffer* tdsu);
                virtual void NDISind(FSM<Provider>& context);
                virtual void NRSTind(FSM<Provider>& context);
                virtual void RJ(FSM<Provider>& context);
                virtual void TCONreq(FSM<Provider>& context);
                virtual void TCONreq(FSM<Provider>& context, TPDU::CR& tsdu);
                virtual void TCONresp(FSM<Provider>& context);
                virtual void TCONresp(FSM<Provider>& context, TPDU::CC& tsdu);
                virtual void TDISreq(FSM<Provider>& context);
                virtual void TDISreq(FSM<Provider>& context, TPDU::DR& tsdu);
                virtual void TDTreq(FSM<Provider>& context);
                virtual void TDTreq(FSM<Provider>& context, TPDU::DT& tsdu);
                virtual void TEXreq(FSM<Provider>& context);

            protected:

                virtual void Default(FSM<Provider>& context);
            };

            class TSAP
            {
            public:

                static TSAP_WFNC WFNC;
                static TSAP_WFCC WFCC;
                static TSAP_WBCL WBCL;
                static TSAP_OPEN OPEN;
                static TSAP_CLOSING CLOSING;
                static TSAP_WFTRESP WFTRESP;
                static TSAP_CLOSED CLOSED;
                static TSAP_WFNC_R WFNC_R;
                static TSAP_WFCC_R WFCC_R;
                static TSAP_WBCL_R WBCL_R;
                static TSAP_OPEN_R OPEN_R;
                static TSAP_OPEN_WR OPEN_WR;
                static TSAP_CLOSING_R CLOSING_R;
                static TSAP_CLOSING_WR CLOSING_WR;
                static TSAP_WFTRESP_WR WFTRESP_WR;
                static TSAP_WBCL_WR WBCL_WR;
                static TSAP_WBOC WBOC;
                static TSAP_WBOC_WR WBOC_WR;
                static TSAP_CLOSING_BOC CLOSING_BOC;
                static TSAP_CLOSING_BOC_WR CLOSING_BOC_WR;
                static TSAP_AKWAIT AKWAIT;
                static TSAP_REFWAIT REFWAIT;
                static TSAP_ERROR ERROR;
            };

            class TSAP_Default :
                public ProviderState
            {
            public:

                TSAP_Default(const char * const name, const int stateId)
                : ProviderState(name, stateId)
                {};

            };

            class TSAP_WFNC :
                public TSAP_Default
            {
            public:
                TSAP_WFNC(const char * const name, const int stateId)
                : TSAP_Default(name, stateId)
                {};

                virtual void NCONconf(FSM<Provider>& context, Buffer* tdsu);
                virtual void NDISind(FSM<Provider>& context);
                virtual void TDISreq(FSM<Provider>& context);
            };

            class TSAP_WFCC :
                public TSAP_Default
            {
            public:
                TSAP_WFCC(const char * const name, const int stateId)
                : TSAP_Default(name, stateId)
                {};

                virtual void CC(FSM<Provider>& context);
                virtual void DR(FSM<Provider>& context);
                virtual void NDISind(FSM<Provider>& context);
                virtual void NRSTind(FSM<Provider>& context);
                virtual void TDISreq(FSM<Provider>& context);
            };

            class TSAP_WBCL :
                public TSAP_Default
            {
            public:
                TSAP_WBCL(const char * const name, const int stateId)
                : TSAP_Default(name, stateId)
                {};

            };

            class TSAP_OPEN :
                public TSAP_Default
            {
            public:
                TSAP_OPEN(const char * const name, const int stateId)
                : TSAP_Default(name, stateId)
                {};

                virtual void CR(FSM<Provider>& context);
                virtual void DR(FSM<Provider>& context);
                virtual void DT(FSM<Provider>& context, shared_ptr<Buffer>& tsdu);
                virtual void NDISind(FSM<Provider>& context);
                virtual void NRSTind(FSM<Provider>& context);
                virtual void TDISreq(FSM<Provider>& context);
                virtual void TDISreq(FSM<Provider>& context, TPDU::DR& tsdu);
                virtual void TDTreq(FSM<Provider>& context, TPDU::DT& tsdu);
            };

            class TSAP_CLOSING :
                public TSAP_Default
            {
            public:
                TSAP_CLOSING(const char * const name, const int stateId)
                : TSAP_Default(name, stateId)
                {};

            };

            class TSAP_WFTRESP :
                public TSAP_Default
            {
            public:
                TSAP_WFTRESP(const char * const name, const int stateId)
                : TSAP_Default(name, stateId)
                {};

                virtual void CR(FSM<Provider>& context);
                virtual void DR(FSM<Provider>& context);
                virtual void NDISind(FSM<Provider>& context);
                virtual void NRSTind(FSM<Provider>& context);
                virtual void TCONresp(FSM<Provider>& context, TPDU::CC& tsdu);
                virtual void TDISreq(FSM<Provider>& context, TPDU::DR& tsdu);
            };

            class TSAP_CLOSED :
                public TSAP_Default
            {
            public:
                TSAP_CLOSED(const char * const name, const int stateId)
                : TSAP_Default(name, stateId)
                {};

                virtual void AK(FSM<Provider>& context);
                virtual void CC(FSM<Provider>& context);
                virtual void CR(FSM<Provider>& context);
                virtual void DC(FSM<Provider>& context);
                virtual void DR(FSM<Provider>& context);
                virtual void DT(FSM<Provider>& context);
                virtual void EA(FSM<Provider>& context);
                virtual void ED(FSM<Provider>& context);
                virtual void ER(FSM<Provider>& context);
                virtual void TCONreq(FSM<Provider>& context);
                virtual void TCONreq(FSM<Provider>& context, TPDU::CR& tsdu);
            };

            class TSAP_WFNC_R :
                public TSAP_Default
            {
            public:
                TSAP_WFNC_R(const char * const name, const int stateId)
                : TSAP_Default(name, stateId)
                {};

            };

            class TSAP_WFCC_R :
                public TSAP_Default
            {
            public:
                TSAP_WFCC_R(const char * const name, const int stateId)
                : TSAP_Default(name, stateId)
                {};

            };

            class TSAP_WBCL_R :
                public TSAP_Default
            {
            public:
                TSAP_WBCL_R(const char * const name, const int stateId)
                : TSAP_Default(name, stateId)
                {};

            };

            class TSAP_OPEN_R :
                public TSAP_Default
            {
            public:
                TSAP_OPEN_R(const char * const name, const int stateId)
                : TSAP_Default(name, stateId)
                {};

            };

            class TSAP_OPEN_WR :
                public TSAP_Default
            {
            public:
                TSAP_OPEN_WR(const char * const name, const int stateId)
                : TSAP_Default(name, stateId)
                {};

            };

            class TSAP_CLOSING_R :
                public TSAP_Default
            {
            public:
                TSAP_CLOSING_R(const char * const name, const int stateId)
                : TSAP_Default(name, stateId)
                {};

            };

            class TSAP_CLOSING_WR :
                public TSAP_Default
            {
            public:
                TSAP_CLOSING_WR(const char * const name, const int stateId)
                : TSAP_Default(name, stateId)
                {};

            };

            class TSAP_WFTRESP_WR :
                public TSAP_Default
            {
            public:
                TSAP_WFTRESP_WR(const char * const name, const int stateId)
                : TSAP_Default(name, stateId)
                {};

            };

            class TSAP_WBCL_WR :
                public TSAP_Default
            {
            public:
                TSAP_WBCL_WR(const char * const name, const int stateId)
                : TSAP_Default(name, stateId)
                {};

            };

            class TSAP_WBOC :
                public TSAP_Default
            {
            public:
                TSAP_WBOC(const char * const name, const int stateId)
                : TSAP_Default(name, stateId)
                {};

            };

            class TSAP_WBOC_WR :
                public TSAP_Default
            {
            public:
                TSAP_WBOC_WR(const char * const name, const int stateId)
                : TSAP_Default(name, stateId)
                {};

            };

            class TSAP_CLOSING_BOC :
                public TSAP_Default
            {
            public:
                TSAP_CLOSING_BOC(const char * const name, const int stateId)
                : TSAP_Default(name, stateId)
                {};

            };

            class TSAP_CLOSING_BOC_WR :
                public TSAP_Default
            {
            public:
                TSAP_CLOSING_BOC_WR(const char * const name, const int stateId)
                : TSAP_Default(name, stateId)
                {};

            };

            class TSAP_AKWAIT :
                public TSAP_Default
            {
            public:
                TSAP_AKWAIT(const char * const name, const int stateId)
                : TSAP_Default(name, stateId)
                {};

            };

            class TSAP_REFWAIT :
                public TSAP_Default
            {
            public:
                TSAP_REFWAIT(const char * const name, const int stateId)
                : TSAP_Default(name, stateId)
                {};

            };

            class TSAP_ERROR :
                public TSAP_Default
            {
            public:
                TSAP_ERROR(const char * const name, const int stateId)
                : TSAP_Default(name, stateId)
                {};

                virtual void AK(FSM<Provider>& context);
                virtual void CC(FSM<Provider>& context);
                virtual void CR(FSM<Provider>& context);
                virtual void DC(FSM<Provider>& context);
                virtual void DR(FSM<Provider>& context);
                virtual void DT(FSM<Provider>& context);
                virtual void EA(FSM<Provider>& context);
                virtual void ED(FSM<Provider>& context);
                virtual void ER(FSM<Provider>& context);
                virtual void NCONconf(FSM<Provider>& context);
                virtual void NDISind(FSM<Provider>& context);
                virtual void NRSTind(FSM<Provider>& context);
                virtual void RJ(FSM<Provider>& context);
                virtual void TCONreq(FSM<Provider>& context);
                virtual void TCONresp(FSM<Provider>& context);
                virtual void TDISreq(FSM<Provider>& context);
                virtual void TDTreq(FSM<Provider>& context);
                virtual void TEXreq(FSM<Provider>& context);
            };

            template<typename DERIVED>
class FSM :
                public statemap::FSMContext
            {
            public:

                explicit FSM()
                : FSMContext(TSAP::CLOSED)
                {};

                FSM(const statemap::State& state)
                : FSMContext(state)
                {};

                virtual void enterStartState()
                {
                    getState().Entry(*this);
                    return;
                }

                inline Provider& getOwner()
                {
                    return (*static_cast<DERIVED*>(this));
                };

                inline ProviderState& getState() const
                {
                    if (_state == NULL)
                    {
                        throw statemap::StateUndefinedException();
                    }

                    return dynamic_cast<ProviderState&>(*_state);
                };

                inline void AK()
                {
                    setTransition("AK");
                    getState().AK(*this);
                    setTransition(NULL);
                };

                inline void CC()
                {
                    setTransition("CC");
                    getState().CC(*this);
                    setTransition(NULL);
                };

                inline void CR()
                {
                    setTransition("CR");
                    getState().CR(*this);
                    setTransition(NULL);
                };

                inline void DC()
                {
                    setTransition("DC");
                    getState().DC(*this);
                    setTransition(NULL);
                };

                inline void DR()
                {
                    setTransition("DR");
                    getState().DR(*this);
                    setTransition(NULL);
                };

                inline void DT()
                {
                    setTransition("DT");
                    getState().DT(*this);
                    setTransition(NULL);
                };

                inline void DT(shared_ptr<Buffer>& tsdu)
                {
                    setTransition("DT");
                    getState().DT(*this, tsdu);
                    setTransition(NULL);
                };

                inline void EA()
                {
                    setTransition("EA");
                    getState().EA(*this);
                    setTransition(NULL);
                };

                inline void ED()
                {
                    setTransition("ED");
                    getState().ED(*this);
                    setTransition(NULL);
                };

                inline void ER()
                {
                    setTransition("ER");
                    getState().ER(*this);
                    setTransition(NULL);
                };

                inline void NCONconf()
                {
                    setTransition("NCONconf");
                    getState().NCONconf(*this);
                    setTransition(NULL);
                };

                inline void NCONconf(Buffer* tdsu)
                {
                    setTransition("NCONconf");
                    getState().NCONconf(*this, tdsu);
                    setTransition(NULL);
                };

                inline void NDISind()
                {
                    setTransition("NDISind");
                    getState().NDISind(*this);
                    setTransition(NULL);
                };

                inline void NRSTind()
                {
                    setTransition("NRSTind");
                    getState().NRSTind(*this);
                    setTransition(NULL);
                };

                inline void RJ()
                {
                    setTransition("RJ");
                    getState().RJ(*this);
                    setTransition(NULL);
                };

                inline void TCONreq()
                {
                    setTransition("TCONreq");
                    getState().TCONreq(*this);
                    setTransition(NULL);
                };

                inline void TCONreq(TPDU::CR& tsdu)
                {
                    setTransition("TCONreq");
                    getState().TCONreq(*this, tsdu);
                    setTransition(NULL);
                };

                inline void TCONresp()
                {
                    setTransition("TCONresp");
                    getState().TCONresp(*this);
                    setTransition(NULL);
                };

                inline void TCONresp(TPDU::CC& tsdu)
                {
                    setTransition("TCONresp");
                    getState().TCONresp(*this, tsdu);
                    setTransition(NULL);
                };

                inline void TDISreq()
                {
                    setTransition("TDISreq");
                    getState().TDISreq(*this);
                    setTransition(NULL);
                };

                inline void TDISreq(TPDU::DR& tsdu)
                {
                    setTransition("TDISreq");
                    getState().TDISreq(*this, tsdu);
                    setTransition(NULL);
                };

                inline void TDTreq()
                {
                    setTransition("TDTreq");
                    getState().TDTreq(*this);
                    setTransition(NULL);
                };

                inline void TDTreq(TPDU::DT& tsdu)
                {
                    setTransition("TDTreq");
                    getState().TDTreq(*this, tsdu);
                    setTransition(NULL);
                };

                inline void TEXreq()
                {
                    setTransition("TEXreq");
                    getState().TEXreq(*this);
                    setTransition(NULL);
                };
            };
        }

    }

}


#endif // FSM_H

//
// Local variables:
//  buffer-read-only: t
// End:
//
