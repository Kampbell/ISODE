/*
 * ex: set ro:
 * DO NOT EDIT.
 * generated by smc (http://smc.sourceforge.net/)
 * from file : TSAP.sm
 */

#ifndef _H_FSM
#define _H_FSM


#define SMC_USES_IOSTREAMS

#include "statemap.h"

namespace ALS
{
    namespace TSAP
    {
        namespace PROV
        {
            // Forward declarations.
            class STATE;
            class STATE_WFNC;
            class STATE_WFCC;
            class STATE_WBCL;
            class STATE_OPEN;
            class STATE_CLOSING;
            class STATE_WFTRESP;
            class STATE_CLOSED;
            class STATE_WFNC_R;
            class STATE_WFCC_R;
            class STATE_WBCL_R;
            class STATE_OPEN_R;
            class STATE_OPEN_WR;
            class STATE_CLOSING_R;
            class STATE_CLOSING_WR;
            class STATE_WFTRESP_WR;
            class STATE_WBCL_WR;
            class STATE_WBOC;
            class STATE_WBOC_WR;
            class STATE_CLOSING_BOC;
            class STATE_CLOSING_BOC_WR;
            class STATE_AKWAIT;
            class STATE_REFWAIT;
            class STATE_ERROR;
            class STATE_Default;
            class ProviderState;
            class FSM;
            class Provider;

            class ProviderState :
                public statemap::State
            {
            public:

                ProviderState(const char *name, int stateId)
                : statemap::State(name, stateId)
                {};

                virtual void Entry(FSM&) {};
                virtual void Exit(FSM&) {};

                virtual void AK(FSM& context);
                virtual void CC(FSM& context);
                virtual void CR(FSM& context);
                virtual void DC(FSM& context);
                virtual void DR(FSM& context);
                virtual void DT(FSM& context);
                virtual void DT(FSM& context, shared_ptr<Buffer>& tsdu);
                virtual void EA(FSM& context);
                virtual void ED(FSM& context);
                virtual void ER(FSM& context);
                virtual void NCONconf(FSM& context);
                virtual void NCONconf(FSM& context, Buffer* tdsu);
                virtual void NDISind(FSM& context);
                virtual void NRSTind(FSM& context);
                virtual void RJ(FSM& context);
                virtual void TCONreq(FSM& context);
                virtual void TCONreq(FSM& context, TPDU::CR& tsdu);
                virtual void TCONresp(FSM& context);
                virtual void TCONresp(FSM& context, TPDU::CC& tsdu);
                virtual void TDISreq(FSM& context);
                virtual void TDISreq(FSM& context, TPDU::DR& tsdu);
                virtual void TDTreq(FSM& context);
                virtual void TDTreq(FSM& context, TPDU::DT& tsdu);
                virtual void TEXreq(FSM& context);

            protected:

                virtual void Default(FSM& context);
            };

            class STATE
            {
            public:

                static STATE_WFNC WFNC;
                static STATE_WFCC WFCC;
                static STATE_WBCL WBCL;
                static STATE_OPEN OPEN;
                static STATE_CLOSING CLOSING;
                static STATE_WFTRESP WFTRESP;
                static STATE_CLOSED CLOSED;
                static STATE_WFNC_R WFNC_R;
                static STATE_WFCC_R WFCC_R;
                static STATE_WBCL_R WBCL_R;
                static STATE_OPEN_R OPEN_R;
                static STATE_OPEN_WR OPEN_WR;
                static STATE_CLOSING_R CLOSING_R;
                static STATE_CLOSING_WR CLOSING_WR;
                static STATE_WFTRESP_WR WFTRESP_WR;
                static STATE_WBCL_WR WBCL_WR;
                static STATE_WBOC WBOC;
                static STATE_WBOC_WR WBOC_WR;
                static STATE_CLOSING_BOC CLOSING_BOC;
                static STATE_CLOSING_BOC_WR CLOSING_BOC_WR;
                static STATE_AKWAIT AKWAIT;
                static STATE_REFWAIT REFWAIT;
                static STATE_ERROR ERROR;
            };

            class STATE_Default :
                public ProviderState
            {
            public:

                STATE_Default(const char *name, int stateId)
                : ProviderState(name, stateId)
                {};

            };

            class STATE_WFNC :
                public STATE_Default
            {
            public:
                STATE_WFNC(const char *name, int stateId)
                : STATE_Default(name, stateId)
                {};

                void NCONconf(FSM& context, Buffer* tdsu);
                void NDISind(FSM& context);
                void TDISreq(FSM& context);
            };

            class STATE_WFCC :
                public STATE_Default
            {
            public:
                STATE_WFCC(const char *name, int stateId)
                : STATE_Default(name, stateId)
                {};

                void CC(FSM& context);
                void DR(FSM& context);
                void NDISind(FSM& context);
                void NRSTind(FSM& context);
                void TDISreq(FSM& context);
            };

            class STATE_WBCL :
                public STATE_Default
            {
            public:
                STATE_WBCL(const char *name, int stateId)
                : STATE_Default(name, stateId)
                {};

            };

            class STATE_OPEN :
                public STATE_Default
            {
            public:
                STATE_OPEN(const char *name, int stateId)
                : STATE_Default(name, stateId)
                {};

                void CR(FSM& context);
                void DR(FSM& context);
                void DT(FSM& context, shared_ptr<Buffer>& tsdu);
                void NDISind(FSM& context);
                void NRSTind(FSM& context);
                void TDISreq(FSM& context);
                void TDISreq(FSM& context, TPDU::DR& tsdu);
                void TDTreq(FSM& context, TPDU::DT& tsdu);
            };

            class STATE_CLOSING :
                public STATE_Default
            {
            public:
                STATE_CLOSING(const char *name, int stateId)
                : STATE_Default(name, stateId)
                {};

            };

            class STATE_WFTRESP :
                public STATE_Default
            {
            public:
                STATE_WFTRESP(const char *name, int stateId)
                : STATE_Default(name, stateId)
                {};

                void CR(FSM& context);
                void DR(FSM& context);
                void NDISind(FSM& context);
                void NRSTind(FSM& context);
                void TCONresp(FSM& context, TPDU::CC& tsdu);
                void TDISreq(FSM& context, TPDU::DR& tsdu);
            };

            class STATE_CLOSED :
                public STATE_Default
            {
            public:
                STATE_CLOSED(const char *name, int stateId)
                : STATE_Default(name, stateId)
                {};

                void AK(FSM& context);
                void CC(FSM& context);
                void CR(FSM& context);
                void DC(FSM& context);
                void DR(FSM& context);
                void DT(FSM& context);
                void EA(FSM& context);
                void ED(FSM& context);
                void ER(FSM& context);
                void TCONreq(FSM& context);
                void TCONreq(FSM& context, TPDU::CR& tsdu);
            };

            class STATE_WFNC_R :
                public STATE_Default
            {
            public:
                STATE_WFNC_R(const char *name, int stateId)
                : STATE_Default(name, stateId)
                {};

            };

            class STATE_WFCC_R :
                public STATE_Default
            {
            public:
                STATE_WFCC_R(const char *name, int stateId)
                : STATE_Default(name, stateId)
                {};

            };

            class STATE_WBCL_R :
                public STATE_Default
            {
            public:
                STATE_WBCL_R(const char *name, int stateId)
                : STATE_Default(name, stateId)
                {};

            };

            class STATE_OPEN_R :
                public STATE_Default
            {
            public:
                STATE_OPEN_R(const char *name, int stateId)
                : STATE_Default(name, stateId)
                {};

            };

            class STATE_OPEN_WR :
                public STATE_Default
            {
            public:
                STATE_OPEN_WR(const char *name, int stateId)
                : STATE_Default(name, stateId)
                {};

            };

            class STATE_CLOSING_R :
                public STATE_Default
            {
            public:
                STATE_CLOSING_R(const char *name, int stateId)
                : STATE_Default(name, stateId)
                {};

            };

            class STATE_CLOSING_WR :
                public STATE_Default
            {
            public:
                STATE_CLOSING_WR(const char *name, int stateId)
                : STATE_Default(name, stateId)
                {};

            };

            class STATE_WFTRESP_WR :
                public STATE_Default
            {
            public:
                STATE_WFTRESP_WR(const char *name, int stateId)
                : STATE_Default(name, stateId)
                {};

            };

            class STATE_WBCL_WR :
                public STATE_Default
            {
            public:
                STATE_WBCL_WR(const char *name, int stateId)
                : STATE_Default(name, stateId)
                {};

            };

            class STATE_WBOC :
                public STATE_Default
            {
            public:
                STATE_WBOC(const char *name, int stateId)
                : STATE_Default(name, stateId)
                {};

            };

            class STATE_WBOC_WR :
                public STATE_Default
            {
            public:
                STATE_WBOC_WR(const char *name, int stateId)
                : STATE_Default(name, stateId)
                {};

            };

            class STATE_CLOSING_BOC :
                public STATE_Default
            {
            public:
                STATE_CLOSING_BOC(const char *name, int stateId)
                : STATE_Default(name, stateId)
                {};

            };

            class STATE_CLOSING_BOC_WR :
                public STATE_Default
            {
            public:
                STATE_CLOSING_BOC_WR(const char *name, int stateId)
                : STATE_Default(name, stateId)
                {};

            };

            class STATE_AKWAIT :
                public STATE_Default
            {
            public:
                STATE_AKWAIT(const char *name, int stateId)
                : STATE_Default(name, stateId)
                {};

            };

            class STATE_REFWAIT :
                public STATE_Default
            {
            public:
                STATE_REFWAIT(const char *name, int stateId)
                : STATE_Default(name, stateId)
                {};

            };

            class STATE_ERROR :
                public STATE_Default
            {
            public:
                STATE_ERROR(const char *name, int stateId)
                : STATE_Default(name, stateId)
                {};

                void AK(FSM& context);
                void CC(FSM& context);
                void CR(FSM& context);
                void DC(FSM& context);
                void DR(FSM& context);
                void DT(FSM& context);
                void EA(FSM& context);
                void ED(FSM& context);
                void ER(FSM& context);
                void NCONconf(FSM& context);
                void NDISind(FSM& context);
                void NRSTind(FSM& context);
                void RJ(FSM& context);
                void TCONreq(FSM& context);
                void TCONresp(FSM& context);
                void TDISreq(FSM& context);
                void TDTreq(FSM& context);
                void TEXreq(FSM& context);
            };

            class FSM :
                public statemap::FSMContext
            {
            public:

                FSM(Provider& owner)
                : FSMContext(STATE::CLOSED),
                  _owner(owner)
                {};

                FSM(Provider& owner, const statemap::State& state)
                : FSMContext(state),
                  _owner(owner)
                {};

                virtual void enterStartState()
                {
                    getState().Entry(*this);
                    return;
                }

                Provider& getOwner() const
                {
                    return (_owner);
                };

                ProviderState& getState() const
                {
                    if (_state == NULL)
                    {
                        throw statemap::StateUndefinedException();
                    }

                    return (dynamic_cast<ProviderState&>(*_state));
                };

                void AK()
                {
                    (getState()).AK(*this);
                };

                void CC()
                {
                    (getState()).CC(*this);
                };

                void CR()
                {
                    (getState()).CR(*this);
                };

                void DC()
                {
                    (getState()).DC(*this);
                };

                void DR()
                {
                    (getState()).DR(*this);
                };

                void DT()
                {
                    (getState()).DT(*this);
                };

                void DT(shared_ptr<Buffer>& tsdu)
                {
                    (getState()).DT(*this, tsdu);
                };

                void EA()
                {
                    (getState()).EA(*this);
                };

                void ED()
                {
                    (getState()).ED(*this);
                };

                void ER()
                {
                    (getState()).ER(*this);
                };

                void NCONconf()
                {
                    (getState()).NCONconf(*this);
                };

                void NCONconf(Buffer* tdsu)
                {
                    (getState()).NCONconf(*this, tdsu);
                };

                void NDISind()
                {
                    (getState()).NDISind(*this);
                };

                void NRSTind()
                {
                    (getState()).NRSTind(*this);
                };

                void RJ()
                {
                    (getState()).RJ(*this);
                };

                void TCONreq()
                {
                    (getState()).TCONreq(*this);
                };

                void TCONreq(TPDU::CR& tsdu)
                {
                    (getState()).TCONreq(*this, tsdu);
                };

                void TCONresp()
                {
                    (getState()).TCONresp(*this);
                };

                void TCONresp(TPDU::CC& tsdu)
                {
                    (getState()).TCONresp(*this, tsdu);
                };

                void TDISreq()
                {
                    (getState()).TDISreq(*this);
                };

                void TDISreq(TPDU::DR& tsdu)
                {
                    (getState()).TDISreq(*this, tsdu);
                };

                void TDTreq()
                {
                    (getState()).TDTreq(*this);
                };

                void TDTreq(TPDU::DT& tsdu)
                {
                    (getState()).TDTreq(*this, tsdu);
                };

                void TEXreq()
                {
                    (getState()).TEXreq(*this);
                };

            private:

                Provider& _owner;
            };
        }

    }

}


#endif // _H_FSM

/*
 * Local variables:
 *  buffer-read-only: t
 * End:
 */
